<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Markdown.Layout2D</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Markdown.Layout2D.XmlLayout">
            <summary>
            Class managing 2D XML Layout integration into Markdown documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.#ctor">
            <summary>
            Class managing 2D XML Layout integration into Markdown documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.Init(System.String)">
            <summary>
            Initializes the Layout2D-Markdown integration.
            </summary>
            <param name="ContentRootFolder">Content root folder. If hosting markdown under a web server, this would correspond
            to the roof folder for the web content.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.DeleteOldFiles(System.TimeSpan,System.Boolean)">
            <summary>
            Deletes generated files older than <paramref name="MaxAge"/>.
            </summary>
            <param name="MaxAge">Age limit.</param>
            <param name="Reschedule">If rescheduling should be done.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.Supports(System.String)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.Register(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Is called on the object when an instance of the element has been created in a document.
            </summary>
            <param name="Document">Document containing the instance.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.GetFileName(System.String,System.String[],Waher.Script.Variables)">
            <summary>
            Generates an image, saves it, and returns the file name of the image file.
            </summary>
            <param name="Language">Language</param>
            <param name="Rows">Code Block rows</param>
            <param name="Session">Session variables.</param>
            <returns>File name</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderMarkdown(Waher.Content.Markdown.Rendering.MarkdownRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Markdown for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderWpfXaml(Waher.Content.Markdown.Wpf.WpfXamlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates WPF XAML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderXamarinFormsXaml(Waher.Content.Markdown.Xamarin.XamarinFormsXamlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Xamarin.Forms XAML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderLatex(Waher.Content.Markdown.Latex.LatexRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates LaTeX for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.GenerateImage(System.String[],System.String,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates an image of the contents.
            </summary>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>Image, if successful, null otherwise.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.Supports(System.Xml.XmlDocument)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Xml">XML Document</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.TransformXml(System.Xml.XmlDocument,Waher.Script.Variables)">
            <summary>
            Transforms the XML document before visualizing it.
            </summary>
            <param name="Xml">XML Document.</param>
            <param name="Session">Current variables.</param>
            <returns>Transformed object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Layout2D.XmlLayout.RenderContractXml(Waher.Content.Markdown.Contracts.ContractsRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates smart contract XML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
    </members>
</doc>
