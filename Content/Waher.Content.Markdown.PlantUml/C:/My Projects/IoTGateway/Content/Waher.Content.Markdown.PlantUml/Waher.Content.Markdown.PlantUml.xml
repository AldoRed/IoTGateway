<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Markdown.PlantUml</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Markdown.PlantUml.PlantUml">
            <summary>
            Class managing PlantUML integration into Markdown documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.#ctor">
            <summary>
            Class managing PlantUML integration into Markdown documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.Init(System.String)">
            <summary>
            Initializes the PlantUML-Markdown integration.
            </summary>
            <param name="ContentRootFolder">Content root folder. If hosting markdown under a web server, this would correspond
            to the roof folder for the web content.</param>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.SetPath(System.String,System.String)">
            <summary>
            Sets the full path of PlantUML.
            </summary>
            <param name="JarPath">Full path of plantuml.jar</param>
            <param name="JavaPath">Full path of java.exe</param>
            <exception cref="T:System.Exception">If trying to set the path to a different path than the one set previously.
            The path can only be set once, for security reasons.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.DeleteOldFiles(System.TimeSpan,System.Boolean)">
            <summary>
            Deletes generated files older than <paramref name="MaxAge"/>.
            </summary>
            <param name="MaxAge">Age limit.</param>
            <param name="Reschedule">If rescheduling should be done.</param>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.SearchForInstallationFolder(System.String@,System.String@)">
            <summary>
            Searches for the installation folder on the local machine.
            </summary>
            <param name="JarPath">Path to PlantUML Jar file.</param>
            <param name="JavaPath">Path to Java VM.</param>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.Supports(System.String)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.Register(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Is called on the object when an instance of the element has been created in a document.
            </summary>
            <param name="Document">Document containing the instance.</param>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderMarkdown(Waher.Content.Markdown.Rendering.MarkdownRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Markdown for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderWpfXaml(Waher.Content.Markdown.Wpf.WpfXamlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates WPF XAML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderXamarinFormsXaml(Waher.Content.Markdown.Xamarin.XamarinFormsXamlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Xamarin.Forms XAML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderLatex(Waher.Content.Markdown.Latex.LatexRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates LaTeX for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.GenerateImage(System.String[],System.String,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates an image of the contents.
            </summary>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>Image, if successful, null otherwise.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.PlantUml.PlantUml.DefaultBgColor">
            <summary>
            Default Background color
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.PlantUml.PlantUml.DefaultFgColor">
            <summary>
            Default Foreground color
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.PlantUml.PlantUml.RenderContractXml(Waher.Content.Markdown.Contracts.ContractsRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates smart contract XML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
    </members>
</doc>
