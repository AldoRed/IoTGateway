<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Markdown.Web</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToHtmlConverter">
            <summary>
            Converts Markdown documents to HTML documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.#ctor">
            <summary>
            Converts Markdown documents to HTML documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.FromContentTypes">
            <summary>
            Converts content from these content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.BareJID">
            <summary>
            Bare JID used, if the HTTPX URI scheme is supported.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.RootFolder">
            <summary>
            Root folder used for web content.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.EmojiSource">
            <summary>
            Emoji source to use when converting Markdown documents to HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.ConvertAsync(Waher.Content.ConversionState)">
            <summary>
            Performs the actual conversion.
            </summary>
            <param name="State">State of the current conversion.</param>
            <returns>If the result is dynamic (true), or only depends on the source (false).</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToHtmlConverter.HtmlSettings">
            <summary>
            HTML settings for automatically converted content.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToSmartContractConverter">
            <summary>
            Converts Markdown documents to IEEE 1451.99 Smart Contract XML documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToSmartContractConverter.#ctor">
            <summary>
            Converts Markdown documents to IEEE 1451.99 Smart Contract XML documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToSmartContractConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToSmartContractConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToSmartContractConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToTextConverter">
            <summary>
            Converts Markdown documents to plain text documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToTextConverter.#ctor">
            <summary>
            Converts Markdown documents to plain text documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToTextConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToTextConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToTextConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToXamarinConverter">
            <summary>
            Converts Markdown documents to Xamarin Forms XML documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXamarinConverter.#ctor">
            <summary>
            Converts Markdown documents to Xamarin Forms XML documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXamarinConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXamarinConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXamarinConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToXamlConverter">
            <summary>
            Converts Markdown documents to XAML documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXamlConverter.#ctor">
            <summary>
            Converts Markdown documents to XAML documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXamlConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXamlConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXamlConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Web.MarkdownToXmlConverter">
            <summary>
            Converts Markdown documents to XML documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXmlConverter.#ctor">
            <summary>
            Converts Markdown documents to XML documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXmlConverter.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.MarkdownToXmlConverter.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.MarkdownToXmlConverter.DoConversion(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Performs the actual conversion
            </summary>
            <param name="Doc">Markdown document prepared for conversion.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Web.WebScript.WsCodec">
            <summary>
            Web Script encoder/decoder.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.AllowRawEncoding(System.Boolean,System.Boolean)">
            <summary>
            If raw encoding of web script should be allowed.
            </summary>
            <param name="Allow">If Raw encoding should be allowed.</param>
            <param name="Lock">If settings should be locked.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsCodec.IsRawEncodingAllowed">
            <summary>
            If Raw encoding is allowed. Can be changed calling <see cref="M:Waher.Content.Markdown.Web.WebScript.WsCodec.AllowRawEncoding(System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsCodec.IsRawEncodingAllowedLocked">
            <summary>
            If the <see cref="P:Waher.Content.Markdown.Web.WebScript.WsCodec.IsRawEncodingAllowed"/> setting is locked.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.#ctor">
            <summary>
            Web Script encoder/decoder.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Web.WebScript.WsCodec.ContentType">
            <summary>
            Markdown content type.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Web.WebScript.WsCodec.WsContentTypes">
            <summary>
            Plain text content types.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Web.WebScript.WsCodec.WsFileExtensions">
            <summary>
            Plain text file extensions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsCodec.ContentTypes">
            <summary>
            Supported content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsCodec.FileExtensions">
            <summary>
            Supported file extensions.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.Decodes(System.String,Waher.Runtime.Inventory.Grade@)">
            <summary>
            If the decoder decodes an object with a given content type.
            </summary>
            <param name="ContentType">Content type to decode.</param>
            <param name="Grade">How well the decoder decodes the object.</param>
            <returns>If the decoder can decode an object with the given type.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.DecodeAsync(System.String,System.Byte[],System.Text.Encoding,System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Uri)">
            <summary>
            Decodes an object.
            </summary>
            <param name="ContentType">Internet Content Type.</param>
            <param name="Data">Encoded object.</param>
            <param name="Encoding">Any encoding specified. Can be null if no encoding specified.</param>
            <param name="Fields">Any content-type related fields and their corresponding values.</param>
            <param name="BaseUri">Base URI, if any. If not available, value is null.</param>
            <returns>Decoded object.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be decoded.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.TryGetContentType(System.String,System.String@)">
            <summary>
            Tries to get the content type of an item, given its file extension.
            </summary>
            <param name="FileExtension">File extension.</param>
            <param name="ContentType">Content type.</param>
            <returns>If the extension was recognized.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.TryGetFileExtension(System.String,System.String@)">
            <summary>
            Tries to get the file extension of an item, given its Content-Type.
            </summary>
            <param name="ContentType">Content type.</param>
            <param name="FileExtension">File extension.</param>
            <returns>If the Content-Type was recognized.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.Encodes(System.Object,Waher.Runtime.Inventory.Grade@,System.String[])">
            <summary>
            If the encoder encodes a given object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Grade">How well the encoder encodes the object.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>If the encoder can encode the given object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsCodec.EncodeAsync(System.Object,System.Text.Encoding,System.String[])">
            <summary>
            Encodes an object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Encoding">Desired encoding of text. Can be null if no desired encoding is speified.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>Encoded object, as well as Content Type of encoding. Includes information about any text encodings used.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be encoded.</exception>
        </member>
        <member name="T:Waher.Content.Markdown.Web.WebScript.WsToX">
            <summary>
            Converts Web Script-files to desired output, by evaluating the web script and encoding the results in accordance with accept headers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsToX.#ctor">
            <summary>
            Converts Web Script-files to desired output, by evaluating the web script and encoding the results in accordance with accept headers.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsToX.FromContentTypes">
            <summary>
            Converts content from these content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsToX.ToContentTypes">
            <summary>
            Converts content to these content types. 
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Web.WebScript.WsToX.ConversionGrade">
            <summary>
            How well the content is converted.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Web.WebScript.WsToX.ConvertAsync(Waher.Content.ConversionState)">
            <summary>
            Performs the actual conversion.
            </summary>
            <param name="State">State of the current conversion.</param>
            <returns>If the result is dynamic (true), or only depends on the source (false).</returns>
        </member>
        <member name="T:Waher.Networking.HTTP.ScriptExtensions.Page">
            <summary>
            Page-local variables.
            </summary>
        </member>
        <member name="F:Waher.Networking.HTTP.ScriptExtensions.Page.VariableName">
            <summary>
            Page internal variable name.
            </summary>
        </member>
        <member name="F:Waher.Networking.HTTP.ScriptExtensions.Page.LastPageVariableName">
            <summary>
            Last Page internal variable name.
            </summary>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.#ctor">
            <summary>
            Page-local variables.
            </summary>
        </member>
        <member name="P:Waher.Networking.HTTP.ScriptExtensions.Page.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Networking.HTTP.ScriptExtensions.Page.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.GetPageVariables(Waher.Networking.HTTP.HttpRequest)">
            <summary>
            Gets the variable collection for the current page.
            </summary>
            <param name="Request">HTTP Request</param>
            <returns>Page variables.</returns>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.GetPageVariables(Waher.Script.Variables,System.String)">
            <summary>
            Gets the variable collection for the current page.
            </summary>
            <param name="Session">Session</param>
            <param name="Resource">Resource part of the URL of the page.</param>
            <returns>Page variables.</returns>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.Clear(Waher.Script.Variables)">
            <summary>
            Clears the current set of page variables.
            </summary>
            <param name="Session">Current session.</param>
        </member>
        <member name="M:Waher.Networking.HTTP.ScriptExtensions.Page.Remove(Waher.Script.Variables,System.String)">
            <summary>
            Removes a page variable from the session.
            </summary>
            <param name="Session">Current session.</param>
            <param name="PageVariableName">Page variable name to remove.</param>
            <returns>If such a page variable was found and removed.</returns>
        </member>
    </members>
</doc>
