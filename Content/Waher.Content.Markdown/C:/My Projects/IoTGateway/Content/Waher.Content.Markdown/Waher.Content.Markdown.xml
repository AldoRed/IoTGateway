<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Markdown</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Markdown.Functions.CssContent">
            <summary>
            Encapsulates css content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.CssContent.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Encapsulates css content.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.CssContent.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.CssContent.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.CssContent.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.FromMarkdown">
            <summary>
            Converts markdown to an element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.FromMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Converts markdown to an element.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.FromMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.FromMarkdown.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.FromMarkdown.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.FromMarkdown.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.FromMarkdown.Evaluate(System.String,Waher.Script.Model.ScriptNode)">
            <summary>
            Converts a Markdown string to a script element.
            </summary>
            <param name="Argument">Argument</param>
            <param name="Node">Optional script node.</param>
            <returns>Script element.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.FromMarkdown.Evaluate(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Converts a Markdown element to a script element.
            </summary>
            <param name="Element">Markdown element.</param>
            <returns>Script element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.InitScriptFile">
            <summary>
            Executes script from a file, if not executed before, or if file timestamp has changed.
            Corresponds to the INIT meta-data tag in Markdown.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.InitScriptFile.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes script from a file, if not executed before, or if file timestamp has changed.
            Corresponds to the INIT meta-data tag in Markdown.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.InitScriptFile.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.InitScriptFile.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.InitScriptFile.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.InitScriptFile.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.InitScriptFile.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.InitScriptFile.NeedsExecution(System.String)">
            <summary>
            Checks if an init-file needs to be executed.
            </summary>
            <param name="FileName">File name</param>
            <returns>If script file needs to be executed.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.JavaScriptContent">
            <summary>
            Encapsulates JavaScript content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.JavaScriptContent.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Encapsulates JavaScript content.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.JavaScriptContent.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.JavaScriptContent.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.JavaScriptContent.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.LoadMarkdown">
            <summary>
            LoadMarkdown(FileName[,Headers])
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LoadMarkdown(FileName[,Headers])
            </summary>
            <param name="FileName">File name.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LoadMarkdown(FileName[,Headers])
            </summary>
            <param name="FileName">File name.</param>
            <param name="Headers">If Markdown headers should be included.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.LoadMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.LoadMarkdown.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.LoadMarkdown.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownContent">
            <summary>
            Encapsulates markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownContent.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Encapsulates markdown content.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownContent.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownContent.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownContent.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownEncode">
            <summary>
            MarkdownEncode(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownEncode(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownEncode.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EscapeText(System.String)">
            <summary>
            Escapes text for inclusion in a Markdown document.
            </summary>
            <param name="PlainText">Text to include.</param>
            <returns>Escaped text.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownStatistics">
            <summary>
            MarkdownStatistics(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownStatistics.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownStatistics(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownStatistics.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownStatistics.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownStatistics.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownStatistics.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownToHtml">
            <summary>
            MarkdownToHtml(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtml.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownToHtml(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownToHtml.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownToHtml.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtml.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtml.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownToHtmlStat">
            <summary>
            MarkdownToHtmlStat(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtmlStat.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownToHtmlStat(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownToHtmlStat.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownToHtmlStat.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtmlStat.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtmlStat.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.ParseMarkdown">
            <summary>
            ParseMarkdown(Markdown)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ParseMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ParseMarkdown(Markdown)
            </summary>
            <param name="Markdown">Markdown.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ParseMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ParseMarkdown.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ParseMarkdown.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ParseMarkdown.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.PreprocessMarkdown">
            <summary>
            PreprocessMarkdown(Markdown)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.PreprocessMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            PreprocessMarkdown(Markdown)
            </summary>
            <param name="Markdown">Markdown.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.PreprocessMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.PreprocessMarkdown.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.PreprocessMarkdown.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.PreprocessMarkdown.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.ScriptFile">
            <summary>
            Executes script from a file.
            Corresponds to the SCRIPT meta-data tag in Markdown.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ScriptFile.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes script from a file, if not executed before, or if file timestamp has changed.
            Corresponds to the INIT meta-data tag in Markdown.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ScriptFile.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ScriptFile.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ScriptFile.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ScriptFile.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ScriptFile.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.TextUnit">
            <summary>
            Selects the singular or plural form of a unit to be used in text, based on the associated number.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.TextUnit.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Selects the singular or plural form of a unit to be used in text, based on the associated number.
            </summary>
            <param name="Number">Number</param>
            <param name="SingularUnit">Singular unit.</param>
            <param name="PluralUnit">Plural unit.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.TextUnit.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.TextUnit.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.TextUnit.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.ToMarkdown">
            <summary>
            Converts an element to a markdown string.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Converts an element to a markdown string.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.ToMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.Evaluate(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Converts an element to a markdown string.
            </summary>
            <param name="Argument">Element to convert to markdown.</param>
            <returns>Markdown representation of element.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.MatrixToMarkdown(Waher.Script.Abstraction.Elements.IMatrix)">
            <summary>
            Converts a matrix to Markdown.
            </summary>
            <param name="Matrix">Matrix</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.MatrixToMarkdown(Waher.Script.Abstraction.Elements.IMatrix,System.Text.StringBuilder)">
            <summary>
            Converts a matrix to Markdown.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="Markdown">Markdown output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.VectorToMarkdown(Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Converts a vector to Markdown.
            </summary>
            <param name="Vector">Vector</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.SetToMarkdown(Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Converts a set to Markdown.
            </summary>
            <param name="Set">Set</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.GraphToMarkdown(Waher.Script.Graphs.Graph)">
            <summary>
            Converts a graph to Markdown.
            </summary>
            <param name="Graph">Graph</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.GraphToMarkdown(Waher.Script.Graphs.Graph,System.Text.StringBuilder)">
            <summary>
            Converts a graph to Markdown.
            </summary>
            <param name="Graph">Graph</param>
            <param name="Markdown">Markdown output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.PixelsToMarkdown(Waher.Script.Graphs.PixelInformation)">
            <summary>
            Converts pixels to Markdown.
            </summary>
            <param name="Pixels">Pixels</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.PixelsToMarkdown(Waher.Script.Graphs.PixelInformation,System.Text.StringBuilder)">
            <summary>
            Converts pixels to Markdown.
            </summary>
            <param name="Pixels">Pixels</param>
            <param name="Markdown">Markdown output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.ImageToMarkdown(SkiaSharp.SKImage)">
            <summary>
            Converts an image to Markdown.
            </summary>
            <param name="Image">Image</param>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.ToMarkdown.ImageToMarkdown(SkiaSharp.SKImage,System.Text.StringBuilder)">
            <summary>
            Converts an image to Markdown.
            </summary>
            <param name="Image">Image</param>
            <param name="Markdown">Markdown output.</param>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownOutputType">
            <summary>
            Markdown output type.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.PlainText">
            <summary>
            Plaint text
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.Markdown">
            <summary>
            Markdown
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.Xaml">
            <summary>
            XAML (WPF version)
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.XamarinForms">
            <summary>
            XAML (Xamarin.Forms version)
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.SmartContract">
            <summary>
            Smart Contract XML
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.Latex">
            <summary>
            LaTeX
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownOutputType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.IMarkdownAsynchronousOutput">
            <summary>
            Interface for classes that help output asynchronous markdown output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.IMarkdownAsynchronousOutput.GenerateStub(Waher.Content.Markdown.MarkdownOutputType,System.Text.StringBuilder,System.String)">
            <summary>
            Generates a stub in the output, that will be filled with the asynchronously generated
            content, once it is reported.
            </summary>
            <param name="Type">Output type.</param>
            <param name="Output">Output being generated.</param>
            <param name="Title">Title of content.</param>
            <returns>ID to report back, when content is completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.IMarkdownAsynchronousOutput.ReportResult(Waher.Content.Markdown.MarkdownOutputType,System.String,System.String)">
            <summary>
            Method called when asynchronous result has been generated in a Markdown document.
            </summary>
            <param name="Type">Output type.</param>
            <param name="Id">ID of generated content.</param>
            <param name="Result">Generated content.</param>
        </member>
        <member name="M:Waher.Content.Markdown.IMarkdownAsynchronousOutput.ReportResult(Waher.Content.Markdown.MarkdownOutputType,System.String,System.String,System.Boolean)">
            <summary>
            Method called when asynchronous result has been generated in a Markdown document.
            </summary>
            <param name="Type">Output type.</param>
            <param name="Id">ID of generated content.</param>
            <param name="Result">Generated content.</param>
            <param name="More">If more information will be sent in another call.</param>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownCodec">
            <summary>
            Markdown encoder.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.AllowRawEncoding(System.Boolean,System.Boolean)">
            <summary>
            If raw encoding of web script should be allowed.
            </summary>
            <param name="Allow">If Raw encoding should be allowed.</param>
            <param name="Lock">If settings should be locked.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.IsRawEncodingAllowed">
            <summary>
            If Raw encoding is allowed. Can be changed calling <see cref="M:Waher.Content.Markdown.MarkdownCodec.AllowRawEncoding(System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.IsRawEncodingAllowedLocked">
            <summary>
            If the <see cref="P:Waher.Content.Markdown.MarkdownCodec.IsRawEncodingAllowed"/> setting is locked.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.#ctor">
            <summary>
            Markdown encoder/decoder.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownCodec.ContentType">
            <summary>
            Markdown content type.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.ContentTypes">
            <summary>
            Supported content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.FileExtensions">
            <summary>
            Supported file extensions.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Decodes(System.String,Waher.Runtime.Inventory.Grade@)">
            <summary>
            If the decoder decodes an object with a given content type.
            </summary>
            <param name="ContentType">Content type to decode.</param>
            <param name="Grade">How well the decoder decodes the object.</param>
            <returns>If the decoder can decode an object with the given type.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.DecodeAsync(System.String,System.Byte[],System.Text.Encoding,System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Uri)">
            <summary>
            Decodes an object.
            </summary>
            <param name="ContentType">Internet Content Type.</param>
            <param name="Data">Encoded object.</param>
            <param name="Encoding">Any encoding specified. Can be null if no encoding specified.</param>
            <param name="Fields">Any content-type related fields and their corresponding values.</param>
            <param name="BaseUri">Base URI, if any. If not available, value is null.</param>
            <returns>Decoded object.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be decoded.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Encodes(System.Object,Waher.Runtime.Inventory.Grade@,System.String[])">
            <summary>
            If the encoder encodes a given object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Grade">How well the encoder encodes the object.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>If the encoder can encode the given object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.EncodeAsync(System.Object,System.Text.Encoding,System.String[])">
            <summary>
            Encodes an object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Encoding">Desired encoding of text. Can be null if no desired encoding is speified.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>Encoded object, as well as Content Type of encoding. Includes information about any text encodings used.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be encoded.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.TryGetContentType(System.String,System.String@)">
            <summary>
            Tries to get the content type of an item, given its file extension.
            </summary>
            <param name="FileExtension">File extension.</param>
            <param name="ContentType">Content type.</param>
            <returns>If the extension was recognized.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.TryGetFileExtension(System.String,System.String@)">
            <summary>
            Tries to get the file extension of an item, given its Content-Type.
            </summary>
            <param name="ContentType">Content type.</param>
            <param name="FileExtension">File extension.</param>
            <returns>If the Content-Type was recognized.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownContent">
            <summary>
            Class that can be used to encapsulate Markdown to be returned from a Web Service, bypassing any encoding protections,
            and avoiding doubly parsing the Markdown.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownContent.#ctor(System.String)">
            <summary>
            Class that can be used to encapsulate Markdown to be returned from a Web Service, bypassing any encoding protections,
            and avoiding doubly parsing the Markdown.
            </summary>
            <param name="Markdown">Markdown content to return.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownContent.Markdown">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownContent.CanEncodeJson">
            <summary>
            To what extent the object supports JSON encoding.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownElementHandler">
            <summary>
            Delegate for markdown element callback methods.
            </summary>
            <param name="Element">Markdown element</param>
            <param name="State">State object.</param>
            <returns>If process should continue.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.AsyncMarkdownProcessing">
            <summary>
            Delegate used for callback methods performing asynchronous Markdown processing
            </summary>
            <param name="State">State object.</param>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownDocument">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            See the markdown reference documentation provided with the library for more information.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.CreateAsync(System.String,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.CreateAsync(System.String,Waher.Content.Markdown.MarkdownSettings,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="Settings">Parser settings.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.CreateAsync(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.String,System.String,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="Settings">Parser settings.</param>
            <param name="FileName">If the content is coming from a file, this parameter contains the name of that file. 
            Otherwise, the parameter is the empty string.</param>
            <param name="ResourceName">Local resource name of file, if accessed from a web server.</param>
            <param name="URL">Full URL of resource hosting the content, if accessed from a web server.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.MarkdownText">
            <summary>
            Markdown text. This text might differ slightly from the original text passed to the document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.TransparentExceptionTypes">
            <summary>
            If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.HeaderEndPosition(System.String)">
            <summary>
            Gets the end position of the header, if one is found, null otherwise.
            </summary>
            <param name="Markdown">Markdown</param>
            <returns>Position of end of header, if found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="FileName">Filename of markdown.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown, and if the markdown contains script, making the markdown dynamic.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.Boolean,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="FileName">Filename of markdown.</param>
            <param name="FromScript">If call is made from script. If true, method will assumed the variables collection is properly
            locked from the caller of the original script.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown, and if the markdown contains script, making the markdown dynamic.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.RenderDocument(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the document using provided output format.
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ClearFootnoteReferences">
            <summary>
            Clears any footnote references.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.FootnoteOrder">
            <summary>
            Order of footnotes.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.NeedsToDisplayFootnotes">
            <summary>
            If referenced footnotes need to be rendered.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.CheckURL(System.String,System.String)">
            <summary>
            Checks the URL if it needs redirection to a proxy.
            </summary>
            <param name="Url">URL to check.</param>
            <param name="URL">URL of the document. If null, or empty, relative URLs can be returned. If not null or empty,
            all URLs returned will be absolute.</param>
            <returns>URL to use in clients.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateMarkdown">
            <summary>
            Generates Markdown from the markdown text.
            </summary>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown from the markdown text.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <returns>HTML</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML(Waher.Content.Markdown.Rendering.HtmlSettings)">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <param name="HtmlSettings">HTML-specific settings.</param>
            <returns>HTML</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Rendering.HtmlSettings)">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="HtmlSettings">HTML-specific settings.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GeneratePlainText">
            <summary>
            Generates Plain Text from the markdown text.
            </summary>
            <returns>Plain Text</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates Plain Text from the markdown text.
            </summary>
            <param name="Output">Plain Text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetReference(System.String)">
            <summary>
            Gets the multimedia information referenced by a label.
            </summary>
            <param name="Label">Label</param>
            <returns>Multimedia information if found, null otherwise.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Headers">
            <summary>
            Headers in document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetMetaData(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Boolean}[]@)">
            <summary>
            Tries to get a meta-data value given its key.
            </summary>
            <param name="Key">Meta-data value.</param>
            <param name="Value">(Value,linebreak)-pairs corresponding to the key, if found, null otherwise.</param>
            <returns>If the meta-data key was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.AddMetaData(System.String,System.String)">
            <summary>
            Adds meta-data to the document.
            </summary>
            <param name="Key">Key name</param>
            <param name="Value">Meta-data value.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetMetaData(System.String)">
            <summary>
            Gets the meta-data values given a meta-data key. If meta-data is not found, an empty array is returned.
            </summary>
            <param name="Key">Meta-data key.</param>
            <returns>Values for the given key, or an empty array if the key was not found.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.MetaDataKeys">
            <summary>
            Meta-data keys availale in document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.MetaData">
            <summary>
            Meta-data
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.References">
            <summary>
            Multimedia references
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Author">
            <summary>
            Author(s) of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Copyright">
            <summary>
            Link to copyright statement.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Previous">
            <summary>
            Link to previous document, in a paginated set of documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Next">
            <summary>
            Link to next document, in a paginated set of documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.CSS">
            <summary>
            Link(s) to Cascading Style Sheet(s) that should be used for visual formatting of the generated HTML page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.JavaScript">
            <summary>
            Link(s) to JavaScript files(s) that should be includedin the generated HTML page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Script">
            <summary>
            Links to server-side script files that should be included before processing the page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.InitializationScript">
            <summary>
            Links to server-side script files that should be executed before before processing the page.
            Initialization script are only executed once. To execute init script again, a new version
            (timestamp) of the file must be present.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Parameters">
            <summary>
            Name of a query parameter recognized by the page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Date">
            <summary>
            (Publication) date of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Description">
            <summary>
            Description of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Image">
            <summary>
            Link to image for page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Keywords">
            <summary>
            Keywords.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Subtitle">
            <summary>
            Subtitle of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Title">
            <summary>
            Title of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Web">
            <summary>
            Link to web page
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Refresh">
            <summary>
            Tells the browser to refresh the page after a given number of seconds.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.UserVariable">
            <summary>
            Name of the variable that will hold a reference to the IUser interface for the currently logged in user.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Login">
            <summary>
            Link to a login page. This page will be shown if the user variable does not contain a user.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Privileges">
            <summary>
            Requered user privileges to display page.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetFootnoteNumber(System.String,System.Int32@)">
            <summary>
            Tries to get the number of a footnote, given its key.
            </summary>
            <param name="Key">Footnote key.</param>
            <param name="Number">Footnote number.</param>
            <returns>If a footnote with the given key was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetFootnote(System.String,Waher.Content.Markdown.Model.BlockElements.Footnote@)">
            <summary>
            Tries to get a footnote, given its key.
            </summary>
            <param name="Key">Footnote key.</param>
            <param name="Footnote">Footnote.</param>
            <returns>If a footnote with the given key was found.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Footnotes">
            <summary>
            Gets the keys of the footnotes in the order that they are referenced in the document. Footnotes that are not actually
            used in the document are omitted.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.EmojiSource">
            <summary>
            Source for emojis in the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Encode(System.String)">
            <summary>
            Encodes all special characters in a string so that it can be included in a markdown document without affecting the markdown.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.SyntaxHighlighting">
            <summary>
            If syntax highlighting is used in the document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.FileName">
            <summary>
            Filename of Markdown document. Markdown inclusion will be made relative to this filename.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.ResourceName">
            <summary>
            Local resource name of Markdown document, if referenced through a web server. Master documents use this resource name to match
            detail content with menu links.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.URL">
            <summary>
            Absolute URL of Markdown document, if referenced through a web server.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Master">
            <summary>
            Master document responsible for the current document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Detail">
            <summary>
            Detail document of a master document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Settings">
            <summary>
            Markdown settings.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.IncludesTableOfContents">
            <summary>
            If the document contains a Table of Contents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.IsDynamic">
            <summary>
            If the contents of the document is dynamic (i.e. includes script), or not (i.e. is static).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Tag">
            <summary>
            Property can be used to tag document with client-specific information.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.AllowScriptTag">
            <summary>
            If client-side script tags are allowed in the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all elements in the document.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindLinks">
            <summary>
            Finds all links in the document.
            </summary>
            <returns>Array of links found in the document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindLinks(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds all links in the document.
            </summary>
            <param name="IncludeAutomaticLinks">If automatic links are to be included. (Default=true)</param>
            <param name="IncludeLinks">If normal links are to be included. (Default=true)</param>
            <param name="IncludeMultimedia">If Multimedia links are to be included. (Default=true)</param>
            <returns>Array of links found in the document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindHashTags">
            <summary>
            Finds hashtags in the document.
            </summary>
            <returns>Array of hashtags found in the document.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Elements">
            <summary>
            Markdown elements making up the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetEnumerator">
            <summary>
            Gets an enumerator of root markdown elements in the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Calculates the difference of two Markdown documents.
            </summary>
            <param name="Old">Old version of the document.</param>
            <param name="New">New version of the document.</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <returns>Difference document</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(System.String,System.String,Waher.Content.Markdown.MarkdownSettings,System.Boolean,System.Type[])">
            <summary>
            Calculates the difference of two Markdown documents.
            </summary>
            <param name="Old">Old version of the document.</param>
            <param name="New">New version of the document.</param>
            <param name="Settings">Markdown settings.</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Difference document</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Calculates the difference of the current Markdown document, and a previous version of the Markdown document.
            </summary>
            <param name="Previous">Previous version</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <returns>Difference document</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.QueueAsyncTask(Waher.Content.Markdown.AsyncMarkdownProcessing,System.Object)">
            <summary>
            Queues an asynchronous task to be executed. Asynchronous tasks will be executed after the main document
            has been generated.
            </summary>
            <param name="Callback">Callback method.</param>
            <param name="State">State object.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.AsyncTasks">
            <summary>
            Enumerable set of asynchronous tasks that have been registered.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ProcessAsyncTasks">
            <summary>
            Processes any registered asynchronous tasks. This method is normally only called from renderers of documents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TransformXml(System.Xml.XmlDocument,Waher.Script.Variables)">
            <summary>
            Transforms XML to an object that is easier to visualize.
            </summary>
            <param name="Xml">XML Document.</param>
            <param name="Variables">Current variables.</param>
            <returns>Transformed object (possibly the same if no XML Visualizer found).</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetStatistics">
            <summary>
            Returns some basic statistics about the contents of the Markdown object.
            </summary>
            <returns>Markdown statistics.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.AppendRows(System.String[])">
            <summary>
            Appends a set of rows into a single string with newlines between rows.
            </summary>
            <param name="Rows">Rows</param>
            <returns>Appended rows.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.AppendRows(System.String[],System.Boolean)">
            <summary>
            Appends a set of rows into a single string with newlines between rows.
            </summary>
            <param name="Rows">Rows</param>
            <param name="SingleRow">If rows should be concatenated into a single row.</param>
            <returns>Appended rows.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.CanEncodeJson">
            <summary>
            To what extent the object supports JSON encoding.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.AuthorizeExpression">
            <summary>
            Delegate for expression authorization methods.
            </summary>
            <param name="Expression">Expression to be authorized.</param>
            <returns>If the expression is authorized to execute, null is returned. If it is prohibited, 
            <see cref="T:Waher.Script.Model.ScriptNode"/> that is prohibited is returned.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownSettings">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource,System.Boolean)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
            <param name="ParseMetaData">If meta-data should be parsed or not. By default, this value is true, if no emoji source is provided, 
            and false, if an emoji source is not provided.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource,System.Boolean,Waher.Script.Variables)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
            <param name="ParseMetaData">If meta-data should be parsed or not. By default, this value is true, if no emoji source is provided, 
            and false, if an emoji source is not provided.</param>
            <param name="Variables">Collection of variables. Providing such a collection enables script execution inside markdown
            documents.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.EmojiSource">
            <summary>
            Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.ParseMetaData">
            <summary>
            If meta-data should be parsed or not.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.Variables">
            <summary>
            Collection of variables. Providing such a collection enables script execution inside markdown documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.HttpxProxy">
            <summary>
            Modifies URLS using the HTTPX URI scheme, so that they point to an HTTPX proxy. The string %URL% is replaced with
            the original URL string.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.LocalHttpxResourcePath">
            <summary>
            Local HTTPX Resource Path. HTTPX URLs starting with this string (if defined) will be considered local web resources.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AudioAutoplay">
            <summary>
            If audio is to be played automatically. Default=true.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AudioControls">
            <summary>
            If audio should be played with controls or not. Default=false.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.VideoAutoplay">
            <summary>
            If video is to be played automatically. Default=false.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.VideoControls">
            <summary>
            If video should be played with controls or not. Default=true.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.EmbedEmojis">
            <summary>
            If emojis should be embedded using the data URI scheme.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.RootFolder">
            <summary>
            File system root folder. If file references are absolute, and this property is provided, they are measured relative to this folder.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AllowScriptTag">
            <summary>
            If the HTML SCRIPT tag should be allowed or not.s
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AuthorizeExpression">
            <summary>
            Optional method to call to authorize execution of script expressions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.ResourceMap">
            <summary>
            Optional resource map to apply to resources referred to in document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.GetFileName(System.String,System.String)">
            <summary>
            Evaluates a file name from a file reference.
            </summary>
            <param name="DocumentFileName">Filename of original markdown document.</param>
            <param name="FileNameReference">Filename reference.</param>
            <returns>Physical filename.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownStatistics">
            <summary>
            Contains some basic statistical information about a Markdown document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrElements">
            <summary>
            Number of elements in Markdown document (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrAbbreviations">
            <summary>
            Number of abbreviations.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMailHyperLinks">
            <summary>
            Number of mail hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrUrlHyperLinks">
            <summary>
            Number of URL hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHyperLinks">
            <summary>
            Number of hyperlinks (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.IntMailHyperlinks">
            <summary>
            Internal (during computation of statistics) Mail hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.IntUrlHyperlinks">
            <summary>
            Internal (during computation of statistics) URL hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.MailHyperlinks">
            <summary>
            Mail hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.UrlHyperlinks">
            <summary>
            URL hyperlinks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrDelete">
            <summary>
            Number of deletes (span+block).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrDetailsReference">
            <summary>
            Number of details references.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrEmojiReference">
            <summary>
            Number of emoji references.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrEmphasize">
            <summary>
            Number of emphasizes.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrFootnoteReference">
            <summary>
            Number of footnote references
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHashTags">
            <summary>
            Number of hash-tags.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHtmlEntities">
            <summary>
            Number of HTML entities.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHtmlUnicodeEntities">
            <summary>
            Number of unicode HTML entities.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHtmlEntitiesTotal">
            <summary>
            Number of HTML entities (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInlineCode">
            <summary>
            Number of code inlines.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInlineHtml">
            <summary>
            Number of HTML inlines.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInlineScript">
            <summary>
            Number of script inlines.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInlineText">
            <summary>
            Number of text inlines.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInsert">
            <summary>
            Number of insert (span+block).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrLineBreak">
            <summary>
            Number of line breaks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMetaReference">
            <summary>
            Number of meta references.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMultimedia">
            <summary>
            Number of multimedia (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMultiformatMultimedia">
            <summary>
            Number of multi-formatted multimedia.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.IntMultimediaPerExtension">
            <summary>
            Internal (during computation of statistics) Multimedia links, per file extension.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.IntMultimediaPerContentType">
            <summary>
            Internal (during computation of statistics) Multimedia links, per Content-Type
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.IntMultimediaPerContentCategory">
            <summary>
            Internal (during computation of statistics) Multimedia links, per Content Category (top part of Content-Type)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.MultimediaPerExtension">
            <summary>
            Multimedia links, per file extension.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.MultimediaPerContentType">
            <summary>
            Multimedia links, per Content-Type
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.MultimediaPerContentCategory">
            <summary>
            Multimedia links, per Content Category (top part of Content-Type)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMultimediaPerExtension">
            <summary>
            Number of multimedia, per file extension.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMultimediaPerContentType">
            <summary>
            Number of multimedia, per Content-Type
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMultimediaPerContentCategory">
            <summary>
            Number of multimedia, per Content Category (top part of Content-Type)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrStrikeThrough">
            <summary>
            Number of strike throughs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrStrong">
            <summary>
            Number of strong.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrSubscript">
            <summary>
            Number of subscripts.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrSuperScript">
            <summary>
            Number of superscripts.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrUnderline">
            <summary>
            Number of underlines.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrBlockQuotes">
            <summary>
            Number of block quotes.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrBulletLists">
            <summary>
            Number of bullet lists.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrCodeBlocks">
            <summary>
            Number of code blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrComments">
            <summary>
            Number of comments.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrDefinitionDescriptions">
            <summary>
            Number of definition descriptions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrDefinitionLists">
            <summary>
            Number of definition lists.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrDefinitionTerms">
            <summary>
            Number of definition terms.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrFootnotes">
            <summary>
            Number of footnotes.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHeaders">
            <summary>
            Number of headers.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHorizontalRules">
            <summary>
            Number of horizontal rules.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrHtmlBlocks">
            <summary>
            Number of HTML blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrInvisibleBreaks">
            <summary>
            Number of invisible breaks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrNumberedItems">
            <summary>
            Number of numbered items.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrNumberedLists">
            <summary>
            Number of numbered lists.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrParagraph">
            <summary>
            Number of paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrSections">
            <summary>
            Number of sections.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrSectionSeparators">
            <summary>
            Number of section separators.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrTables">
            <summary>
            Number of tables.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrTaskItems">
            <summary>
            Number of task items.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrTaskLists">
            <summary>
            Number of task lists.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrUnnumberedItems">
            <summary>
            Number of unnumbered items.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrListItems">
            <summary>
            Number of list items (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrLists">
            <summary>
            Number of lists (total).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrNestedBlocks">
            <summary>
            Number of nested blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrCenterAlignedBlocks">
            <summary>
            Number of center-aligned blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrLeftAlignedBlocks">
            <summary>
            Number of left-aligned blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrRightAlignedBlocks">
            <summary>
            Number of right-aligned blocks.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownStatistics.NrMarginAlignedBlocks">
            <summary>
            Number of margin-aligned blocks.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.Atom">
            <summary>
            Represents an atom of editable text (i.e. typed character).
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.IEditableText,System.Char)">
            <summary>
            Represents an atom of editable text (i.e. typed character).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.Charater">
            <summary>
            Character
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineCodeCharacter">
            <summary>
            Represents a character in inline code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineCodeCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineCode,System.Char)">
            <summary>
            Represents a character in inline code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineCodeCharacter.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineHtmlCharacter">
            <summary>
            Represents a character in inline HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineHtmlCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineHTML,System.Char)">
            <summary>
            Represents a character in inline HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineHtmlCharacter.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineTextCharacter">
            <summary>
            Represents a character in inline text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineTextCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineText,System.Char)">
            <summary>
            Represents a character in inline text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineTextCharacter.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElement">
            <summary>
            Abstract base class for block elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElement.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for block elements.
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElement.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren">
            <summary>
            Abstract base class for block elements with children.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Abstract base class for block elements with children.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Abstract base class for block elements with children.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild">
            <summary>
            Abstract base class for block elements with one child.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Abstract base class for block elements with one child.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockQuote">
            <summary>
            Represents a block quote in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a block quote in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockQuote.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BulletList">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BulletList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.CenterAligned">
            <summary>
            Represents a center-aligned set of blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CenterAligned.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a center-aligned set of blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CenterAligned.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CenterAligned.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CenterAligned.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CenterAligned.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.CodeBlock">
            <summary>
            Represents a code block in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents a code block in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Rows">Rows</param>
            <param name="Start">Start index of code.</param>
            <param name="End">End index of code.</param>
            <param name="Indent">Additional indenting.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Represents a code block in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Rows">Rows</param>
            <param name="Start">Start index of code.</param>
            <param name="End">End index of code.</param>
            <param name="Indent">Additional indenting.</param>
            <param name="Language">Language used.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Rows">
            <summary>
            Rows in code block
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.CodeContentHandler``1">
            <summary>
            Multimedia handler.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Indent">
            <summary>
            Code block indentation.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.IndentString">
            <summary>
            String used for indentation.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Start">
            <summary>
            Start row index
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.End">
            <summary>
            End row index.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.CommentBlock">
            <summary>
            Represents a comment block in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String[])">
            <summary>
            Represents a comment block in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Rows">Rows</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CommentBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CommentBlock.Rows">
            <summary>
            Comment rows
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CommentBlock.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions">
            <summary>
            Definition descriptions
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Definition descriptions
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Descriptions">Descriptions</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Definition descriptions
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Descriptions">Descriptions</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionList">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.JoinOverParagraphs">
            <summary>
            If elements of this type should be joined over paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.AddChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms">
            <summary>
            Definition terms
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Definition terms
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Terms">Terms</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Definition terms
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Terms">Terms</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Footnote">
            <summary>
            Footnote
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.Key">
            <summary>
            Footnote key
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.Referenced">
            <summary>
            If the Footnote has been referenced during rendering, and therefore needs
            to be shown at the end of the rendering process.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.TableCellContents">
            <summary>
            If the Footnote defines a table cell.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.BacklinkAdded">
            <summary>
            If a backlink has been added to the footnote.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Header">
            <summary>
            Represents a header in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.Boolean,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a header in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Level">Header level.</param>
            <param name="Prefix">If header was defined with a prefix (true) or with an underline (false).</param>
            <param name="Row">Header definition.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Level">
            <summary>
            Header level.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Prefix">
            <summary>
            If header is defined using a prefix.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Row">
            <summary>
            Row definition
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Id">
            <summary>
            ID of header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.HorizontalRule">
            <summary>
            Horizontal rule
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Horizontal rule
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.Row">
            <summary>
            Original Row generating the horizontal rule.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.HtmlBlock">
            <summary>
            Represents a block of HTML in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a block of HTML in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.InsertBlocks">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak">
            <summary>
            Invisible break
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Invisible break
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.Row">
            <summary>
            Original row
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.LeftAligned">
            <summary>
            Represents a left-aligned set of blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.LeftAligned.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a left-aligned set of blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.LeftAligned.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.LeftAligned.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.LeftAligned.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.LeftAligned.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.MarginAligned">
            <summary>
            Represents a margin-aligned set of blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.MarginAligned.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a margin-aligned set of blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.MarginAligned.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.MarginAligned.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.MarginAligned.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.MarginAligned.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NestedBlock">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NestedBlock.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NestedBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NumberedItem">
            <summary>
            Represents a numbered item in an ordered list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.Boolean,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents a numbered item in an ordered list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Number">Number associated with item.</param>
            <param name="NumberExplicit">If number is provided explicitly</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Number">
            <summary>
            Number associated with item.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedItem.NumberExplicit">
            <summary>
            If number is explicitly provided (true) or inferred (false).
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NumberedList">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.AddChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Paragraph">
            <summary>
            Represents a paragraph in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a paragraph in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean)">
            <summary>
            Represents a paragraph in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
            <param name="Implicit">If paragraph is implicit or not.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Paragraph.Implicit">
            <summary>
            If paragraph is implicit or not.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Paragraph.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.RightAligned">
            <summary>
            Represents a right-aligned set of blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.RightAligned.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a right-aligned set of blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.RightAligned.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.RightAligned.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.RightAligned.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.RightAligned.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Sections">
            <summary>
            Represents a sequence of sections.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a sequence of sections.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="InitialNrColumns">Number of columns in first section.</param>
            <param name="InitialRow">Initial section separator row, if provided, null otherwise.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Sections.InitialNrColumns">
            <summary>
            Number of columns for initial section.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Sections.InitialRow">
            <summary>
            Initial row
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Sections.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.SectionSeparator">
            <summary>
            Section Separator
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.Int32,System.String)">
            <summary>
            Section Separator
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="SectionNr">Section number</param>
            <param name="NrColumns">Number of columns in following section.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.SectionNr">
            <summary>
            Section number.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.NrColumns">
            <summary>
            Number of columns in following section.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.Row">
            <summary>
            Original row
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Table">
            <summary>
            Represents a table in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,Waher.Content.Markdown.Model.MarkdownElement[][],Waher.Content.Markdown.Model.MarkdownElement[][],Waher.Content.Markdown.Model.TextAlignment[],System.String[],System.String,System.String)">
            <summary>
            Represents a table in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Columns">Columns in table.</param>
            <param name="Headers">Header rows.</param>
            <param name="Rows">Data rows.</param>
            <param name="Alignments">Column alignments.</param>
            <param name="AlignmentDefinitions">How the alignments where defined.</param>
            <param name="Caption">Table caption.</param>
            <param name="Id">Table ID.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Headers">
            <summary>
            Headers in table.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Rows">
            <summary>
            Rows in table.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Alignments">
            <summary>
            Table cell alignments.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.AlignmentDefinitions">
            <summary>
            Originbal Table cell alignment definitions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Caption">
            <summary>
            Table caption.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Id">
            <summary>
            ID of table.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Children">
            <summary>
            Any children of the element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.TaskItem">
            <summary>
            Represents a task item in a task list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Boolean,System.Int32,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents a task item in a task list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="IsChecked">If the item is checked or not.</param>
            <param name="CheckPosition">Position of the checkmark in the original markdown text document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.IsChecked">
            <summary>
            If the item is checked or not.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.CheckPosition">
            <summary>
            Position of the checkmark in the original markdown text document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.TaskList">
            <summary>
            Represents a task list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a task list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a task list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem">
            <summary>
            Represents an unnumbered item in an ordered list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents an unnumbered item in an ordered list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Prefix">Prefix, in plain text mode.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Prefix">
            <summary>
            Prefix, in plain text mode.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.CodeContent.GraphContent">
            <summary>
            Script graph content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.GraphContent.#ctor">
            <summary>
            Script graph content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.GraphContent.Supports(System.String)">
            <summary>
            Checks how well the handler supports code content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.GraphContent.Register(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Is called on the object when an instance of the element has been created in a document.
            </summary>
            <param name="Document">Document containing the instance.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.GraphContent.GenerateImage(System.String[],System.String,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates an image of the contents.
            </summary>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>Image, if successful, null otherwise.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.GraphContent.GetGraph(System.String[])">
            <summary>
            Gets a graph object from its XML Code Block representation.
            </summary>
            <param name="Rows">Rows</param>
            <returns>Graph object</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.CodeContent.ImageContent">
            <summary>
            Base64-encoded image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.#ctor">
            <summary>
            Base64-encoded image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.Supports(System.String)">
            <summary>
            Checks how well the handler supports code content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.Register(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Is called on the object when an instance of the element has been created in a document.
            </summary>
            <param name="Document">Document containing the instance.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GenerateMarkdownFromFile(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Generates Markdown embedding an image available in a file.
            </summary>
            <param name="Output">Markdown output.</param>
            <param name="FileName">Image file name.</param>
            <param name="Title">Optional title.</param>
            <returns>If Markdown could be generated.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GenerateMarkdown(System.Text.StringBuilder,System.Byte[],System.String,System.String)">
            <summary>
            Generates Markdown embedding an encoded image.
            </summary>
            <param name="Output">Markdown output.</param>
            <param name="Bin">Binary encoding of image.</param>
            <param name="ContentType">Content-Type of image.</param>
            <param name="Title">Optional title.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GenerateUrl(System.String,System.String[],System.String@,System.String@)">
            <summary>
            Generates a data URL of an encoded image.
            </summary>
            <param name="Language">Language</param>
            <param name="Rows">Rows</param>
            <param name="ContentType">Content-Type of image.</param>
            <param name="Title">Optional associated title.</param>
            <returns>Data URL.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GenerateUrl(System.Byte[],System.String)">
            <summary>
            Generates a data URL of an encoded image.
            </summary>
            <param name="Binary">Binary representation of image.</param>
            <param name="ContentType">Content-Type of image.</param>
            <returns>Data URL.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GetImageBase64(System.String[])">
            <summary>
            Gets the binary image from the encoded rows.
            </summary>
            <param name="Rows">Rows</param>
            <returns>Base64-encoded image.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.CodeContent.ImageContent.GenerateImage(System.String[],System.String,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates an image of the contents.
            </summary>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>Image, if successful, null otherwise.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.ICodeContent">
            <summary>
            Interface for all markdown handlers of code content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.Supports(System.String)">
            <summary>
            Checks how well the handler supports code content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.Register(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Is called on the object when an instance of the element has been created in a document.
            </summary>
            <param name="Document">Document containing the instance.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IEditableText">
            <summary>
            Interface for elements containing editable text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IEditableText.Atomize">
            <summary>
            Return an enumeration of the editable text as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IEditableText.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IImageCodeContent">
            <summary>
            Interface for all markdown handlers of code content that generates an image output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IImageCodeContent.GenerateImage(System.String[],System.String,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates an image of the contents.
            </summary>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>Image, if successful, null otherwise.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IMultimediaContent">
            <summary>
            Interface for all markdown handlers of multimedia content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IXmlVisualizer">
            <summary>
            Interface for all XML visalizers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IXmlVisualizer.Supports(System.Xml.XmlDocument)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Xml">XML Document</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IXmlVisualizer.TransformXml(System.Xml.XmlDocument,Waher.Script.Variables)">
            <summary>
            Transforms the XML document before visualizing it.
            </summary>
            <param name="Xml">XML Document.</param>
            <param name="Variables">Current variables.</param>
            <returns>Transformed object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BaselineAlignment">
            <summary>
            Where baselign of horizontally organized elements are rendered.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.BaselineAlignment.Center">
            <summary>
            Center-aligned
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.BaselineAlignment.Baseline">
            <summary>
            Aligned along base-line
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElement">
            <summary>
            Abstract base class for all markdown elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for all markdown elements.
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.Document">
            <summary>
            Markdown document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.Children">
            <summary>
            Any children of the element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.BaselineAlignment">
            <summary>
            Baseline alignment
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.AreEqual(System.Array,System.Array)">
            <summary>
            Checks if two typed arrays are equal
            </summary>
            <param name="Items1">First array</param>
            <param name="Items2">Second array</param>
            <returns>If arrays are equal</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GetHashCode(System.Array)">
            <summary>
            Calculates a hash value on an array.
            </summary>
            <param name="Items">Array</param>
            <returns>Hash Code</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElementChildren">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.AddChildren(Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.AddChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.FirstChild">
            <summary>
            First child, or null if none.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.LastChild">
            <summary>
            Last child, or null if none.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.HasOneChild">
            <summary>
            If the element has only one child.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.Children">
            <summary>
            Any children of the element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.SetChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Sets the children of the node.
            </summary>
            <param name="Children">Children to set.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.JoinOverParagraphs">
            <summary>
            If elements of this type should be joined over paragraphs.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElementSingleChild">
            <summary>
            Abstract base class for all markdown elements with one child element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Abstract base class for all markdown elements with one child element.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Child">
            <summary>
            Child element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Children">
            <summary>
            Any children of the element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.AudioContent">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.#ctor">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.ImageContent">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.#ctor">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.CheckDataUri(Waher.Content.Emoji.IImageSource)">
            <summary>
            Checks a Data URI image, that it contains a decodable image.
            </summary>
            <param name="Source">Image source.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.GetTemporaryFile(System.Byte[])">
            <summary>
            Stores an image in binary form as a temporary file. Files will be deleted when application closes.
            </summary>
            <param name="BinaryImage">Binary image.</param>
            <returns>Temporary file name.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.GetTemporaryFile(System.Byte[],System.String)">
            <summary>
            Stores an image in binary form as a temporary file. Files will be deleted when application closes.
            </summary>
            <param name="BinaryImage">Binary image.</param>
            <param name="FileExtension">File extension.</param>
            <returns>Temporary file name.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.MarkdownContent">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.#ctor">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.GetMarkdown(Waher.Content.Markdown.Model.MultimediaItem,System.String)">
            <summary>
            Gets the parsed Markdown referenced to by a Multi-media item.
            </summary>
            <param name="Item">Multi-media item.</param>
            <param name="ParentURL">URL to parent document.</param>
            <returns>Parsed Markdown document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.ProcessInclusion(Waher.Content.Markdown.Rendering.Renderer,Waher.Content.Markdown.Model.MultimediaItem[],Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Includes a markdown document from a file.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.TableOfContents">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.#ctor">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.VideoContent">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.#ctor">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.WebPageContent">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.#ctor">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.YouTubeContent">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.youTubeLink">
            <summary>
            https://youtube.com/watch?v=...
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.youTubeLink2">
            <summary>
            https://youtu.be/...
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.#ctor">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MultimediaContent">
            <summary>
            Abstract base class for multimedia content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MultimediaItem">
            <summary>
            Multimedia item.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Multimedia item.
            </summary>
            <param name="Doc">Markdown document.</param>
            <param name="Url">URL</param>
            <param name="Title">Title</param>
            <param name="Width">Width of media item, if available.</param>
            <param name="Height">Height of media item, if available.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Document">
            <summary>
            Markdown document
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Title">
            <summary>
            Optional title.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Width">
            <summary>
            Width of media item, if available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Height">
            <summary>
            Height of media item, if available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Extension">
            <summary>
            Resource extension.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.ContentType">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Abbreviation">
            <summary>
            Abbreviation
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Abbreviation
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Description">Description of abbreviation.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Abbreviation.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Abbreviation.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Abbreviation.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail">
            <summary>
            Automatic Link (e-Mail)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="EMail">Automatic e-Mail link.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.EMail">
            <summary>
            e-Mail
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl">
            <summary>
            Automatic Link (URL)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="URL">Automatic URL link.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.URL">
            <summary>
            URL
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Delete">
            <summary>
            Deleted text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Deleted text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Delete.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.DetailsReference">
            <summary>
            Details reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Meta-data reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.DetailsReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.DetailsReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.EmojiReference">
            <summary>
            Represents an Emoji.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Emoji.EmojiInfo)">
            <summary>
            Represents an Emoji.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Emoji">Emoji reference.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Emoji.EmojiInfo,System.Int32)">
            <summary>
            Represents an Emoji.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Emoji">Emoji reference.</param>
            <param name="Level">Level (number of colons used to define the emoji)</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Emoji">
            <summary>
            Emoji information.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Level">
            <summary>
            Level (number of colons used to define the emoji)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Delimiter">
            <summary>
            Delimiter string used to identify emoji.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Emphasize">
            <summary>
            Emphasized text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Emphasized text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Emphasize.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.FootnoteReference">
            <summary>
            Footnote reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Key">
            <summary>
            Footnote key
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.AutoExpand">
            <summary>
            If the footnote should automatically be expanded when rendered,
            if format supports auto-expansion.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HashTag">
            <summary>
            Represents a hashtag.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Represents a hashtag.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Tag">Hashtag.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HashTag.Tag">
            <summary>
            Hashtag
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HashTag.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HtmlEntity">
            <summary>
            Represents an HTML entity.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Represents an HTML entity.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Entity">HTML Entity.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Entity">
            <summary>
            HTML Entity
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode">
            <summary>
            Represents an HTML entity in Unicode format.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32)">
            <summary>
            Represents an HTML entity in Unicode format.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Code">HTML Entity.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Code">
            <summary>
            Unicode character
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineCode">
            <summary>
            Inline source code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline source code.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Code">Inline Code.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineCode.Code">
            <summary>
            Inline code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineCode.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Atomize">
            <summary>
            Return an enumeration of the editable code as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineHTML">
            <summary>
            Inline HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="HTML">Inline HTML.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineHTML.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineHTML.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Atomize">
            <summary>
            Return an enumeration of the editable HTML as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineScript">
            <summary>
            Inline source code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Script.Expression,Waher.Script.Variables,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Inline source code.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Expression">Expression.</param>
            <param name="Variables">Collection of variables to use when executing the script.</param>
            <param name="AloneInParagraph">If construct stands alone in a paragraph.</param>
            <param name="StartPosition">Starting position of script.</param>
            <param name="EndPosition">Ending position of script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.Variables">
            <summary>
            Variables.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.StartPosition">
            <summary>
            Starting position of script in markdown document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.EndPosition">
            <summary>
            Ending position of script in markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.EvaluateExpression">
            <summary>
            Evaluates the script expression.
            </summary>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.BaselineAlignment">
            <summary>
            Baseline alignment
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.Add(System.String,System.Object)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Associated variable object value.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineText">
            <summary>
            Unformatted text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Unformatted text.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Value">Inline text.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineText.Value">
            <summary>
            Unformatted text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineText.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Atomize">
            <summary>
            Return an enumeration of the editable text as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Insert">
            <summary>
            Inserted text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Inserted text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Insert.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.LineBreak">
            <summary>
            Line break
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Line break
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LineBreak.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Link
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Url">URL</param>
            <param name="Title">Optional title.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.Title">
            <summary>
            Optional Link title.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.LinkReference">
            <summary>
            Link reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Link reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Label">Link label.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LinkReference.Label">
            <summary>
            Link label
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LinkReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.MetaReference">
            <summary>
            Meta-data reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Meta-data reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MetaReference.Key">
            <summary>
            Meta-data key
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.TryGetMetaData(System.Collections.Generic.KeyValuePair{System.String,System.Boolean}[]@)">
            <summary>
            Tries to get meta-data from the document.
            </summary>
            <param name="Values">Values, if found.</param>
            <returns>If meta-data was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MetaReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Multimedia">
            <summary>
            Multimedia
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.Model.MultimediaItem[])">
            <summary>
            Multimedia
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Items">Multimedia items.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.Items">
            <summary>
            Multimedia items.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.MultimediaHandler``1">
            <summary>
            Multimedia handler.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetMultimediaHandler``1(System.String[])">
            <summary>
            Gets the best multimedia handler for a set of URLs or file names.
            </summary>
            <param name="URLs">Set of URLs, or file names.</param>
            <returns>Best multimedia handler.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetMultimediaHandler``1(Waher.Content.Markdown.Model.MultimediaItem[])">
            <summary>
            Gets the best multimedia handler for a set of multimedia items.
            </summary>
            <param name="Items">Set of multimedia items.</param>
            <returns>Best multimedia handler.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetRenderers``1">
            <summary>
            Multimedia handlers.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.MultimediaReference">
            <summary>
            Multimedia reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.LinkedList{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.Boolean)">
            <summary>
            Multimedia reference.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Label">Multimedia label.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.StrikeThrough">
            <summary>
            Strike Through text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Strike Through text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Strong">
            <summary>
            Strong text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Strong text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Strong.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.SubScript">
            <summary>
            Sub-script text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Sub-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Sub-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Text">Subscript text.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.SubScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.SuperScript">
            <summary>
            Super-script text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Super-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Super-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Text">Superscript text.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.SuperScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Underline">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Underlined text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.Render(Waher.Content.Markdown.Rendering.IRenderer)">
            <summary>
            Renders the element.
            </summary>
            <param name="Output">Renderer</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Underline.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.IncrementStatistics(Waher.Content.Markdown.MarkdownStatistics)">
            <summary>
            Increments the property or properties in <paramref name="Statistics"/> corresponding to the element.
            </summary>
            <param name="Statistics">Contains statistics about the Markdown document.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.TextAlignment">
            <summary>
            Text alignment of contents.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.CodeContent.GraphContent">
            <summary>
            Script graph content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.GraphContent.#ctor">
            <summary>
            Script graph content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.GraphContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.GraphContent.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.CodeContent.ImageContent">
            <summary>
            Base64-encoded image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.ImageContent.#ctor">
            <summary>
            Base64-encoded image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.ImageContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.CodeContent.ImageContent.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.HtmlRenderer">
            <summary>
            Renders HTML from a Markdown document.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Rendering.HtmlRenderer.htmlSettings">
            <summary>
            HTML settings.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.#ctor(Waher.Content.Markdown.Rendering.HtmlSettings)">
            <summary>
            Renders HTML from a Markdown document.
            </summary>
            <param name="HtmlSettings">HTML settings.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.#ctor(System.Text.StringBuilder,Waher.Content.Markdown.Rendering.HtmlSettings)">
            <summary>
            Renders HTML from a Markdown document.
            </summary>
            <param name="Output">HTML output.</param>
            <param name="HtmlSettings">HTML settings.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.#ctor(Waher.Content.Markdown.Rendering.HtmlSettings,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Renders HTML from a Markdown document.
            </summary>
            <param name="HtmlSettings">HTML settings.</param>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.#ctor(System.Text.StringBuilder,Waher.Content.Markdown.Rendering.HtmlSettings,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Renders HTML from a Markdown document.
            </summary>
            <param name="Output">HTML output.</param>
            <param name="HtmlSettings">HTML settings.</param>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.RenderDocumentHeader">
            <summary>
            Renders the document header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.RenderFootnotes">
            <summary>
            Renders footnotes.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.RenderDocumentFooter">
            <summary>
            Renders the document header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Abbreviation)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Delete)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.DetailsReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.EmojiReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Emphasize)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.FootnoteReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HashTag)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntity)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineCode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineHTML)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.RenderObject(System.Object,System.Boolean,Waher.Script.Variables)">
            <summary>
            Generates HTML from Script output.
            </summary>
            <param name="Result">Script output.</param>
            <param name="AloneInParagraph">If the script output is to be presented alone in a paragraph.</param>
            <param name="Variables">Current variables.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineText)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Insert)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LineBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Link)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(System.String,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for a link.
            </summary>
            <param name="Url">URL</param>
            <param name="Title">Optional title.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LinkReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MetaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Multimedia)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MultimediaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.StrikeThrough)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Strong)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SubScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SuperScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Underline)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BlockQuote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BulletList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CenterAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CodeBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CommentBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionTerms)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DeleteBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Footnote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Header)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HorizontalRule)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HtmlBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InsertBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InvisibleBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.LeftAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.MarginAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NestedBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Paragraph)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.RightAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Sections)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.SectionSeparator)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Table)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlRenderer.Render(Waher.Content.Markdown.Model.BlockElements.UnnumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.HtmlSettings">
            <summary>
            Contains settings that the HTML export uses to customize HTML output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.HtmlSettings.#ctor">
            <summary>
            Contains settings that the HTML export uses to customize HTML output.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Rendering.HtmlSettings.HashtagClass">
            <summary>
            Class name used on hashtag mark elements.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Rendering.HtmlSettings.HashtagClickScript">
            <summary>
            JavaScript to execute when hashtag mark element is clicked.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Rendering.HtmlSettings.XmlEntitiesOnly">
            <summary>
            If typographical extensions should conform to XML entities (true), or if HTML entities can be used as well (false).
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.ICodeContentHtmlRenderer">
            <summary>
            Interface for code content HTML renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.ICodeContentHtmlRenderer.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.ICodeContentMarkdownRenderer">
            <summary>
            Interface for code content Markdown renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.ICodeContentMarkdownRenderer.RenderMarkdown(Waher.Content.Markdown.Rendering.MarkdownRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Markdown for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.ICodeContentRenderer">
            <summary>
            Interface for code content renderers.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.ICodeContentTextRenderer">
            <summary>
            Interface for code content plain text renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.ICodeContentTextRenderer.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the code content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language.</param>
            <param name="Indent">Code block indentation.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If renderer was able to generate output.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.IMultimediaHtmlRenderer">
            <summary>
            Interface for multimedia content HTML renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IMultimediaHtmlRenderer.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.IMultimediaMarkdownRenderer">
            <summary>
            Interface for multimedia content Markdown renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IMultimediaMarkdownRenderer.RenderMarkdown(Waher.Content.Markdown.Rendering.MarkdownRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Markdown for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.IMultimediaRenderer">
            <summary>
            Interface for multimedia content renderers.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.IMultimediaTextRenderer">
            <summary>
            Interface for multimedia content plain text renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IMultimediaTextRenderer.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.IRenderer">
            <summary>
            Interface for Markdown renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.RenderDocument(Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Renders a document.
            </summary>
            <param name="Document">Document to render.</param>
            <param name="Inclusion">If the rendered output is to be included in another document (true), or if it is a standalone document (false).</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Abbreviation)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Delete)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.DetailsReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.EmojiReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Emphasize)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.FootnoteReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HashTag)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntity)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineCode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineHTML)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineText)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Insert)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LineBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Link)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LinkReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MetaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Multimedia)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MultimediaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.StrikeThrough)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Strong)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SubScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SuperScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Underline)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BlockQuote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BulletList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CenterAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CodeBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CommentBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionTerms)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DeleteBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Footnote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Header)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HorizontalRule)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HtmlBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InsertBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InvisibleBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.LeftAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.MarginAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NestedBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Paragraph)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.RightAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Sections)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.SectionSeparator)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Table)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.IRenderer.Render(Waher.Content.Markdown.Model.BlockElements.UnnumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.MarkdownRenderer">
            <summary>
            Renders portable Markdown from a Markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.#ctor">
            <summary>
            Renders portable Markdown from a Markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.#ctor(System.Text.StringBuilder)">
            <summary>
            Renders portable Markdown from a Markdown document.
            </summary>
            <param name="Output">Markdown output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Renders portable Markdown from a Markdown document.
            </summary>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.#ctor(System.Text.StringBuilder,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Renders portable Markdown from a Markdown document.
            </summary>
            <param name="Output">Markdown output.</param>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.RenderFootnotes">
            <summary>
            Renders footnotes.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Abbreviation)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Delete)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.DetailsReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.EmojiReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Emphasize)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.FootnoteReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HashTag)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntity)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineCode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineHTML)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.RenderObject(System.Object,System.Boolean,Waher.Script.Variables)">
            <summary>
            Generates Markdown from Script output.
            </summary>
            <param name="Result">Script output.</param>
            <param name="AloneInParagraph">If the script output is to be presented alone in a paragraph.</param>
            <param name="Variables">Current variables.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineText)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Insert)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LineBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Link)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LinkReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MetaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Multimedia)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.DefaultRenderingMultimedia(Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean)">
            <summary>
            Default Multi-media rendering of multi-media content.
            </summary>
            <param name="Items">Multi-media items</param>
            <param name="ChildNodes">Label definition of multi-media content.</param>
            <param name="AloneInParagraph">If the multi-media construct is alone in the paragraph.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MultimediaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.StrikeThrough)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Strong)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SubScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SuperScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Underline)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.PrefixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="Prefix">Block prefix</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.PrefixedBlock(Waher.Content.Markdown.Model.MarkdownElement,System.String,System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Child">Child element.</param>
            <param name="PrefixFirstRow">Prefix, for first row.</param>
            <param name="PrefixNextRows">Prefix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.PrefixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="PrefixFirstRow">Prefix, for first row.</param>
            <param name="PrefixNextRows">Prefix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.SuffixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Suffixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="Suffix">Block suffix</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.SuffixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Suffixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="SuffixFirstRow">Suffix, for first row.</param>
            <param name="SuffixNextRows">Suffix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.PrefixSuffixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Prefixes and Suffixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="Prefix">Block prefix</param>
            <param name="Suffix">Block suffix</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.PrefixSuffixedBlock(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String,System.String,System.String)">
            <summary>
            Prefixes and Suffixes a block of markdown.
            </summary>
            <param name="Children">Child elements.</param>
            <param name="PrefixFirstRow">Prefix, for first row.</param>
            <param name="PrefixNextRows">Prefix, for the rest of the rows, if any.</param>
            <param name="SuffixFirstRow">Suffix, for first row.</param>
            <param name="SuffixNextRows">Suffix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BlockQuote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BulletList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CenterAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CodeBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CommentBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionTerms)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DeleteBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Footnote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Header)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HorizontalRule)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HtmlBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InsertBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InvisibleBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.LeftAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.MarginAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NestedBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Paragraph)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.RightAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Sections)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.SectionSeparator)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Table)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderer.Render(Waher.Content.Markdown.Model.BlockElements.UnnumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.AudioContent">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.AudioContent.#ctor">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.AudioContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Renderer">Renderer generating output.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.ImageContent">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.ImageContent.#ctor">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.ImageContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Renderer">Renderer</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.MarkdownContent">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.MarkdownContent.#ctor">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.MarkdownContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.MarkdownContent.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.MarkdownContent.RenderMarkdown(Waher.Content.Markdown.Rendering.MarkdownRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Markdown for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.TableOfContents">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.TableOfContents.#ctor">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.TableOfContents.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.TableOfContents.RenderText(Waher.Content.Markdown.Rendering.TextRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates plain text for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.VideoContent">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.VideoContent.#ctor">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.VideoContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.WebPageContent">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.WebPageContent.#ctor">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.WebPageContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Multimedia.YouTubeContent">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.YouTubeContent.#ctor">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Multimedia.YouTubeContent.RenderHtml(Waher.Content.Markdown.Rendering.HtmlRenderer,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the multimedia content.
            </summary>
            <param name="Renderer">Renderer.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.Renderer">
            <summary>
            Abstract base class for Markdown renderers.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Rendering.Renderer.Output">
            <summary>
            Renderer output.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Rendering.Renderer.Document">
            <summary>
            Reference to Markdown document being processed.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.#ctor">
            <summary>
            Abstract base class for Markdown renderers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.#ctor(System.Text.StringBuilder)">
            <summary>
            Abstract base class for Markdown renderers.
            </summary>
            <param name="Output">Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for Markdown renderers.
            </summary>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.#ctor(System.Text.StringBuilder,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for Markdown renderers.
            </summary>
            <param name="Output">Output.</param>
            <param name="Document">Document being rendered.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Dispose">
            <summary>
            Disposes of the renderer.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderDocument(Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Renders a document.
            </summary>
            <param name="Document">Document to render.</param>
            <param name="Inclusion">If the rendered output is to be included in another document (true), or if it is a standalone document (false).</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderDocumentHeader">
            <summary>
            Renders the document header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderFootnotes">
            <summary>
            Renders footnotes.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderDocumentFooter">
            <summary>
            Renders the document header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.ToString">
            <summary>
            Returns the renderer output.
            </summary>
            <returns>Renderer output.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Clear">
            <summary>
            Clears the underlying <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderChildren(Waher.Content.Markdown.Model.MarkdownElementChildren)">
            <summary>
            Renders the children of <paramref name="Element"/>.
            </summary>
            <param name="Element">Element being rendered</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderChildren(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Renders the children of <paramref name="Element"/>.
            </summary>
            <param name="Element">Element being rendered</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.RenderChild(Waher.Content.Markdown.Model.MarkdownElementSingleChild)">
            <summary>
            Renders the child of <paramref name="Element"/>.
            </summary>
            <param name="Element">Element being rendered</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Abbreviation)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Delete)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.DetailsReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.EmojiReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Emphasize)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.FootnoteReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.HashTag)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntity)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineCode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineHTML)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineText)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Insert)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.LineBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Link)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.LinkReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.MetaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Multimedia)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.MultimediaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.StrikeThrough)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Strong)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.SubScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.SuperScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.SpanElements.Underline)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.BlockQuote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.BulletList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.CenterAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.CodeBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.CommentBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionTerms)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.DeleteBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.Footnote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.Header)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.HorizontalRule)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.HtmlBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.InsertBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.InvisibleBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.LeftAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.MarginAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.NestedBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.Paragraph)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.RightAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.Sections)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.SectionSeparator)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.Table)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.Renderer.Render(Waher.Content.Markdown.Model.BlockElements.UnnumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.MarkdownRenderingExtensions">
            <summary>
            Rendering extensions for some backward-compatibility.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderingExtensions.GenerateMarkdown(Waher.Content.Markdown.Model.MarkdownElement,System.Text.StringBuilder)">
            <summary>
            Renders Markdown from a Markdown element.
            </summary>
            <param name="Element">Markdown element to render.</param>
            <param name="Output">Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderingExtensions.GenerateHTML(Waher.Content.Markdown.Model.MarkdownElement,System.Text.StringBuilder)">
            <summary>
            Renders HTML from a Markdown element.
            </summary>
            <param name="Element">Markdown element to render.</param>
            <param name="Output">Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.MarkdownRenderingExtensions.GenerateText(Waher.Content.Markdown.Model.MarkdownElement,System.Text.StringBuilder)">
            <summary>
            Renders plain text from a Markdown element.
            </summary>
            <param name="Element">Markdown element to render.</param>
            <param name="Output">Output.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Rendering.TextRenderer">
            <summary>
            Renders plain text from a Markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.#ctor">
            <summary>
            Renders plain text from a Markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.#ctor(System.Text.StringBuilder)">
            <summary>
            Renders plain text from a Markdown document.
            </summary>
            <param name="Output">Plain text output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.RenderFootnotes">
            <summary>
            Renders footnotes.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Abbreviation)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Delete)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.DetailsReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.EmojiReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Emphasize)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.FootnoteReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HashTag)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntity)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineCode)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineHTML)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.RenderObject(System.Object,System.Boolean)">
            <summary>
            Generates plain text from Script output.
            </summary>
            <param name="Result">Script output.</param>
            <param name="AloneInParagraph">If the script output is to be presented alone in a paragraph.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.InlineText)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Insert)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LineBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Link)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.LinkReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MetaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Multimedia)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.DefaultRenderingMultimedia(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean)">
            <summary>
            Default Multi-media rendering of multi-media content.
            </summary>
            <param name="ChildNodes">Label definition of multi-media content.</param>
            <param name="AloneInParagraph">If the multi-media construct is alone in the paragraph.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.MultimediaReference)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.StrikeThrough)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Strong)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SubScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.ToSubscript(System.String)">
            <summary>
            Converts a string to subscript (as far as it goes).
            </summary>
            <param name="s">String</param>
            <returns>String with subscript characters.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.SuperScript)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.ToSuperscript(System.String)">
            <summary>
            Converts a string to superscript (as far as it goes).
            </summary>
            <param name="s">String</param>
            <returns>String with superscript characters.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.SpanElements.Underline)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BlockQuote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.BulletList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CenterAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CodeBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.CommentBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DefinitionTerms)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.DeleteBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Footnote)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Header)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HorizontalRule)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.HtmlBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InsertBlocks)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.InvisibleBreak)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.LeftAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.MarginAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NestedBlock)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.NumberedList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Paragraph)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.RightAligned)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Sections)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.SectionSeparator)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.Table)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.TaskList)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
        <member name="M:Waher.Content.Markdown.Rendering.TextRenderer.Render(Waher.Content.Markdown.Model.BlockElements.UnnumberedItem)">
            <summary>
            Renders <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to render</param>
        </member>
    </members>
</doc>
