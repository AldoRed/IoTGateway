<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Markdown</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Markdown.Functions.LoadMarkdown">
            <summary>
            LoadMarkdown(FileName)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LoadMarkdown(FileName)
            </summary>
            <param name="FileName">File name.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.LoadMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.LoadMarkdown.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownEncode">
            <summary>
            MarkdownEncode(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownEncode(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownEncode.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownEncode.EscapeText(System.String)">
            <summary>
            Escapes text for inclusion in a Markdown document.
            </summary>
            <param name="PlainText">Text to include.</param>
            <returns>Escaped text.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.MarkdownToHtml">
            <summary>
            MarkdownToHtml(s)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtml.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            MarkdownToHtml(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.MarkdownToHtml.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.MarkdownToHtml.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Functions.PreprocessMarkdown">
            <summary>
            PreprocessMarkdown(Markdown)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.PreprocessMarkdown.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            PreprocessMarkdown(Markdown)
            </summary>
            <param name="Markdown">Markdown.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Functions.PreprocessMarkdown.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Functions.PreprocessMarkdown.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.HtmlSettings">
            <summary>
            Contains settings that the HTML export uses to customize HTML output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.HtmlSettings.#ctor">
            <summary>
            Contains settings that the HTML export uses to customize HTML output.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.HtmlSettings.HashtagClass">
            <summary>
            Class name used on hashtag mark elements.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.HtmlSettings.HashtagClickScript">
            <summary>
            Javascript to execute when hashtag mark element is clicked.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownCodec">
            <summary>
            Markdown encoder.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.#ctor">
            <summary>
            Markdown encoder/decoder.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.MarkdownCodec.ContentType">
            <summary>
            Markdown content type.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.ContentTypes">
            <summary>
            Supported content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownCodec.FileExtensions">
            <summary>
            Supported file extensions.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Decodes(System.String,Waher.Runtime.Inventory.Grade@)">
            <summary>
            If the decoder decodes an object with a given content type.
            </summary>
            <param name="ContentType">Content type to decode.</param>
            <param name="Grade">How well the decoder decodes the object.</param>
            <returns>If the decoder can decode an object with the given type.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Decode(System.String,System.Byte[],System.Text.Encoding,System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Uri)">
            <summary>
            Decodes an object.
            </summary>
            <param name="ContentType">Internet Content Type.</param>
            <param name="Data">Encoded object.</param>
            <param name="Encoding">Any encoding specified. Can be null if no encoding specified.</param>
            <param name="Fields">Any content-type related fields and their corresponding values.</param>
            <param name="BaseUri">Base URI, if any. If not available, value is null.</param>
            <returns>Decoded object.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be decoded.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Encodes(System.Object,Waher.Runtime.Inventory.Grade@,System.String[])">
            <summary>
            If the encoder encodes a given object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Grade">How well the encoder encodes the object.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>If the encoder can encode the given object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.Encode(System.Object,System.Text.Encoding,System.String@,System.String[])">
            <summary>
            Encodes an object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Encoding">Desired encoding of text. Can be null if no desired encoding is speified.</param>
            <param name="ContentType">Content Type of encoding. Includes information about any text encodings used.</param>
            <returns>Encoded object.</returns>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <exception cref="T:System.ArgumentException">If the object cannot be encoded.</exception>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownCodec.TryGetContentType(System.String,System.String@)">
            <summary>
            Tries to get the content type of an item, given its file extension.
            </summary>
            <param name="FileExtension">File extension.</param>
            <param name="ContentType">Content type.</param>
            <returns>If the extension was recognized.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownElementHandler">
            <summary>
            Delegate for markdown element callback methods.
            </summary>
            <param name="Element">Markdown element</param>
            <param name="State">State object.</param>
            <returns>If process should continue.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownDocument">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            See the markdown reference documentation provided with the library for more information.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.#ctor(System.String,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.#ctor(System.String,Waher.Content.Markdown.MarkdownSettings,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="Settings">Parser settings.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.#ctor(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.String,System.String,System.Type[])">
            <summary>
            Contains a markdown document. This markdown document class supports original markdown, as well as several markdown extensions.
            </summary>
            <param name="MarkdownText">Markdown text.</param>
            <param name="Settings">Parser settings.</param>
            <param name="FileName">If the content is coming from a file, this parameter contains the name of that file. 
            Otherwise, the parameter is the empty string.</param>
            <param name="ResourceName">Local resource name of file, if accessed from a web server.</param>
            <param name="URL">Full URL of resource hosting the content, if accessed from a web server.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.MarkdownText">
            <summary>
            Markdown text. This text might differ slightly from the original text passed to the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="FileName">Filename of markdown.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Preprocess(System.String,Waher.Content.Markdown.MarkdownSettings,System.String,System.Boolean@,System.Type[])">
            <summary>
            Preprocesses markdown text.
            </summary>
            <param name="Markdown">Markdown text</param>
            <param name="Settings">Markdown settings.</param>
            <param name="FileName">Filename of markdown.</param>
            <param name="IsDynamic">If the markdown contained preprocessed script.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Preprocessed markdown.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <returns>HTML</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateHTML(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Generates HTML from the markdown text.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Inclusion">If the HTML is to be included in another document (true), or if it is a standalone document (false).</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.CheckURL(System.String,System.String)">
            <summary>
            Checks the URL if it needs redirection to a proxy.
            </summary>
            <param name="Url">URL to check.</param>
            <param name="URL">URL of the document. If null, or empty, relative URLs can be returned. If not null or empty,
            all URLs returned will be absolute.</param>
            <returns>URL to use in clients.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GeneratePlainText">
            <summary>
            Generates Plain Text from the markdown text.
            </summary>
            <returns>Plain Text</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates Plain Text from the markdown text.
            </summary>
            <param name="Output">Plain Text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <returns>XAML</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML(System.Xml.XmlWriterSettings)">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <param name="XmlSettings">XML settings.</param>
            <returns>XAML</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML(System.Text.StringBuilder)">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <param name="Output">XAML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="XmlSettings">XML settings.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML(System.Xml.XmlWriter)">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <param name="Output">XAML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GenerateXAML(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Generates XAML from the markdown text.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="Inclusion">If the HTML is to be included in another document (true), or if it is a standalone document (false).</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ExportXml">
            <summary>
            Exports the parsed document to XML.
            </summary>
            <returns>XML String.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ExportXml(System.Text.StringBuilder)">
            <summary>
            Exports the parsed document to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ExportXml(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
            <summary>
            Exports the parsed document to XML.
            </summary>
            <param name="Xml">XML Output.</param>
            <param name="Settings">XML Settings.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ExportXml(System.Xml.XmlWriter)">
            <summary>
            Exports the parsed document to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Headers">
            <summary>
            Headers in document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetMetaData(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Boolean}[]@)">
            <summary>
            Tries to get a meta-data value given its key.
            </summary>
            <param name="Key">Meta-data value.</param>
            <param name="Value">(Value,linebreak)-pairs corresponding to the key, if found, null otherwise.</param>
            <returns>If the meta-data key was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetMetaData(System.String)">
            <summary>
            Gets the meta-data values given a meta-data key. If meta-data is not found, an empty array is returned.
            </summary>
            <param name="Key">Meta-data key.</param>
            <returns>Values for the given key, or an empty array if the key was not found.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.MetaDataKeys">
            <summary>
            Meta-data keys availale in document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Author">
            <summary>
            Author(s) of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Copyright">
            <summary>
            Link to copyright statement.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Previous">
            <summary>
            Link to previous document, in a paginated set of documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Next">
            <summary>
            Link to next document, in a paginated set of documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.CSS">
            <summary>
            Link(s) to Cascading Style Sheet(s) that should be used for visual formatting of the generated HTML page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.JavaScript">
            <summary>
            Link(s) to JavaScript files(s) that should be includedin the generated HTML page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Script">
            <summary>
            Links to server-side script files that should be included before processing the page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.InitializationScript">
            <summary>
            Links to server-side script files that should be executed before before processing the page.
            Initialization script are only executed once. To execute init script again, a new version
            (timestamp) of the file must be present.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Parameters">
            <summary>
            Name of a query parameter recognized by the page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Date">
            <summary>
            (Publication) date of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Description">
            <summary>
            Description of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Image">
            <summary>
            Link to image for page.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Keywords">
            <summary>
            Keywords.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Subtitle">
            <summary>
            Subtitle of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Title">
            <summary>
            Title of document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Web">
            <summary>
            Link to web page
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Refresh">
            <summary>
            Tells the browser to refresh the page after a given number of seconds.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.UserVariable">
            <summary>
            Name of the variable that will hold a reference to the IUser interface for the currently logged in user.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Login">
            <summary>
            Link to a login page. This page will be shown if the user variable does not contain a user.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Privileges">
            <summary>
            Requered user privileges to display page.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetFootnoteNumber(System.String,System.Int32@)">
            <summary>
            Tries to get the number of a footnote, given its key.
            </summary>
            <param name="Key">Footnote key.</param>
            <param name="Number">Footnote number.</param>
            <returns>If a footnote with the given key was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.TryGetFootnote(System.String,Waher.Content.Markdown.Model.BlockElements.Footnote@)">
            <summary>
            Tries to get a footnote, given its key.
            </summary>
            <param name="Key">Footnote key.</param>
            <param name="Footnote">Footnote.</param>
            <returns>If a footnote with the given key was found.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Footnotes">
            <summary>
            Gets the keys of the footnotes in the order that they are referenced in the document. Footnotes that are not actually
            used in the document are omitted.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.EmojiSource">
            <summary>
            Source for emojis in the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Encode(System.String)">
            <summary>
            Encodes all special characters in a string so that it can be included in a markdown document without affecting the markdown.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.SyntaxHighlighting">
            <summary>
            If syntax highlighting is used in the document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.FileName">
            <summary>
            Filename of Markdown document. Markdown inclusion will be made relative to this filename.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.ResourceName">
            <summary>
            Local resource name of Markdown document, if referenced through a web server. Master documents use this resource name to match
            detail content with menu links.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.URL">
            <summary>
            Absolute URL of Markdown document, if referenced through a web server.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Master">
            <summary>
            Master document responsible for the current document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Detail">
            <summary>
            Detail document of a master document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.Settings">
            <summary>
            Markdown settings.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.IncludesTableOfContents">
            <summary>
            If the document contains a Table of Contents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownDocument.IsDynamic">
            <summary>
            If the contents of the document is dynamic (i.e. includes script), or not (i.e. is static).
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all elements in the document.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindLinks">
            <summary>
            Finds all links in the document.
            </summary>
            <returns>Array of links found in the document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindLinks(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds all links in the document.
            </summary>
            <param name="IncludeAutomaticLinks">If automatic links are to be included. (Default=true)</param>
            <param name="IncludeLinks">If normal links are to be included. (Default=true)</param>
            <param name="IncludeMultimedia">If Multimedia links are to be included. (Default=true)</param>
            <returns>Array of links found in the document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.FindHashTags">
            <summary>
            Finds hashtags in the document.
            </summary>
            <returns>Array of hashtags found in the document.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.GetEnumerator">
            <summary>
            Gets an enumerator of root markdown elements in the document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Calculates the difference of two Markdown documents.
            </summary>
            <param name="Old">Old version of the document.</param>
            <param name="New">New version of the document.</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <returns>Difference document</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(System.String,System.String,Waher.Content.Markdown.MarkdownSettings,System.Boolean,System.Type[])">
            <summary>
            Calculates the difference of two Markdown documents.
            </summary>
            <param name="Old">Old version of the document.</param>
            <param name="New">New version of the document.</param>
            <param name="Settings">Markdown settings.</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <param name="TransparentExceptionTypes">If an exception is thrown when processing script in markdown, and the exception is of
            any of these types, the exception will be rethrown, instead of shown as an error in the generated output.</param>
            <returns>Difference document</returns>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownDocument.Compare(Waher.Content.Markdown.MarkdownDocument,System.Boolean)">
            <summary>
            Calculates the difference of the current Markdown document, and a previous version of the Markdown document.
            </summary>
            <param name="Previous">Previous version</param>
            <param name="KeepUnchanged">If unchanged parts of the document should be kept.</param>
            <returns>Difference document</returns>
        </member>
        <member name="T:Waher.Content.Markdown.MarkdownSettings">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource,System.Boolean)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
            <param name="ParseMetaData">If meta-data should be parsed or not. By default, this value is true, if no emoji source is provided, 
            and false, if an emoji source is not provided.</param>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.#ctor(Waher.Content.Emoji.IEmojiSource,System.Boolean,Waher.Script.Variables)">
            <summary>
            Contains settings that the Markdown parser uses to customize its behavior.
            </summary>
            <param name="EmojiSource">Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.</param>
            <param name="ParseMetaData">If meta-data should be parsed or not. By default, this value is true, if no emoji source is provided, 
            and false, if an emoji source is not provided.</param>
            <param name="Variables">Collection of variables. Providing such a collection enables script execution inside markdown
            documents.</param>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.EmojiSource">
            <summary>
            Optional Emoji source. Emojis and smileys are only available if an emoji source is provided.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.ParseMetaData">
            <summary>
            If meta-data should be parsed or not.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.Variables">
            <summary>
            Collection of variables. Providing such a collection enables script execution inside markdown documents.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.HttpxProxy">
            <summary>
            Modifies URLS using the HTTPX URI scheme, so that they point to an HTTPX proxy. The string %URL% is replaced with
            the original URL string.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.LocalHttpxResourcePath">
            <summary>
            Local HTTPX Resource Path. HTTPX URLs starting with this string (if defined) will be considered local web resources.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AudioAutoplay">
            <summary>
            If audio is to be played automatically. Default=true.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AudioControls">
            <summary>
            If audio should be played with controls or not. Default=false.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.VideoAutoplay">
            <summary>
            If video is to be played automatically. Default=false.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.VideoControls">
            <summary>
            If video should be played with controls or not. Default=true.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.EmbedEmojis">
            <summary>
            If emojis should be embedded using the data URI scheme.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.RootFolder">
            <summary>
            File system root folder. If file references are absolute, and this property is provided, they are measured relative to this folder.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.AllowScriptTag">
            <summary>
            If the HTML SCRIPT tag should be allowed or not.s
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.MarkdownSettings.GetFileName(System.String,System.String)">
            <summary>
            Evaluates a file name from a file reference.
            </summary>
            <param name="DocumentFileName">Filename of original markdown document.</param>
            <param name="FileNameReference">Filename reference.</param>
            <returns>Physical filename.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.XamlSettings">
            <summary>
            XAML Settings used for XAML rendering.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.MarkdownSettings.HtmlSettings">
            <summary>
            HTML Settings used for HTML rendering.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.Atom">
            <summary>
            Represents an atom of editable text (i.e. typed character).
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.IEditableText,System.Char)">
            <summary>
            Represents an atom of editable text (i.e. typed character).
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.Charater">
            <summary>
            Character
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.Atoms.Atom.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.Atom.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineCodeCharacter">
            <summary>
            Represents a character in inline code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineCodeCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineCode,System.Char)">
            <summary>
            Represents a character in inline code.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineHtmlCharacter">
            <summary>
            Represents a character in inline HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineHtmlCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineHTML,System.Char)">
            <summary>
            Represents a character in inline HTML.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Atoms.InlineTextCharacter">
            <summary>
            Represents a character in inline text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Atoms.InlineTextCharacter.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.SpanElements.InlineText,System.Char)">
            <summary>
            Represents a character in inline text.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElement">
            <summary>
            Abstract base class for block elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElement.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for block elements.
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElement.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren">
            <summary>
            Abstract base class for block elements with children.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Abstract base class for block elements with children.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Abstract base class for block elements with children.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElementChildren.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild">
            <summary>
            Abstract base class for block elements with one child.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Abstract base class for block elements with one child.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockElementSingleChild.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BlockQuote">
            <summary>
            Represents a block quote in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a block quote in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BlockQuote.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BlockQuote.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.BulletList">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a bullet list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.BulletList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.BulletList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.CodeBlock">
            <summary>
            Represents a code block in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents a code block in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Rows">Rows</param>
            <param name="Start">Start index of code.</param>
            <param name="End">End index of code.</param>
            <param name="Indent">Additional indenting.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String[],System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Represents a code block in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Rows">Rows</param>
            <param name="Start">Start index of code.</param>
            <param name="End">End index of code.</param>
            <param name="Indent">Additional indenting.</param>
            <param name="Language">Language used.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Indent">
            <summary>
            Code block indentation.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.CodeBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.CodeBlock.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions">
            <summary>
            Definition descriptions
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Definition descriptions
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Descriptions">Descriptions</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Definition descriptions
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Descriptions">Descriptions</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionDescriptions.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionList">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a definition list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.JoinOverParagraphs">
            <summary>
            If elements of this type should be joined over paragraphs.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.AddChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms">
            <summary>
            Definition terms
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Definition terms
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Terms">Terms</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Definition terms
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Terms">Terms</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DefinitionTerms.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.DeleteBlocks.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Footnote">
            <summary>
            Footnote
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.Key">
            <summary>
            Footnote key
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Footnote.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Footnote.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Header">
            <summary>
            Represents a header in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.Boolean,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a header in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Level">Header level.</param>
            <param name="Prefix">If header was defined with a prefix (true) or with an underline (false).</param>
            <param name="Row">Header definition.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Level">
            <summary>
            Header level.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.Id">
            <summary>
            ID of header.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Header.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Header.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.HorizontalRule">
            <summary>
            Horizontal rule
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Horizontal rule
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HorizontalRule.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.HtmlBlock">
            <summary>
            Represents a block of HTML in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a block of HTML in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.HtmlBlock.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.InsertBlocks">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents inserted blocks in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InsertBlocks.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak">
            <summary>
            Invisible break
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Invisible break
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.InvisibleBreak.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NestedBlock">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a nested block with no special formatting rules in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NestedBlock.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.GetMargins(System.Int32@,System.Int32@)">
            <summary>
            Gets margins for content.
            </summary>
            <param name="TopMargin">Top margin.</param>
            <param name="BottomMargin">Bottom margin.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NestedBlock.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NumberedItem">
            <summary>
            Represents a numbered item in an ordered list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents a numbered item in an ordered list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Number">Number associated with item.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Number">
            <summary>
            Number associated with item.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GetMargins(System.Int32@,System.Int32@)">
            <summary>
            Gets margins for content.
            </summary>
            <param name="TopMargin">Top margin.</param>
            <param name="BottomMargin">Bottom margin.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.NumberedList">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a numbered list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.NumberedList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.NumberedList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Paragraph">
            <summary>
            Represents a paragraph in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a paragraph in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Paragraph.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Paragraph.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Sections">
            <summary>
            Represents a sequence of sections.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a sequence of sections.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="InitialNrColumns">Number of columns in first section.</param>
            <param name="InitialRow">Initial section separator row, if provided, null otherwise.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Sections.InitialNrColumns">
            <summary>
            Number of columns for initial section.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Sections.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Sections.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.SectionSeparator">
            <summary>
            Section Separator
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,System.Int32,System.String)">
            <summary>
            Section Separator
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="SectionNr">Section number</param>
            <param name="NrColumns">Number of columns in following section.</param>
            <param name="Row">Markdown definition.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.SectionNr">
            <summary>
            Section number.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.NrColumns">
            <summary>
            Number of columns in following section.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.SectionSeparator.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.Table">
            <summary>
            Represents a table in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32,Waher.Content.Markdown.Model.MarkdownElement[][],Waher.Content.Markdown.Model.MarkdownElement[][],Waher.Content.Markdown.Model.TextAlignment[],System.String[],System.String,System.String)">
            <summary>
            Represents a table in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Columns">Columns in table.</param>
            <param name="Headers">Header rows.</param>
            <param name="Rows">Data rows.</param>
            <param name="Alignments">Column alignments.</param>
            <param name="AlignmentDefinitions">How the alignments where defined.</param>
            <param name="Caption">Table caption.</param>
            <param name="Id">Table ID.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Headers">
            <summary>
            Headers in table.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Rows">
            <summary>
            Rows in table.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Alignments">
            <summary>
            Table cell alignments.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Caption">
            <summary>
            Table caption.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.Id">
            <summary>
            ID of table.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.Table.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.Table.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.TaskItem">
            <summary>
            Represents a task item in a task list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Boolean,System.Int32,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents a task item in a task list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="IsChecked">If the item is checked or not.</param>
            <param name="CheckPosition">Position of the checkmark in the original markdown text document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.IsChecked">
            <summary>
            If the item is checked or not.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.CheckPosition">
            <summary>
            Position of the checkmark in the original markdown text document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GetMargins(System.Int32@,System.Int32@)">
            <summary>
            Gets margins for content.
            </summary>
            <param name="TopMargin">Top margin.</param>
            <param name="BottomMargin">Bottom margin.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.TaskList">
            <summary>
            Represents a task list in a markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Represents a task list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Represents a task list in a markdown document.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.TaskList.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.TaskList.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem">
            <summary>
            Represents an unnumbered item in an ordered list.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Represents an unnumbered item in an ordered list.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Prefix">Prefix, in plain text mode.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Prefix">
            <summary>
            Prefix, in plain text mode.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GetMargins(System.Int32@,System.Int32@)">
            <summary>
            Gets margins for content.
            </summary>
            <param name="TopMargin">Top margin.</param>
            <param name="BottomMargin">Bottom margin.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.BlockElements.UnnumberedItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.ICodeContent">
            <summary>
            Interface for all markdown handlers of code content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.Supports(System.String)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Language">Language.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.Model.ICodeContent.HandlesHTML">
            <summary>
            If HTML is handled.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.ICodeContent.HandlesPlainText">
            <summary>
            If Plain Text is handled.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.ICodeContent.HandlesXAML">
            <summary>
            If XAML is handled.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.GenerateHTML(System.Text.StringBuilder,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Indent">Additional indenting.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If content was rendered. If returning false, the default rendering of the code block will be performed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.GeneratePlainText(System.Text.StringBuilder,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Plain Text for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Indent">Additional indenting.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If content was rendered. If returning false, the default rendering of the code block will be performed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.ICodeContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,System.String[],System.String,System.Int32,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Rows">Code rows.</param>
            <param name="Language">Language used.</param>
            <param name="Indent">Additional indenting.</param>
            <param name="Document">Markdown document containing element.</param>
            <returns>If content was rendered. If returning false, the default rendering of the code block will be performed.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IEditableText">
            <summary>
            Interface for elements containing editable text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IEditableText.Atomize">
            <summary>
            Return an enumeration of the editable text as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IEditableText.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.IMultimediaContent">
            <summary>
            Interface for all markdown handlers of multimedia content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.GeneratePlainText(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Plain Text for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.IMultimediaContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElement">
            <summary>
            Abstract base class for all markdown elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Abstract base class for all markdown elements.
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.Document">
            <summary>
            Markdown document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.IsBlockElement">
            <summary>
            If the element is a block element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElement.BaselineAlignment">
            <summary>
            Baseline alignment
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GetMargins(System.Int32@,System.Int32@)">
            <summary>
            Gets margins for content.
            </summary>
            <param name="TopMargin">Top margin.</param>
            <param name="BottomMargin">Bottom margin.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.PrefixedBlock(System.Text.StringBuilder,Waher.Content.Markdown.Model.MarkdownElement,System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Output">Markdown will be output here.</param>
            <param name="Child">Child element.</param>
            <param name="Prefix">Block prefix</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.PrefixedBlock(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Output">Markdown will be output here.</param>
            <param name="Children">Child elements.</param>
            <param name="Prefix">Block prefix</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.PrefixedBlock(System.Text.StringBuilder,Waher.Content.Markdown.Model.MarkdownElement,System.String,System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Output">Markdown will be output here.</param>
            <param name="Child">Child element.</param>
            <param name="PrefixFirstRow">Prefix, for first row.</param>
            <param name="PrefixNextRows">Prefix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.PrefixedBlock(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Prefixes a block of markdown.
            </summary>
            <param name="Output">Markdown will be output here.</param>
            <param name="Children">Child elements.</param>
            <param name="PrefixFirstRow">Prefix, for first row.</param>
            <param name="PrefixNextRows">Prefix, for the rest of the rows, if any.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.AreEqual(System.Array,System.Array)">
            <summary>
            Checks if two typed arrays are equal
            </summary>
            <param name="Items1">First array</param>
            <param name="Items2">Second array</param>
            <returns>If arrays are equal</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.GetHashCode(System.Array)">
            <summary>
            Calculates a hash value on an array.
            </summary>
            <param name="Items">Array</param>
            <returns>Hash Code</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElement.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElementChildren">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Abstract base class for all markdown elements with a variable number of child elements.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Children">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.AddChildren(Waher.Content.Markdown.Model.MarkdownElement[])">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.AddChildren(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Adds children to the element.
            </summary>
            <param name="NewChildren">New children to add.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.FirstChild">
            <summary>
            First child, or null if none.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.LastChild">
            <summary>
            Last child, or null if none.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.HasOneChild">
            <summary>
            If the element has only one child.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.Children">
            <summary>
            Child elements.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementChildren.JoinOverParagraphs">
            <summary>
            If elements of this type should be joined over paragraphs.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="ElementName">Name of element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports the child elements to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementChildren.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MarkdownElementSingleChild">
            <summary>
            Abstract base class for all markdown elements with one child element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            Abstract base class for all markdown elements with one child element.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Child">Child element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Child">
            <summary>
            Child element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Create(Waher.Content.Markdown.Model.MarkdownElement,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Child"/>.
            </summary>
            <param name="Child">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.ForEach(Waher.Content.Markdown.MarkdownElementHandler,System.Object)">
            <summary>
            Loops through all child-elements for the element.
            </summary>
            <param name="Callback">Method called for each one of the elements.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If the operation was completed.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="ElementName">Name of element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.ExportChild(System.Xml.XmlWriter)">
            <summary>
            Exports the child element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MarkdownElementSingleChild.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MultimediaContent">
            <summary>
            Abstract base class for multimedia content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.GeneratePlainText(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Plain Text for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.MultimediaItem">
            <summary>
            Multimedia item.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Multimedia item.
            </summary>
            <param name="Doc">Markdown document.</param>
            <param name="Url">URL</param>
            <param name="Title">Title</param>
            <param name="Width">Width of media item, if available.</param>
            <param name="Height">Height of media item, if available.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Document">
            <summary>
            Markdown document
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Title">
            <summary>
            Optional title.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Width">
            <summary>
            Width of media item, if available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Height">
            <summary>
            Height of media item, if available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.Extension">
            <summary>
            Resource extension.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.MultimediaItem.ContentType">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.MultimediaItem.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.AudioContent">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.#ctor">
            <summary>
            Audio content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.AudioContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.ImageContent">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.#ctor">
            <summary>
            Image content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.ImageContent.GetTemporaryFile(System.Byte[])">
            <summary>
            Stores an image in binary form as a temporary file. Files will be deleted when application closes.
            </summary>
            <param name="BinaryImage">Binary image.</param>
            <returns>Temporary file name.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.MarkdownContent">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.#ctor">
            <summary>
            Markdown content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.GeneratePlainText(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Plain Text for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.MarkdownContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.TableOfContents">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.#ctor">
            <summary>
            Table of Contents.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.GeneratePlainText(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates Plain Text for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.TableOfContents.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.VideoContent">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.#ctor">
            <summary>
            Video content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.VideoContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.WebPageContent">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.#ctor">
            <summary>
            Web Page content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.WebPageContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.Multimedia.YouTubeContent">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.#ctor">
            <summary>
            YouTube content.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.Supports(Waher.Content.Markdown.Model.MultimediaItem)">
            <summary>
            Checks how well the handler supports multimedia content of a given type.
            </summary>
            <param name="Item">Multimedia item.</param>
            <returns>How well the handler supports the content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.EmbedInlineLink(System.String)">
            <summary>
            If the link provided should be embedded in a multi-media construct automatically.
            </summary>
            <param name="Url">Inline link.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.GenerateHTML(System.Text.StringBuilder,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.Multimedia.YouTubeContent.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,Waher.Content.Markdown.Model.MultimediaItem[],System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Items">Multimedia items.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Document">Markdown document containing element.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail">
            <summary>
            Automatic Link (e-Mail)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="EMail">Automatic e-Mail link.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.EMail">
            <summary>
            e-Mail
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkMail.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl">
            <summary>
            Automatic Link (URL)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="URL">Automatic URL link.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.URL">
            <summary>
            URL
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.AutomaticLinkUrl.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Delete">
            <summary>
            Deleted text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Deleted text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Delete.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Delete.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.DetailsReference">
            <summary>
            Details reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Meta-data reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.DetailsReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.DetailsReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.DetailsReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.EmojiReference">
            <summary>
            Represents an Emoji.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Emoji.EmojiInfo)">
            <summary>
            Represents an Emoji.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Emoji">Emoji reference.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Content.Emoji.EmojiInfo,System.Int32)">
            <summary>
            Represents an Emoji.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Emoji">Emoji reference.</param>
            <param name="Level">Level (number of colons used to define the emoji)</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Emoji">
            <summary>
            Emoji information.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Level">
            <summary>
            Level (number of colons used to define the emoji)
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.EmojiReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.EmojiReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Emphasize">
            <summary>
            Emphasized text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Emphasized text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Emphasize.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Emphasize.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.FootnoteReference">
            <summary>
            Footnote reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Footnote reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Key">
            <summary>
            Footnote key
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.FootnoteReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HashTag">
            <summary>
            Represents a hashtag.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Represents a hashtag.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Tag">Hashtag.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HashTag.Tag">
            <summary>
            Hashtag
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HashTag.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HashTag.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HtmlEntity">
            <summary>
            Represents an HTML entity.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Represents an HTML entity.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Entity">HTML Entity.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Entity">
            <summary>
            HTML Entity
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode">
            <summary>
            Represents an HTML entity in Unicode format.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Int32)">
            <summary>
            Represents an HTML entity in Unicode format.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Code">HTML Entity.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Code">
            <summary>
            Unicode character
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.HtmlEntityUnicode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineCode">
            <summary>
            Inline source code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline source code.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Code">Inline Code.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineCode.Code">
            <summary>
            Inline code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineCode.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Atomize">
            <summary>
            Return an enumeration of the editable code as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineCode.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineHTML">
            <summary>
            Inline HTML.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Inline HTML.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="HTML">Inline HTML.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineHTML.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineHTML.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Atomize">
            <summary>
            Return an enumeration of the editable HTML as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineHTML.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineScript">
            <summary>
            Inline source code.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.#ctor(Waher.Content.Markdown.MarkdownDocument,Waher.Script.Expression,Waher.Script.Variables,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Inline source code.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Expression">Expression.</param>
            <param name="Variables">Collection of variables to use when executing the script.</param>
            <param name="AloneInParagraph">If construct stands alone in a paragraph.</param>
            <param name="StartPosition">Starting position of script.</param>
            <param name="EndPosition">Ending position of script.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.Expresion">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.StartPosition">
            <summary>
            Starting position of script in markdown document.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.EndPosition">
            <summary>
            Ending position of script in markdown document.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GenerateHTML(System.Object,System.Text.StringBuilder,System.Boolean,Waher.Script.Variables)">
            <summary>
            Generates HTML from Script output.
            </summary>
            <param name="Result">Script output.</param>
            <param name="Output">HTML output.</param>
            <param name="AloneInParagraph">If the script output is to be presented alone in a paragraph.</param>
            <param name="Variables">Current variables.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineScript.BaselineAlignment">
            <summary>
            Baseline alignment
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineScript.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.InlineText">
            <summary>
            Unformatted text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Unformatted text.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Value">Inline text.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineText.Value">
            <summary>
            Unformatted text.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.InlineText.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Atomize">
            <summary>
            Return an enumeration of the editable text as atoms.
            </summary>
            <returns>Atoms.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.InlineText.Assemble(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Assembles a markdown element from a sequence of atoms.
            </summary>
            <param name="Document">Document that will contain the new element.</param>
            <param name="Text">Assembled text.</param>
            <returns>Assembled markdown element.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Insert">
            <summary>
            Inserted text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Inserted text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Insert.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Insert.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.LineBreak">
            <summary>
            Line break
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.#ctor(Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Line break
            </summary>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LineBreak.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LineBreak.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.String)">
            <summary>
            Link
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Url">URL</param>
            <param name="Title">Optional title.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.Title">
            <summary>
            Optional Link title.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GenerateHTML(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates HTML for a link.
            </summary>
            <param name="Output">HTML will be output here.</param>
            <param name="Url">URL</param>
            <param name="Title">Optional title.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment,System.String,System.String,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Generates XAML for a link.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
            <param name="Url">URL</param>
            <param name="Title">Optional title.</param>
            <param name="ChildNodes">Child nodes.</param>
            <param name="Document">Markdown document.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Link.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Link.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.LinkReference">
            <summary>
            Link reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.String)">
            <summary>
            Link reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Label">Link label.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LinkReference.Label">
            <summary>
            Link label
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.LinkReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.LinkReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.MetaReference">
            <summary>
            Meta-data reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Meta-data reference
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Key">Meta-data key.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MetaReference.Key">
            <summary>
            Meta-data key
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MetaReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MetaReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Multimedia">
            <summary>
            Multimedia
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},System.Boolean,Waher.Content.Markdown.Model.MultimediaItem[])">
            <summary>
            Multimedia
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
            <param name="Items">Multimedia items.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.Items">
            <summary>
            Multimedia items.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.MultimediaHandler">
            <summary>
            Multimedia handler.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetMultimediaHandler(System.String[])">
            <summary>
            Gets the best multimedia handler for a set of URLs or file names.
            </summary>
            <param name="URLs">Set of URLs, or file names.</param>
            <returns>Best multimedia handler.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetMultimediaHandler(Waher.Content.Markdown.Model.MultimediaItem[])">
            <summary>
            Gets the best multimedia handler for a set of multimedia items.
            </summary>
            <param name="Items">Set of multimedia items.</param>
            <returns>Best multimedia handler.</returns>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.Handlers">
            <summary>
            Multimedia handlers.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Multimedia.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.SameMetaData(Waher.Content.Markdown.Model.MarkdownElement)">
            <summary>
            If the current object has same meta-data as <paramref name="E"/>
            (but not necessarily same content).
            </summary>
            <param name="E">Element to compare to.</param>
            <returns>If same meta-data as <paramref name="E"/>.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Multimedia.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.MultimediaReference">
            <summary>
            Multimedia reference
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.LinkedList{Waher.Content.Markdown.Model.MarkdownElement},System.String,System.Boolean)">
            <summary>
            Multimedia reference.
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
            <param name="Label">Multimedia label.</param>
            <param name="AloneInParagraph">If the element is alone in a paragraph.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.AloneInParagraph">
            <summary>
            If the element is alone in a paragraph.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.OutsideParagraph">
            <summary>
            If element, parsed as a span element, can stand outside of a paragraph if alone in it.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.MultimediaReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.StrikeThrough">
            <summary>
            Strike Through text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Strike Through text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.StrikeThrough.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Strong">
            <summary>
            Strong text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Strong text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Strong.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Strong.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.SubScript">
            <summary>
            Sub-script text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Sub-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Sub-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Text">Subscript text.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.SubScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SubScript.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.SuperScript">
            <summary>
            Super-script text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Super-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.#ctor(Waher.Content.Markdown.MarkdownDocument,System.String)">
            <summary>
            Super-script text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="Text">Superscript text.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.GeneratePlainText(System.Text.StringBuilder)">
            <summary>
            Generates plain text for the markdown element.
            </summary>
            <param name="Output">Plain text will be output here.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.SuperScript.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.SuperScript.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.SpanElements.Underline">
            <summary>
            Underlined text
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.#ctor(Waher.Content.Markdown.MarkdownDocument,System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement})">
            <summary>
            Underlined text
            </summary>
            <param name="Document">Markdown document.</param>
            <param name="ChildElements">Child elements.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.GenerateMarkdown(System.Text.StringBuilder)">
            <summary>
            Generates Markdown for the markdown element.
            </summary>
            <param name="Output">Markdown will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.GenerateHTML(System.Text.StringBuilder)">
            <summary>
            Generates HTML for the markdown element.
            </summary>
            <param name="Output">HTML will be output here.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.GenerateXAML(System.Xml.XmlWriter,Waher.Content.Markdown.Model.TextAlignment)">
            <summary>
            Generates XAML for the markdown element.
            </summary>
            <param name="Output">XAML will be output here.</param>
            <param name="TextAlignment">Alignment of text in element.</param>
        </member>
        <member name="P:Waher.Content.Markdown.Model.SpanElements.Underline.InlineSpanElement">
            <summary>
            If the element is an inline span element.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Markdown.Model.SpanElements.Underline.Create(System.Collections.Generic.IEnumerable{Waher.Content.Markdown.Model.MarkdownElement},Waher.Content.Markdown.MarkdownDocument)">
            <summary>
            Creates an object of the same type, and meta-data, as the current object,
            but with content defined by <paramref name="Children"/>.
            </summary>
            <param name="Children">New content.</param>
            <param name="Document">Document that will contain the element.</param>
            <returns>Object of same type and meta-data, but with new content.</returns>
        </member>
        <member name="T:Waher.Content.Markdown.Model.TextAlignment">
            <summary>
            Text alignment of contents.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Waher.Content.Markdown.Model.TextAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:Waher.Content.Markdown.XamlSettings">
            <summary>
            Contains settings that the XAML export uses to customize XAML output.
            </summary>
        </member>
        <member name="M:Waher.Content.Markdown.XamlSettings.#ctor">
            <summary>
            Contains settings that the XAML export uses to customize XAML output.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ParagraphMargins">
            <summary>
            Paragraph margins.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ParagraphMarginLeft">
            <summary>
            Left margin for paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ParagraphMarginTop">
            <summary>
            Top margin for paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ParagraphMarginRight">
            <summary>
            Right margin for paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ParagraphMarginBottom">
            <summary>
            Bottom margin for paragraphs.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.BlockQuoteBorderColor">
            <summary>
            Block Quote border color.
            
            NOTE: Property is a string, to allow generation of XAML where access to WPF libraries is not available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.BlockQuoteBorderThickness">
            <summary>
            Block Quote border thickness
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.BlockQuoteMargin">
            <summary>
            Block Quote margin (from outside left margin to border)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.BlockQuotePadding">
            <summary>
            Block Quote padding (from border to inside left margin)
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.InsertedBlockQuoteBorderColor">
            <summary>
            Inserted Block Quote border color.
            
            NOTE: Property is a string, to allow generation of XAML where access to WPF libraries is not available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.DeletedBlockQuoteBorderColor">
            <summary>
            Deleted Block Quote border color.
            
            NOTE: Property is a string, to allow generation of XAML where access to WPF libraries is not available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.HeaderFontSize">
            <summary>
            Header font sizes for different levels. Index corresponds to header level - 1.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.HeaderForegroundColor">
            <summary>
            Header foreground colors for different levels. Index corresponds to header level - 1.
            
            NOTE: Property is an array of strings, to allow generation of XAML where access to WPF libraries is not available.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.ListContentMargin">
            <summary>
            Margin between list item bullet and list item content.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellPadding">
            <summary>
            TableCell padding.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellPaddingLeft">
            <summary>
            Left padding for table cells.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellPaddingTop">
            <summary>
            Top padding for table cells.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellPaddingRight">
            <summary>
            Right padding for table cells.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellPaddingBottom">
            <summary>
            Bottom padding for table cells.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellBorderColor">
            <summary>
            Table cell border color.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellBorderThickness">
            <summary>
            Table cell border thickness.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellRowBackgroundColor1">
            <summary>
            Optional background color for tables, odd row numbers.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.TableCellRowBackgroundColor2">
            <summary>
            Optional background color for tables, even row numbers.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.DefinitionSeparator">
            <summary>
            Distance between definitions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.DefinitionMargin">
            <summary>
            Left margin for definitions.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.SuperscriptScale">
            <summary>
            Superscript scaling, compared to the normal font size.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.SuperscriptOffset">
            <summary>
            Superscript vertical offset.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.FootnoteSeparator">
            <summary>
            Space between footnote and text in the footnote section.
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.DefaultGraphWidth">
            <summary>
            Default graph width
            </summary>
        </member>
        <member name="P:Waher.Content.Markdown.XamlSettings.DefaultGraphHeight">
            <summary>
            Default graph height
            </summary>
        </member>
    </members>
</doc>
