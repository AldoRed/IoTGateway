<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Content.Xml</name>
    </assembly>
    <members>
        <member name="T:Waher.Content.Xml.Text.XmlCodec">
            <summary>
            XML encoder/decoder.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.#ctor">
            <summary>
            XML encoder/decoder.
            </summary>
        </member>
        <member name="F:Waher.Content.Xml.Text.XmlCodec.XmlContentTypes">
            <summary>
            XML content types.
            </summary>
        </member>
        <member name="F:Waher.Content.Xml.Text.XmlCodec.XmlFileExtensions">
            <summary>
            XML file extensions.
            </summary>
        </member>
        <member name="P:Waher.Content.Xml.Text.XmlCodec.ContentTypes">
            <summary>
            Supported content types.
            </summary>
        </member>
        <member name="P:Waher.Content.Xml.Text.XmlCodec.FileExtensions">
            <summary>
            Supported file extensions.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.Decodes(System.String,Waher.Runtime.Inventory.Grade@)">
            <summary>
            If the decoder decodes an object with a given content type.
            </summary>
            <param name="ContentType">Content type to decode.</param>
            <param name="Grade">How well the decoder decodes the object.</param>
            <returns>If the decoder can decode an object with the given type.</returns>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.DecodeAsync(System.String,System.Byte[],System.Text.Encoding,System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Uri)">
            <summary>
            Decodes an object.
            </summary>
            <param name="ContentType">Internet Content Type.</param>
            <param name="Data">Encoded object.</param>
            <param name="Encoding">Any encoding specified. Can be null if no encoding specified.</param>
            <param name="Fields">Any content-type related fields and their corresponding values.</param>
            <param name="BaseUri">Base URI, if any. If not available, value is null.</param>
            <returns>Decoded object.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be decoded.</exception>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.TryGetContentType(System.String,System.String@)">
            <summary>
            Tries to get the content type of an item, given its file extension.
            </summary>
            <param name="FileExtension">File extension.</param>
            <param name="ContentType">Content type.</param>
            <returns>If the extension was recognized.</returns>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.TryGetFileExtension(System.String,System.String@)">
            <summary>
            Tries to get the file extension of an item, given its Content-Type.
            </summary>
            <param name="ContentType">Content type.</param>
            <param name="FileExtension">File extension.</param>
            <returns>If the Content-Type was recognized.</returns>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.Encodes(System.Object,Waher.Runtime.Inventory.Grade@,System.String[])">
            <summary>
            If the encoder encodes a given object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Grade">How well the encoder encodes the object.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>If the encoder can encode the given object.</returns>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlCodec.EncodeAsync(System.Object,System.Text.Encoding,System.String[])">
            <summary>
            Encodes an object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Encoding">Desired encoding of text. Can be null if no desired encoding is speified.</param>
            <param name="AcceptedContentTypes">Optional array of accepted content types. If array is empty, all content types are accepted.</param>
            <returns>Encoded object, as well as Content Type of encoding. Includes information about any text encodings used.</returns>
            <exception cref="T:System.ArgumentException">If the object cannot be encoded.</exception>
        </member>
        <member name="T:Waher.Content.Xml.Text.XmlDocumentJsonEncoder">
            <summary>
            Encodes an XML Document as a JSON object.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlDocumentJsonEncoder.#ctor">
            <summary>
            Encodes an XML Document as a JSON object.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlDocumentJsonEncoder.Encode(System.Object,System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes the <paramref name="Object"/> to JSON.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Indent">Any indentation to apply.</param>
            <param name="Json">JSON output.</param>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlDocumentJsonEncoder.Supports(System.Type)">
            <summary>
            How well the JSON encoder encodes objects of type <paramref name="ObjectType"/>.
            </summary>
            <param name="ObjectType">Type of object to encode.</param>
            <returns>How well objects of the given type are encoded.</returns>
        </member>
        <member name="T:Waher.Content.Xml.Text.XmlElementJsonEncoder">
            <summary>
            Encodes an XML Element as a JSON object.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlElementJsonEncoder.#ctor">
            <summary>
            Encodes an XML Element as a JSON object.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlElementJsonEncoder.Encode(System.Object,System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes the <paramref name="Object"/> to JSON.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="Indent">Any indentation to apply.</param>
            <param name="Json">JSON output.</param>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlElementJsonEncoder.Encode(System.Xml.XmlElement,System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes an <see cref="T:System.Xml.XmlElement"/> to JSON.
            </summary>
            <param name="Xml">XML to encode.</param>
            <param name="Indent">Any indentation to apply.</param>
            <param name="Json">JSON output.</param>
        </member>
        <member name="M:Waher.Content.Xml.Text.XmlElementJsonEncoder.Supports(System.Type)">
            <summary>
            How well the JSON encoder encodes objects of type <paramref name="ObjectType"/>.
            </summary>
            <param name="ObjectType">Type of object to encode.</param>
            <returns>How well objects of the given type are encoded.</returns>
        </member>
        <member name="T:Waher.Content.Xml.XML">
            <summary>
            Helps with common XML-related tasks.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(System.String)">
            <summary>
            Encodes a string for use in XML.
            </summary>
            <param name="s">String</param>
            <returns>XML-encoded string.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.HtmlAttributeEncode(System.String)">
            <summary>
            Differs from <see cref="M:Waher.Content.Xml.XML.Encode(System.String)"/>, in that it does not encode the aposotrophe.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.HtmlValueEncode(System.String)">
            <summary>
            Differs from <see cref="M:Waher.Content.Xml.XML.Encode(System.String)"/>, in that it does not encode the aposotrophe or the quote.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(System.DateTime)">
            <summary>
            Encodes a <see cref="T:System.DateTime"/> for use in XML.
            </summary>
            <param name="DT">Value to encode.</param>
            <returns>XML-encoded value.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(System.DateTime,System.Boolean)">
            <summary>
            Encodes a <see cref="T:System.DateTime"/> for use in XML.
            </summary>
            <param name="DT">Value to encode.</param>
            <param name="DateOnly">If only the date should be encoded (true), or both date and time (false).</param>
            <returns>XML-encoded value.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(System.DateTimeOffset)">
            <summary>
            Encodes a <see cref="T:System.DateTimeOffset"/> for use in XML.
            </summary>
            <param name="DTO">Value to encode.</param>
            <returns>XML-encoded value.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(Waher.Content.NamedDictionary{System.String,System.Object})">
            <summary>
            Encodes a named dictionary as XML.
            </summary>
            <param name="Object">Object.</param>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(Waher.Content.NamedDictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            Encodes a named dictionary as XML.
            </summary>
            <param name="Object">Object.</param>
            <param name="Indent">If XML should be indented.</param>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(Waher.Content.NamedDictionary{System.String,System.Object},System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes a named dictionary as XML.
            </summary>
            <param name="Object">Object.</param>
            <param name="Indent">If XML should be indented.</param>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Xml.XML.Encode(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.String,System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes a named dictionary as XML.
            </summary>
            <param name="Object">Object.</param>
            <param name="LocalName">Local Name of XML Element to encode the object.</param>
            <param name="Namespace">Namespace of XML Element to encode the object.</param>
            <param name="Indent">If XML should be indented.</param>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Content.Xml.XML.EncodeAttribute(System.String,System.Object,System.Text.StringBuilder)">
            <summary>
            Encodes a property as an XML attribute.
            </summary>
            <param name="Key">Parameter key.</param>
            <param name="Value">Parameter value.</param>
            <param name="Xml">XML Output.</param>
            <returns>If value was encoded.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.EncodeChildElement(System.String,System.Object,System.Nullable{System.Int32},System.Text.StringBuilder)">
            <summary>
            Encodes a property as an XML attribute.
            </summary>
            <param name="Key">Parameter key.</param>
            <param name="Value">Parameter value.</param>
            <param name="Indent">If XML should be indented.</param>
            <param name="Xml">XML Output.</param>
            <returns>If value was encoded.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.DecodeString(System.String)">
            <summary>
            Decodes a string used in XML.
            </summary>
            <param name="s">String</param>
            <returns>XML-decoded string.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.TryParse(System.String,System.DateTime@)">
            <summary>
            Tries to decode a string encoded DateTime.
            </summary>
            <param name="s">Encoded value.</param>
            <param name="Value">Decoded value.</param>
            <returns>If the value could be decoded.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.TryParse(System.String,System.DateTimeOffset@)">
            <summary>
            Tries to decode a string encoded DateTimeOffset.
            </summary>
            <param name="s">Encoded value.</param>
            <param name="Value">Decoded value.</param>
            <returns>If the value could be decoded.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <returns>Value of attribute, if found, or the empty string, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Int64)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Double)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Decimal)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.DateTime)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.DateTimeOffset)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.Enum)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute``1(System.Xml.XmlElement,System.String,``0)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,Waher.Content.Duration)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.Attribute(System.Xml.XmlElement,System.String,System.TimeSpan)">
            <summary>
            Gets the value of an XML attribute.
            </summary>
            <param name="E">XML Element</param>
            <param name="Name">Name of attribute</param>
            <param name="DefaultValue">Default value.</param>
            <returns>Value of attribute, if found, or the default value, if not found.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.WriterSettings(System.Boolean,System.Boolean)">
            <summary>
            Gets an XML writer settings object.
            </summary>
            <param name="Indent">If output should be indented.</param>
            <param name="OmitXmlDeclaration">If the XML declaration should be omitted.</param>
            <returns>Settings object.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <param name="CDATA">If CDATA sections are allowed. (Default=true)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <param name="CDATA">If CDATA sections are allowed. (Default=true)</param>
            <param name="Empty">If empty XML (or an empty string) is acceptable. (Default=false)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <param name="CDATA">If CDATA sections are allowed. (Default=true)</param>
            <param name="Empty">If empty XML (or an empty string) is acceptable. (Default=false)</param>
            <param name="Fragment">If XML fragments are allowed. (Default=false)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <param name="CDATA">If CDATA sections are allowed. (Default=true)</param>
            <param name="Empty">If empty XML (or an empty string) is acceptable. (Default=false)</param>
            <param name="Fragment">If XML fragments are allowed. (Default=false)</param>
            <param name="ProcessingInstructions">If processing instructions are allowed. (Default=false)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.IsValidXml(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks if a string is valid XML
            </summary>
            <param name="Xml">String with possible XML.</param>
            <param name="Comments">If comments are allowed. (Default=true)</param>
            <param name="CDATA">If CDATA sections are allowed. (Default=true)</param>
            <param name="Empty">If empty XML (or an empty string) is acceptable. (Default=false)</param>
            <param name="Fragment">If XML fragments are allowed. (Default=false)</param>
            <param name="ProcessingInstructions">If processing instructions are allowed. (Default=false)</param>
            <param name="DTD">If DTD processing is allowed. (Default=false)</param>
            <returns>If <paramref name="Xml"/> is valid XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.NormalizeXml(System.Xml.XmlNodeList)">
            <summary>
            Normalizes a list of XML nodes.
            </summary>
            <param name="Xml">XML to normalize</param>
            <returns>Normalized XML</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.NormalizeXml(System.Xml.XmlNodeList,System.Boolean)">
            <summary>
            Normalizes a list of XML nodes.
            </summary>
            <param name="Xml">XML to normalize</param>
            <param name="IsElementContents">If Node List is contents of element.</param>
            <returns>Normalized XML</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.NormalizeXml(System.Xml.XmlElement)">
            <summary>
            Normalizes an XML element.
            </summary>
            <param name="Xml">XML to normalize</param>
            <returns>Normalized XML</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.NormalizeXml(System.Xml.XmlNodeList,System.Boolean,System.String,Waher.Content.Xml.XmlNormalizationState)">
            <summary>
            Normalizes a list of XML nodes.
            </summary>
            <param name="Xml">XML to normalize</param>
            <param name="IsElementContents">If Node List is contents of element.</param>
            <param name="CurrentNamespace">Namespace at the encapsulating entity.</param>
            <param name="State">Normalization State</param>
            <returns>If content was output</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.NormalizeXml(System.Xml.XmlElement,System.String,Waher.Content.Xml.XmlNormalizationState)">
            <summary>
            Normalizes an XML element.
            </summary>
            <param name="Xml">XML element to normalize</param>
            <param name="CurrentNamespace">Namespace at the encapsulating entity.</param>
            <param name="State">Normalization State</param>
        </member>
        <member name="M:Waher.Content.Xml.XML.PrettyXml(System.String)">
            <summary>
            Reformats XML to make it easier to read.
            </summary>
            <param name="Xml">XML</param>
            <returns>Reformatted XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XML.PrettyXml(System.Xml.XmlNode)">
            <summary>
            Reformats XML to make it easier to read.
            </summary>
            <param name="Xml">XML</param>
            <returns>Reformatted XML.</returns>
        </member>
        <member name="T:Waher.Content.Xml.XmlNormalizationState">
            <summary>
            Current state of XML normalization process.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.#ctor">
            <summary>
            Current state of XML normalization process.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.Append(System.String)">
            <summary>
            Appends a string to the output.
            </summary>
            <param name="s">String to append.</param>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.Append(System.Char)">
            <summary>
            Appends a character to the output.
            </summary>
            <param name="ch">Character to append.</param>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.ToString">
            <summary>
            XML output.
            </summary>
            <returns>Normalized XML.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.RegisterPrefix(System.String,System.String)">
            <summary>
            Registers prefix for element.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
            <returns>If prefix was new.</returns>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.PushPrefixes">
            <summary>
            Pushes current prefix state to the stack.
            </summary>
        </member>
        <member name="M:Waher.Content.Xml.XmlNormalizationState.PopPrefixes">
            <summary>
            Pops previous prefix state from the stack.
            </summary>
        </member>
    </members>
</doc>
