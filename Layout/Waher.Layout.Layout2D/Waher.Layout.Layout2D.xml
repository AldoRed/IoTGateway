<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Layout.Layout2D</name>
    </assembly>
    <members>
        <member name="T:Waher.Layout.Layout2D.Events.UpdatedEventHandler">
            <summary>
            Delegate for Updated event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Events.UpdatedEventArgs">
            <summary>
            Event raised when the layout model has been updated internally.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Events.UpdatedEventArgs.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Event raised when the layout model has been updated internally.
            </summary>
            <param name="Document">Document that has been updated.</param>
            <param name="Element">Layout element that has been updated.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Events.UpdatedEventArgs.Document">
            <summary>
            Document that has been updated.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Events.UpdatedEventArgs.Element">
            <summary>
            Layout element that has been updated.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Exceptions.LayoutException">
            <summary>
            Base class for all layout-related exceptions.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Exceptions.LayoutException.#ctor(System.String)">
            <summary>
            Base class for all layout-related exceptions.
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Exceptions.LayoutSyntaxException">
            <summary>
            Syntax-related layout exception
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Exceptions.LayoutSyntaxException.#ctor(System.String)">
            <summary>
            Syntax-related layout exception
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Layout2DDocument">
            <summary>
            Contains a 2D layout document.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Layout2DDocument.LocalName">
            <summary>
            Layout2D
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Layout2DDocument.Namespace">
            <summary>
            http://waher.se/Layout/Layout2D.xsd
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.#ctor(System.Xml.XmlDocument,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Contains a 2D layout document.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.#ctor(System.Xml.XmlDocument,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Contains a 2D layout document.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Session">Session variables</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.#ctor(System.Xml.XmlElement,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Contains a 2D layout document.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.#ctor(System.Xml.XmlElement,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Contains a 2D layout document.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Session">Session variables</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromFile(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a file.
            </summary>
            <param name="FileName">File name.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromFile(System.String,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a file.
            </summary>
            <param name="FileName">File name.</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromFile(System.String,System.Boolean,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a file.
            </summary>
            <param name="FileName">File name.</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Session">Session variables.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromStream(System.IO.Stream,System.Text.Encoding,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a stream.
            </summary>
            <param name="Input">Stream input.</param>
            <param name="DefaultEncoding">Default text encoding to use, if not deduced from a Byte-Order-Mark (BOM) of the file.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromStream(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a stream.
            </summary>
            <param name="Input">Stream input.</param>
            <param name="DefaultEncoding">Default text encoding to use, if not deduced from a Byte-Order-Mark (BOM) of the file.</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromStream(System.IO.Stream,System.Text.Encoding,System.Boolean,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Loads a 2D layout document from a stream.
            </summary>
            <param name="Input">Stream input.</param>
            <param name="DefaultEncoding">Default text encoding to use, if not deduced from a Byte-Order-Mark (BOM) of the file.</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Session">Session variables.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.String,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.String,System.Boolean,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Preprocess">If embedded script should be preprocessed.</param>
            <param name="Session">Session variables.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.Xml.XmlDocument,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.Xml.XmlDocument,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Session">Session variables.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.Xml.XmlElement,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.FromXml(System.Xml.XmlElement,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Parses a 2D layout document from its XML definition.
            </summary>
            <param name="Xml">XML Definition</param>
            <param name="Session">Session variables.</param>
            <param name="Attachments">Any attachments referenced from the layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.Render(Waher.Layout.Layout2D.RenderSettings,Waher.Layout.Layout2D.Map[]@)">
            <summary>
            Renders the layout to an image
            </summary>
            <param name="Settings">Rendering settings.</param>
            <param name="Maps">Generated maps</param>
            <returns></returns>
        </member>
        <member name="E:Waher.Layout.Layout2D.Layout2DDocument.OnUpdated">
            <summary>
            Event raised when the internal state of the layout has been updated.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.RaiseUpdated(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Raises the <see cref="E:Waher.Layout.Layout2D.Layout2DDocument.OnUpdated"/> event.
            </summary>
            <param name="Element">Element being updated.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.TryGetContent(System.String,System.Object@)">
            <summary>
            Tries to get content from attached content.
            </summary>
            <param name="ContentId">Content ID</param>
            <param name="Content">Content, if found, null otherwise.</param>
            <returns>If attached content was found with the given content ID.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.DisposeContent(System.String)">
            <summary>
            Disposes of attached content, given its ID.
            </summary>
            <param name="ContentId">Content ID</param>
            <returns>If content with the corresponding ID was found and disposed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.AddContent(System.Object)">
            <summary>
            Adds content to the layout.
            </summary>
            <param name="Content">Content</param>
            <returns>Content ID of newly added content</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.AddContent(System.String,System.Object)">
            <summary>
            Adds content to the layout.
            </summary>
            <param name="ContentId">Content ID</param>
            <param name="Content">Content</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.AddElementId(System.String,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds an element with an ID
            </summary>
            <param name="Id">Element ID</param>
            <param name="Element">Element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.TryGetElement(System.String,Waher.Layout.Layout2D.Model.ILayoutElement@)">
            <summary>
            Tries to get a layout element, given an ID reference
            </summary>
            <param name="Id">Layout ID</param>
            <param name="Element">Element retrieved, if found.</param>
            <returns>If an element with the corresponding ID was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Layout2DDocument.ClearElementIds">
            <summary>
            Clears registered elements with IDs.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Map">
            <summary>
            Contains information about an actionable area in a generated image.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Angle">
            <summary>
            Abstract base class for angle elements.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Angle.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for distance elements.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Angle.DegreesAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Angle.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Angle.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Angle.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Angle.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Angle.angle">
            <summary>
            Measured distance
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.Attribute`1">
            <summary>
            Manages an attribute value or expression.
            </summary>
            <typeparam name="T">Type of attribute</typeparam>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.#ctor(System.String,`0)">
            <summary>
            Manages an attribute value or expression.
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Manages an attribute value or expression.
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
            <param name="CanEmbedScript">If script can be embedded.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Defines an undefined attribute.
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.Name">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.PresetValue">
            <summary>
            Preset Value of attribute.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.Expression">
            <summary>
            Expression returning the value of the attribute.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.HasPresetValue">
            <summary>
            If the attribute has a preset value.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.HasExpression">
            <summary>
            If the attribute is defined by an expression.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.Undefined">
            <summary>
            If the attribute is undefined.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.ToString(`0)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the attribute.
            </summary>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.TryEvaluate(Waher.Script.Variables,`0@)">
            <summary>
            Tries to evaluate the attribute value.
            </summary>
            <param name="Session">Current session.</param>
            <param name="Result">Result, if successful.</param>
            <returns>If evaluation was possible.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.Attribute`1.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute">
            <summary>
            Boolean attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Boolean attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Boolean attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Boolean attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.TryParse(System.String,System.Boolean@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.ToString(System.Boolean)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.BooleanAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute">
            <summary>
            Color attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.#ctor(System.String,SkiaSharp.SKColor)">
            <summary>
            Color attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Color attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Color attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.TryParse(System.String,SkiaSharp.SKColor@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.ToString(SkiaSharp.SKColor)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ColorAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1">
            <summary>
            Enumeration attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.#ctor(System.String,`0)">
            <summary>
            Enumeration attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Enumeration attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Enumeration attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.ToString(`0)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.EnumAttribute`1.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute">
            <summary>
            Expression attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Expression attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Expression attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.TryParse(System.String,Waher.Script.Expression@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.ToString(Waher.Script.Expression)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the expression defined by the attribute.
            </summary>
            <param name="Session">Session variables.</param>
            <returns>
            Result of the expression, 
            or <see cref="T:System.Exception"/> object if expression throws an exception, 
            or null if no expression is defined.
            </returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.EvaluateElement(Waher.Script.Variables)">
            <summary>
            Evaluates the expression defined by the attribute.
            </summary>
            <param name="Session">Session variables.</param>
            <returns>
            Result of the expression, 
            or <see cref="T:System.Exception"/> object if expression throws an exception, 
            or null if no expression is defined.
            </returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.ExpressionAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute">
            <summary>
            Floating point (Single) attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.#ctor(System.String,System.Single)">
            <summary>
            Floating point (Single) attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Floating point (Single) attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Floating point (Single) attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.TryParse(System.String,System.Single@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.ToString(System.Single)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.FloatAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute">
            <summary>
            Length attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.#ctor(System.String,Waher.Layout.Layout2D.Model.Length)">
            <summary>
            Length attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Length attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Length attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.TryParse(System.String,Waher.Layout.Layout2D.Model.Length@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.ToString(Waher.Layout.Layout2D.Model.Length)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.LengthAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute">
            <summary>
            Positive integer attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Positive integer attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Positive integer attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            Positive integer attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.TryParse(System.String,System.Int32@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.ToString(System.Int32)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.PositiveIntegerAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Attributes.StringAttribute">
            <summary>
            String attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.#ctor(System.String,System.String)">
            <summary>
            String attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Value">Attribute value.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            String attribute
            </summary>
            <param name="E">XML Element</param>
            <param name="AttributeName">Attribute name.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.#ctor(System.String,Waher.Script.Expression)">
            <summary>
            String attribute
            </summary>
            <param name="AttributeName">Attribute name.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.TryParse(System.String,System.String@)">
            <summary>
            Tries to parse a string value
            </summary>
            <param name="StringValue">String value for attribute.</param>
            <param name="Value">Parsed value, if successful.</param>
            <returns>If the value could be parsed.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.ToString(System.String)">
            <summary>
            Converts a value to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Attributes.StringAttribute.CopyIfNotPreset">
            <summary>
            Copies the attribute object if undefined, or defined by an expression.
            Returns a reference to itself, if preset (set by a constant value).
            </summary>
            <returns>Attribute reference.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Backgrounds.Background">
            <summary>
            Abstract base class for backgrounds.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Backgrounds.Background.paint">
            <summary>
            Current background
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Background.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for backgrounds.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Background.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Background.Paint">
            <summary>
            Current pen
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground">
            <summary>
            A solid background
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A solid background
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.ColorAttribute">
            <summary>
            Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.SolidBackground.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D">
            <summary>
            Root node for two-dimensional layouts
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Root node for two-dimensional layouts
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.FontIdAttribute">
            <summary>
            Font ID
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.PenIdAttribute">
            <summary>
            Pen ID
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.BackgroundIdAttribute">
            <summary>
            Background ID
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.TextColorAttribute">
            <summary>
            Text Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Backgrounds.Layout2D.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.Case">
            <summary>
            Layout to show, if a condition is true.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Case.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Layout to show, if a condition is true.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.Case.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.Case.ConditionAttribute">
            <summary>
            Condition of case statement
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Case.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Case.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Case.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Case.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.False">
            <summary>
            Layout to show, if false.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.False.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Layout to show, if false.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.False.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.False.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.For">
            <summary>
            Generates layout elements by iterating through a traditional loop
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Generates layout elements by iterating through a traditional loop
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.FromAttribute">
            <summary>
            From
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.ToAttribute">
            <summary>
            To
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.StepAttribute">
            <summary>
            Step
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.VariableAttribute">
            <summary>
            Variable
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.For.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.For.MeasureChildrenDimensions">
            <summary>
            If children dimensions are to be measured.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.ForEach">
            <summary>
            Generates layout elements by looping through a set or vector of values.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Generates layout elements by looping through a set or vector of values.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.ForEach.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.ForEach.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.ForEach.ExpressionAttribute">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.ForEach.VariableAttribute">
            <summary>
            Variable
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.ForEach.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.ForEach.MeasureChildrenDimensions">
            <summary>
            If children dimensions are to be measured.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.If">
            <summary>
            Conditional layout based on one conditional statement.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Conditional layout based on one conditional statement.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.If.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.If.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.If.ConditionAttribute">
            <summary>
            Condition
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.If.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.Otherwise">
            <summary>
            Layout to show, if none of the cases apply.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Otherwise.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Layout to show, if none of the cases apply.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.Otherwise.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Otherwise.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.Switch">
            <summary>
            Conditional layout based on multiple conditional statements.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Conditional layout based on multiple conditional statements.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.Switch.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.Switch.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.Switch.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.True">
            <summary>
            Layout to show, if true.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.True.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Layout to show, if true.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.True.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.True.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Conditional.While">
            <summary>
            Generates layout elements while a condition is true.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Generates layout elements while a condition is true.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.While.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.While.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.While.ExpressionAttribute">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.While.TestAfterAttribute">
            <summary>
            Test After attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Conditional.While.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Conditional.While.MeasureChildrenDimensions">
            <summary>
            If children dimensions are to be measured.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Bold">
            <summary>
            Represents a segment of bold text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Bold.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of bold text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Bold.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Bold.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText">
            <summary>
            Abstract base class of embedded text elements in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class of embedded text elements in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.EmbeddedText.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef">
            <summary>
            Represents text using a specific font in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents text using a specific font in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.FontAttribute">
            <summary>
            Font
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.FontRef.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.IFlowingText">
            <summary>
            Base interface for flowing text
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript">
            <summary>
            Represents output from inline script in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents output from inline script in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.ExpressionAttribute">
            <summary>
            Expression
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.InlineScript.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Italic">
            <summary>
            Represents a segment of italic text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Italic.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of italic text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Italic.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Italic.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.StrikeThrough">
            <summary>
            Represents a segment of strikeThrough text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.StrikeThrough.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of strikeThrough text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.StrikeThrough.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.StrikeThrough.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Subscript">
            <summary>
            Represents a segment of subscript text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Subscript.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of subscript text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Subscript.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Subscript.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Superscript">
            <summary>
            Represents a segment of superscript text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Superscript.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of superscript text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Superscript.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Superscript.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Text">
            <summary>
            Represents a segment of text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.TextAttribute">
            <summary>
            Text
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Text.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor">
            <summary>
            Represents a text color segment in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a text color segment in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.ColorAttribute">
            <summary>
            Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.TextColor.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.FlowingText.Underline">
            <summary>
            Represents a segment of underline text in flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Underline.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a segment of underline text in flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.FlowingText.Underline.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.FlowingText.Underline.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.Label">
            <summary>
            Represents an unformatted text label.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents an unformatted text label.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Label.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Label.TextAttribute">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Label.HorizontalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Label.VerticalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Label.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.Paragraph">
            <summary>
            Represents a paragraph of flowing text.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents a paragraph of flowing text.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Paragraph.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Paragraph.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Content.Script">
            <summary>
            Represents the result of executing script.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Represents the result of executing script.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Script.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Script.ExpressionAttribute">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Script.HorizontalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Content.Script.VerticalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Content.Script.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Distance">
            <summary>
            Abstract base class for distance elements.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Distance.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for distance elements.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Distance.DistanceAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Distance.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Distance.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Distance.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Distance.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Distance.dist">
            <summary>
            Measured distance
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.DrawingState">
            <summary>
            Current drawing state.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DrawingState.#ctor(SkiaSharp.SKCanvas,Waher.Layout.Layout2D.RenderSettings,Waher.Script.Variables)">
            <summary>
            Current drawing state.
            </summary>
            <param name="Canvas">Current drawing canvas.</param>
            <param name="Settings">Rendering settings.</param>
            <param name="Session">Session</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DrawingState.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.Session">
            <summary>
            Current session.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.PixelsPerInch">
            <summary>
            Pixels per inch
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.Canvas">
            <summary>
            Current drawing canvas.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.Text">
            <summary>
            Current text paint settings
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.Font">
            <summary>
            Current font.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.DefaultPen">
            <summary>
            Default pen
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.ShapePen">
            <summary>
            Pen to use for shape, if no other is specified in the shape.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.ShapeFill">
            <summary>
            Fill to use for shape, if no other is specified in the shape.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.AreaWidth">
            <summary>
            Width of current area
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DrawingState.AreaHeight">
            <summary>
            Height of current area
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DrawingState.CalcDrawingSize(Waher.Layout.Layout2D.Model.Length,System.Single@,Waher.Layout.Layout2D.Model.ILayoutElement,System.Boolean,System.Boolean@)">
            <summary>
            Converts a defined length to drawing size.
            </summary>
            <param name="L">Length</param>
            <param name="Size">Calculated size.</param>
            <param name="Element">Current element.</param>
            <param name="Horizontal">If it is a horizontal size.</param>
            <param name="Relative">If size is relative, and should be recalculated if dimensions change.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.DynamicContainer">
            <summary>
            Abstract base class of dynamic layout containers (i.e. containers that can
            generate child elements dynamically).
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DynamicContainer.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class of dynamic layout containers (i.e. containers that can
            generate child elements dynamically).
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DynamicContainer.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DynamicContainer.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DynamicContainer.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DynamicContainer.MeasureChildrenPositions">
            <summary>
            If children positions are to be measured.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.DynamicElement">
            <summary>
            Abstract base class of dynamic layout elements (i.e. elements that can
            generate child elements dynamically).
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DynamicElement.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class of dynamic layout elements (i.e. elements that can
            generate child elements dynamically).
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.DynamicElement.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.DynamicElement.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Circle">
            <summary>
            A circle
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A circle
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Circle.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Circle.RadiusAttribute">
            <summary>
            Radius
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Circle.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.CircleArc">
            <summary>
            A circle arc
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A circle arc
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.RadiusAttribute">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.StartDegreesAttribute">
            <summary>
            Start Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.EndDegreesAttribute">
            <summary>
            End Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.ClockwiseAttribute">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.CircleArc.CenterAttribute">
            <summary>
            Include center point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.CircleArc.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Dot">
            <summary>
            A dot
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Dot.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A dot
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Dot.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Dot.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Dot.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Ellipse">
            <summary>
            An ellipse
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An ellipse
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Ellipse.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Ellipse.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Ellipse.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Ellipse.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.EllipseArc">
            <summary>
            An ellipse arc
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An ellipse arc
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.StartDegreesAttribute">
            <summary>
            Start Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.EndDegreesAttribute">
            <summary>
            End Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.ClockwiseAttribute">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.EllipseArc.CenterAttribute">
            <summary>
            Include center point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.EllipseArc.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Figure">
            <summary>
            Abstract base class for figures
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for figures
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Figure.PenAttribute">
            <summary>
            Pen
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Figure.FillAttribute">
            <summary>
            Fill
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.GetPen(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets the pen associated with the element. If not found, the default pen
            is returned.
            </summary>
            <param name="State">Current state</param>
            <returns>Pen.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.TryGetPen(Waher.Layout.Layout2D.Model.DrawingState,SkiaSharp.SKPaint@)">
            <summary>
            Tries to get the pen associated with the element, if one is defined.
            </summary>
            <param name="State">Current state</param>
            <param name="Pen">Pen, if defined.</param>
            <returns>If a pen was defined, and was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Figure.TryGetFill(Waher.Layout.Layout2D.Model.DrawingState,SkiaSharp.SKPaint@)">
            <summary>
            Tries to get the filling of the figure, if one is defined.
            </summary>
            <param name="State">State object.</param>
            <param name="Fill">Filling, if defined.</param>
            <returns>If a filling was defined, and was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.FigurePoint">
            <summary>
            Abstract base class for figures based on a point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for figures based on a point.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint.XAttribute">
            <summary>
            X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint.YAttribute">
            <summary>
            Y-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint.ReferenceAttribute">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.FigurePoint.xCoordinate">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.FigurePoint.yCoordinate">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.FigurePoint2">
            <summary>
            Abstract base class for figures with two points.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for figures with two points.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.X2Attribute">
            <summary>
            X-coordinate 2
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.Y2Attribute">
            <summary>
            Y-coordinate 2
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.Reference2Attribute">
            <summary>
            Reference 2
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.xCoordinate2">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.FigurePoint2.yCoordinate2">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Line">
            <summary>
            A line
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A line
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Line.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Line.HeadAttribute">
            <summary>
            Head
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Line.TailAttribute">
            <summary>
            Tail
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Line.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Loop">
            <summary>
            A loop
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A loop
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Loop.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.CreateLoop(Waher.Layout.Layout2D.Model.References.Vertex[])">
            <summary>
            Creates a Loop (Closed Spline) path through a given set of points.
            </summary>
            <param name="Points">Points between which the loop will be created.</param>
            <returns>Loop path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.CreateLoop(SkiaSharp.SKPath,Waher.Layout.Layout2D.Model.References.Vertex[])">
            <summary>
            Creates a Loop (Closed Spline) path through a given set of points.
            </summary>
            <param name="AppendTo">Spline should be appended to this path. If null, a new path will be created.</param>
            <param name="Points">Points between which the loop will be created.</param>
            <returns>Loop path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.CreateLoop(SkiaSharp.SKPoint[])">
            <summary>
            Creates a Loop (Closed Spline) path through a given set of points.
            </summary>
            <param name="Points">Points between which the loop will be created.</param>
            <returns>Loop path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.CreateLoop(SkiaSharp.SKPath,SkiaSharp.SKPoint[])">
            <summary>
            Creates a Loop (Closed Spline) path through a given set of points.
            </summary>
            <param name="AppendTo">Spline should be appended to this path. If null, a new path will be created.</param>
            <param name="Points">Points between which the loop will be created.</param>
            <returns>Loop path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.GetCubicBezierCoefficients(System.Single[],System.Single[]@,System.Single[]@)">
            <summary>
            Gets a set of coefficients for cubic Bezier curves, forming a spline, one coordinate at a time.
            </summary>
            <param name="V">One set of coordinates, where the first and last must be the same.</param>
            <param name="A">Corresponding coefficients for first control points.</param>
            <param name="B">Corresponding coefficients for second control points.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Loop.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Path">
            <summary>
            A path
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A path
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Path.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Path.HeadAttribute">
            <summary>
            Head
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Path.TailAttribute">
            <summary>
            Tail
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Path.ShapeFillAttribute">
            <summary>
            Shape Fill
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws the segments of the path.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Path.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Polygon">
            <summary>
            A polygon
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Polygon.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A polygon
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Polygon.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Polygon.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Polygon.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.PolyLine">
            <summary>
            A poly-line
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A poly-line
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.PolyLine.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.PolyLine.HeadAttribute">
            <summary>
            Head
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.PolyLine.TailAttribute">
            <summary>
            Tail
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.PolyLine.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Rectangle">
            <summary>
            A rectangle
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Rectangle.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A rectangle
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Rectangle.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Rectangle.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Rectangle.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle">
            <summary>
            A rounded rectangle
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A rounded rectangle
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.rx">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.ry">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.RoundedRectangle.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward">
            <summary>
            Draws a line to a point that lies a certain distance backward of the last point,
            in the current direction of movement.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a line to a point that lies a certain distance backward of the last point,
            in the current direction of movement.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.P1">
            <summary>
            Line drawn from this point
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.P2">
            <summary>
            Line drawn to this point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Backward.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo">
            <summary>
            Draws a circle arc to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a circle arc to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.RadiusAttribute">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.ClockwiseAttribute">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.r">
            <summary>
            Measured radius
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.clockDir">
            <summary>
            Measured direction of arc
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel">
            <summary>
            Draws a circle arc to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a circle arc to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CircleArcToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine">
            <summary>
            Closes a path (i.e. returns to the origin), using a line.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Closes a path (i.e. returns to the origin), using a line.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.P1">
            <summary>
            Line drawn from this point
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.P2">
            <summary>
            Line drawn to this point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLine.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop">
            <summary>
            Closes a path (i.e. returns to the origin), using a spline, creating a closed smooth loop.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Closes a path (i.e. returns to the origin), using a spline, creating a closed smooth loop.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CloseLoop.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo">
            <summary>
            Draws a conic curve to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a conic curve to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.P0">
            <summary>
            Starting point.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.P1">
            <summary>
            Intermediate point.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.P2">
            <summary>
            Ending point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicTo.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel">
            <summary>
            Draws a conic curve to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a conic curve to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ConicToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo">
            <summary>
            Draws a cubic curve to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a cubic curve to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.P0">
            <summary>
            Starting point.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.P1">
            <summary>
            Intermediate point 1.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.P2">
            <summary>
            Intermediate point 2.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.P3">
            <summary>
            Ending point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicTo.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel">
            <summary>
            Draws a cubic curve to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a cubic curve to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.CubicToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo">
            <summary>
            Draws a ellipse arc to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a ellipse arc to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.ClockwiseAttribute">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.rX">
            <summary>
            Measured radius along X-axis
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.rY">
            <summary>
            Measured radius along Y-axis
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.clockDir">
            <summary>
            Measured direction of arc
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel">
            <summary>
            Draws a ellipse arc to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a ellipse arc to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.EllipseArcToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward">
            <summary>
            Draws a line to a point that lies a certain distance forward of the last point,
            in the current direction of movement.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a line to a point that lies a certain distance forward of the last point,
            in the current direction of movement.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.P1">
            <summary>
            Line drawn from this point
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.P2">
            <summary>
            Line drawn to this point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Forward.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ISegment">
            <summary>
            Interface for path segment nodes
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ISegment.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.ISegment.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo">
            <summary>
            Draws a line to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a line to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.P1">
            <summary>
            Line drawn from this point
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.P2">
            <summary>
            Line drawn to this point
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineTo.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel">
            <summary>
            Draws a line to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a line to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.LineToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo">
            <summary>
            Moves to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Moves to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel">
            <summary>
            Moves to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Moves to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.MoveToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline">
            <summary>
            Represents a spline curve in a path
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline.#ctor(System.Single,System.Single)">
            <summary>
            Represents a spline curve in a path
            </summary>
            <param name="X0">Starting X-coordinate.</param>
            <param name="Y0">Starting Y-coordinate.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline.Add(System.Single,System.Single)">
            <summary>
            Adds a vertex
            </summary>
            <param name="X">X-Coordinate</param>
            <param name="Y">Y-Coordinte</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline.ToArray">
            <summary>
            Returns an array of vertices of the spline curve.
            </summary>
            <returns>Vertices</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathSpline.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState">
            <summary>
            Current state tracing the path.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.#ctor(Waher.Layout.Layout2D.Model.Figures.Path,SkiaSharp.SKPath,System.Boolean,System.Boolean)">
            <summary>
            Current state tracing the path.
            </summary>
            <param name="PathDef">Path definition</param>
            <param name="Path">Path being drawn (null when measuring).</param>
            <param name="CalcStart">If start position and angle are to be calculated.</param>
            <param name="CalcEnd">If end position and angle are to be calculated.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.X">
            <summary>
            Current X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Y">
            <summary>
            Current Y-coordinte
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.XPrev">
            <summary>
            Previous X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.YPrev">
            <summary>
            Previous Y-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.CalcStart">
            <summary>
            If start position and angle are to be calculated.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.CalcEnd">
            <summary>
            If end position and angle are to be calculated.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Angle">
            <summary>
            Calculates the current direction angle, in radians
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Set0(System.Single,System.Single)">
            <summary>
            Sets the start coordinate of a new contour.
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Add0(System.Single,System.Single)">
            <summary>
            Sets the start coordinate of a new contour, relative to the last point.
            </summary>
            <param name="DeltaX">X-coordinate</param>
            <param name="DeltaY">Y-coordinate</param>
            <returns>Absolute coordinates.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.CloseLine">
            <summary>
            Closes the current contour, using a line.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.CloseLoop">
            <summary>
            Closes the current contour, using a spline, creating a closed smooth loop.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Set(System.Single,System.Single)">
            <summary>
            Sets a new coordinate
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Add(System.Single,System.Single)">
            <summary>
            Sets a new coordinate
            </summary>
            <returns>Absolute coordinates.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Forward(System.Single)">
            <summary>
            Moves forward
            </summary>
            <param name="Distance"></param>
            <returns>Absolute coordinates.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.Backward(System.Single)">
            <summary>
            Moves forward
            </summary>
            <param name="Distance"></param>
            <returns>Absolute coordinates.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.TurnLeft(System.Single)">
            <summary>
            Turns the current direction left.
            </summary>
            <param name="DeltaDegrees">Angle, in degrees.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.TurnRight(System.Single)">
            <summary>
            Turns the current direction right.
            </summary>
            <param name="DeltaDegrees">Angle, in degrees.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.TurnTowards(System.Single,System.Single)">
            <summary>
            Turns the current direction towards a given point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.TurnTowardsRel(System.Single,System.Single)">
            <summary>
            Turns the current direction towards a given point, relative to the current point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.TurnTowards(System.Single)">
            <summary>
            Turns the current direction towards a given direction.
            </summary>
            <param name="Angle">Angle</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.FlushSpline">
            <summary>
            Closes an ongoing spline curve (if one open).
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.SetSplineVertex(System.Single,System.Single)">
            <summary>
            Sets a new spline vertex
            </summary>
            <param name="X">X-coordinate</param>
            <param name="Y">Y-coordinate</param>
            <returns>Dynamic spline curve</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState.AddSplineVertex(System.Single,System.Single)">
            <summary>
            Sets a new spline vertex, relative to the last coordinate
            </summary>
            <param name="DeltaX">X-coordinate</param>
            <param name="DeltaY">Y-coordinate</param>
            <returns>Dynamic spline curve</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo">
            <summary>
            Draws a quadratic curve to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a quadratic curve to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.P0">
            <summary>
            Starting point.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.P1">
            <summary>
            Intermediate point.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.P2">
            <summary>
            Ending point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticTo.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel">
            <summary>
            Draws a quadratic curve to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a quadratic curve to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.QuadraticToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay">
            <summary>
            Replays the segments of another path.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Replays the segments of another path.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.ReferenceAttribute">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.Replay.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo">
            <summary>
            Draws a spline to a point, relative to the origio of the current container
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a spline to a point, relative to the origio of the current container
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.splineCurve">
            <summary>
            Dynamic spline curve.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineTo.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel">
            <summary>
            Draws a spline to a point, relative to the end of the last segment
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Draws a spline to a point, relative to the end of the last segment
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.SplineToRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft">
            <summary>
            Turns the current direction left.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Turns the current direction left.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnLeft.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight">
            <summary>
            Turns the current direction right.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Turns the current direction right.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnRight.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards">
            <summary>
            Turns the current direction towards a point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Turns the current direction towards a point.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowards.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel">
            <summary>
            Turns the current direction towards a point, relative to the current point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Turns the current direction towards a point, relative to the current point.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.SegmentNodes.TurnTowardsRel.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Spline">
            <summary>
            A spline
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A spline
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Spline.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Spline.HeadAttribute">
            <summary>
            Head
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Figures.Spline.TailAttribute">
            <summary>
            Tail
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.CreateSpline(Waher.Layout.Layout2D.Model.References.Vertex[])">
            <summary>
            Creates a Spline path through a given set of points.
            </summary>
            <param name="Points">Points between which the spline will be created.</param>
            <returns>Spline path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.CreateSpline(SkiaSharp.SKPath,Waher.Layout.Layout2D.Model.References.Vertex[])">
            <summary>
            Creates a Spline path through a given set of points.
            </summary>
            <param name="AppendTo">Spline should be appended to this path. If null, a new path will be created.</param>
            <param name="Points">Points between which the spline will be created.</param>
            <returns>Spline path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.CreateSpline(SkiaSharp.SKPoint[])">
            <summary>
            Creates a Spline path through a given set of points.
            </summary>
            <param name="Points">Points between which the spline will be created.</param>
            <returns>Spline path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.CreateSpline(SkiaSharp.SKPath,SkiaSharp.SKPoint[])">
            <summary>
            Creates a Spline path through a given set of points.
            </summary>
            <param name="AppendTo">Spline should be appended to this path. If null, a new path will be created.</param>
            <param name="Points">Points between which the spline will be created.</param>
            <returns>Spline path.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.GetCubicBezierCoefficients(System.Single[],System.Single[]@,System.Single[]@)">
            <summary>
            Gets a set of coefficients for cubic Bezier curves, forming a spline, one coordinate at a time.
            </summary>
            <param name="V">One set of coordinates.</param>
            <param name="A">Corresponding coefficients for first control points.</param>
            <param name="B">Corresponding coefficients for second control points.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Spline.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Figures.Vertices">
            <summary>
            A sequence of points
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Figures.Vertices.points">
            <summary>
            Vertex nodes
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Vertices.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A sequence of points
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Vertices.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Figures.Vertices.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Filters.Blur">
            <summary>
            Blur image filter
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Blur.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Blur image filter
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Blur.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Blur.SigmaXAttribute">
            <summary>
            Sigma X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Blur.SigmaYAttribute">
            <summary>
            Sigma Y
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Blur.TileModeAttribute">
            <summary>
            Tile Mode
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Blur.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Blur.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Blur.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Blur.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Filters.Dilate">
            <summary>
            Dilation filter
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Dilate.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Dilation filter
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Dilate.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Dilate.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Dilate.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Dilate.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Dilate.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Dilate.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Dilate.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Filters.Erode">
            <summary>
            Erosion filter
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Erode.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Erosion filter
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Erode.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Erode.RadiusXAttribute">
            <summary>
            Radius X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Erode.RadiusYAttribute">
            <summary>
            Radius Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Erode.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Erode.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Erode.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Erode.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Filters.Shadow">
            <summary>
            Shadow filter
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Shadow.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Shadow filter
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.DXAttribute">
            <summary>
            DX
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.DYAttribute">
            <summary>
            DY
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.SigmaXAttribute">
            <summary>
            Sigma X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.SigmaYAttribute">
            <summary>
            Sigma Y
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Filters.Shadow.ColorAttribute">
            <summary>
            Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Shadow.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Shadow.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Shadow.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Filters.Shadow.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Fonts.Font">
            <summary>
            Abstract base class for fonts.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for fonts.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.NameAttribute">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.SizeAttribute">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.WeightAttribute">
            <summary>
            Weight
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.WidthAttribute">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.SlantAttribute">
            <summary>
            Slant
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.ColorAttribute">
            <summary>
            Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Fonts.Font.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.FontDef">
            <summary>
            Measured Font
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Fonts.Font.Text">
            <summary>
            Measured Text
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.HorizontalAlignment">
            <summary>
            Horizontal alignment
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.HorizontalAlignment.Left">
            <summary>
            Aligned to the left
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.HorizontalAlignment.Center">
            <summary>
            Aligned along centers
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.HorizontalAlignment.Right">
            <summary>
            Aligned to the right
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.VerticalAlignment">
            <summary>
            Vertical alignment
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalAlignment.Top">
            <summary>
            Aligned at the top
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalAlignment.Center">
            <summary>
            Aligned along centers
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalAlignment.BaseLine">
            <summary>
            Aligned along text base line.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalAlignment.Bottom">
            <summary>
            Aligned at the bottom
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Cell">
            <summary>
            Defines a cell in a grid.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Defines a cell in a grid.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.HorizontalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.VerticalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.ColSpanAttribute">
            <summary>
            Column span
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.RowSpanAttribute">
            <summary>
            Row span
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Cell.BorderAttribute">
            <summary>
            Border
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.AlignedMeasuredCell(System.Nullable{System.Single},System.Nullable{System.Single},Waher.Script.Variables)">
            <summary>
            Aligns a measured cell
            </summary>
            <param name="MaxWidth">Maximum width of area assigned to the cell</param>
            <param name="MaxHeight">Maximum height of area assigned to the cell</param>
            <param name="Session">Current session.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.CalcSpan(Waher.Script.Variables,System.Int32@,System.Int32@)">
            <summary>
            Calculates the span of the cell.
            </summary>
            <param name="Session">Current session.</param>
            <param name="ColSpan">Column span</param>
            <param name="RowSpan">Row span</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Cell.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.FlexibleOrder">
            <summary>
            How elements are ordered using flexible ordering.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.FlexibleOrder.HorizontalVertical">
            <summary>
            First horizontally, then vertically
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.FlexibleOrder.VerticalHorizontal">
            <summary>
            First vertically, then horizontally
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.HorizontalDirection">
            <summary>
            Horizontal ordering
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.HorizontalDirection.LeftRight">
            <summary>
            From left to right
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.HorizontalDirection.RightLeft">
            <summary>
            From right to left
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.VerticalDirection">
            <summary>
            Vertical ordering
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalDirection.TopDown">
            <summary>
            From the top, downwards
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.VerticalDirection.BottomUp">
            <summary>
            From the bottom, upwards
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Flexible">
            <summary>
            Ordering child elements flexibly.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Ordering child elements flexibly.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.OrderAttribute">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.HorizontalDirectionAttribute">
            <summary>
            Horizontal Direction
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.VerticalDirectionAttribute">
            <summary>
            Vertical Direction
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.HorizontalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Flexible.VerticalAlignmentAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Flexible.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells">
            <summary>
            Lays out elements flexibly, first horizontally, then vertically.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.#ctor(Waher.Script.Variables,System.Single,Waher.Layout.Layout2D.Model.Groups.HorizontalDirection,Waher.Layout.Layout2D.Model.Groups.VerticalDirection,Waher.Layout.Layout2D.Model.Groups.HorizontalAlignment)">
            <summary>
            Lays out elements flexibly, first horizontally, then vertically.
            </summary>
            <param name="Session">Current session</param>
            <param name="WidthLimit">Width limit of area</param>
            <param name="HorizontalDirection">Horizontal direction</param>
            <param name="VerticalDirection">Vertical direction</param>
            <param name="HorizontalAlignment">Horizontal alignment of cells in layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleHorizontalCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells">
            <summary>
            Lays out elements flexibly, first vertically, then horizontally.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.#ctor(Waher.Script.Variables,System.Single,Waher.Layout.Layout2D.Model.Groups.HorizontalDirection,Waher.Layout.Layout2D.Model.Groups.VerticalDirection,Waher.Layout.Layout2D.Model.Groups.VerticalAlignment)">
            <summary>
            Lays out elements flexibly, first vertically, then horizontally.
            </summary>
            <param name="Session">Current session</param>
            <param name="WidthLimit">Width limit of area</param>
            <param name="HorizontalDirection">Horizontal direction</param>
            <param name="VerticalDirection">Vertical direction</param>
            <param name="VerticalAlignment">Vertical alignment of cells in layout.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.FlexibleVerticalCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Grid">
            <summary>
            A grid of cells
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A grid of cells
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Grid.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Grid.ColumnsAttribute">
            <summary>
            Columns
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Grid.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.GridCells">
            <summary>
            Lays out cells in a grid.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.GridCells.#ctor(Waher.Script.Variables,System.Int32)">
            <summary>
            Lays out cells in a grid.
            </summary>
            <param name="Session">Current session</param>
            <param name="NrColumns">Number of columns in grid</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.GridCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.GridCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.GridCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.GridPadding">
            <summary>
            Provides padding for a layout element in a grid.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.GridPadding.#ctor(Waher.Layout.Layout2D.Model.ILayoutElement,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Provides padding for a layout element in a grid.
            </summary>
            <param name="Element">Embedded element.</param>
            <param name="OffsetX">X-offset</param>
            <param name="OffsetY">Y-offset</param>
            <param name="X">Cell X-coordinate in grid.</param>
            <param name="Y">Cell Y-coordinate in grid.</param>
            <param name="ColSpan">Column span</param>
            <param name="RowSpan">Row span</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridPadding.X">
            <summary>
            Cell X-coordinate in grid.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridPadding.Y">
            <summary>
            Cell Y-coordinate in grid.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridPadding.ColSpan">
            <summary>
            Column span
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.GridPadding.RowSpan">
            <summary>
            Row span
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Horizontal">
            <summary>
            Ordering child elements horizontally.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Horizontal.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Ordering child elements horizontally.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Horizontal.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Horizontal.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Horizontal.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.HorizontalCells">
            <summary>
            Lays ut cells horizontally
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.#ctor(Waher.Script.Variables)">
            <summary>
            Lays ut cells horizontally
            </summary>
            <param name="Session">Current session.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.HorizontalCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.ICellLayout">
            <summary>
            Basic interface for cell layout objects.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.ICellLayout.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.ICellLayout.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.ICellLayout.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.ICellLayout.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.ICellLayout.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Margins">
            <summary>
            A translation transform
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A translation transform
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Margins.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Margins.LeftAttribute">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Margins.RightAttribute">
            <summary>
            Right
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Margins.TopAttribute">
            <summary>
            Top
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Margins.BottomAttribute">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Margins.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.OverlayCells">
            <summary>
            Lays ut cells one on-top of another
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.OverlayCells.#ctor(Waher.Script.Variables)">
            <summary>
            Lays ut cells one on-top of another
            </summary>
            <param name="Session">Current session.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.OverlayCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.OverlayCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.OverlayCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.OverlayCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.OverlayCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Overlays">
            <summary>
            Ordering child elements one on-top of the other.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Overlays.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Ordering child elements one on-top of the other.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Overlays.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Overlays.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Overlays.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Padding">
            <summary>
            Provides padding for a layout element in a group contruct.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Padding.#ctor(Waher.Layout.Layout2D.Model.ILayoutElement,System.Single,System.Single)">
            <summary>
            Provides padding for a cell in a group contruct.
            </summary>
            <param name="Element">Embedded element.</param>
            <param name="OffsetX">X-offset</param>
            <param name="OffsetY">Y-offset</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Padding.Element">
            <summary>
            Embedded element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Padding.Cell">
            <summary>
            Embedded cell
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Padding.IsCell">
            <summary>
            If the embedded element is a <see cref="P:Waher.Layout.Layout2D.Model.Groups.Padding.Cell"/>.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Padding.OffsetX">
            <summary>
            X-offset
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Padding.OffsetY">
            <summary>
            Y-offset
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Padding.AlignedMeasuredCell(System.Nullable{System.Single},System.Nullable{System.Single},Waher.Script.Variables)">
            <summary>
            Aligns a measured cell
            </summary>
            <param name="MaxWidth">Maximum width of area assigned to the cell</param>
            <param name="MaxHeight">Maximum height of area assigned to the cell</param>
            <param name="Session">Current session.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Padding.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution">
            <summary>
            Abstract base class of elements that do spatial distribution of children.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.measured">
            <summary>
            Measured children.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class of elements that do spatial distribution of children.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.MeasureChildrenPositions">
            <summary>
            If children positions are to be measured.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.SpatialDistribution.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.Vertical">
            <summary>
            Ordering child elements vertically.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Vertical.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Ordering child elements vertically.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.Vertical.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Vertical.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.Vertical.GetCellLayout(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Gets a cell layout object that will be responsible for laying out cells.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Cell layout object.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Groups.VerticalCells">
            <summary>
            Lays ut cells horizontally
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.VerticalCells.#ctor(Waher.Script.Variables)">
            <summary>
            Lays ut cells horizontally
            </summary>
            <param name="Session">Current session</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.VerticalCells.Add(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Adds a cell to the layout.
            </summary>
            <param name="Element">Cell element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.VerticalCells.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.VerticalCells.TotWidth">
            <summary>
            Total width of layout
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Groups.VerticalCells.TotHeight">
            <summary>
            Total height of layout
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Groups.VerticalCells.Align">
            <summary>
            Aligns cells and returns an array of padded cells.
            </summary>
            <returns>Array of padded cells.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.IDirectedElement">
            <summary>
            Interface for directed elements.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.IDirectedElement.TryGetStart(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get start position and initial direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Initial direction.</param>
            <returns>If a start position was found.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.IDirectedElement.TryGetEnd(System.Single@,System.Single@,System.Single@)">
            <summary>
            Tries to get end position and terminating direction.
            </summary>
            <param name="X">X-coordinate.</param>
            <param name="Y">Y-coordinate.</param>
            <param name="Direction">Terminating direction.</param>
            <returns>If a terminating position was found.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.IDynamicChildren">
            <summary>
            Interface for layout elements that generate children dynamically.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.IDynamicChildren.DynamicChildren">
            <summary>
            Dynamic array of children
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.ILayoutElement">
            <summary>
            Base interface for all layout elements.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Document">
            <summary>
            Layout document.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Parent">
            <summary>
            Parent element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Namespace">
            <summary>
            Namespace of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Left">
            <summary>
            Left coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Right">
            <summary>
            Right coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Top">
            <summary>
            Top coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Bottom">
            <summary>
            Bottom coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Width">
            <summary>
            Width of element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.Height">
            <summary>
            Height of element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.IsVisible">
            <summary>
            If the element is visible or not.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.ILayoutElement.IdAttribute">
            <summary>
            ID Attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Containing document.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.ToXml(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.Copy(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a copy of the layout element.
            </summary>
            <param name="Parent">Parent of the new element.</param>
            <returns>Copy of layout element.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.ILayoutElement.DrawShape(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draw the shape represented by the layout element.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Images.Image">
            <summary>
            Abstract base class for images.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.Image.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for images.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.Image.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.Image.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Images.Image.image">
            <summary>
            Loaded image
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.Image.LoadImage(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Loads the image defined by the element.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Loaded image, or null if not possible to load image, or
            image loading is in process.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.Image.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Images.ImageFile">
            <summary>
            An image defined in a file.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An image defined in a file.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageFile.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageFile.FileNameAttribute">
            <summary>
            Filename
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageFile.LoadImage(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Loads the image defined by the element.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Loaded image, or null if not possible to load image, or
            image loading is in process.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Images.ImageInternal">
            <summary>
            An image provided by the caller, identified by a content id.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An image provided by the caller, identified by a content id.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageInternal.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageInternal.CidAttribute">
            <summary>
            Content ID
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageInternal.LoadImage(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Loads the image defined by the element.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Loaded image, or null if not possible to load image, or
            image loading is in process.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Images.ImageResource">
            <summary>
            An image defined in an embedded resource.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An image defined in an embedded resource.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageResource.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageResource.ResourceAttribute">
            <summary>
            Resource
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageResource.LoadImage(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Loads the image defined by the element.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Loaded image, or null if not possible to load image, or
            image loading is in process.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Images.ImageUrl">
            <summary>
            An image defined by a URL.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            An image defined by a URL.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageUrl.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageUrl.UrlAttribute">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Images.ImageUrl.AlternativeAttribute">
            <summary>
            Alternative
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.LoadImage(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Loads the image defined by the element.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>Loaded image, or null if not possible to load image, or
            image loading is in process.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Images.ImageUrl.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Overflow">
            <summary>
            Overflow handling.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Overflow.Clip">
            <summary>
            Clip any content outside of the area.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Overflow.Ignore">
            <summary>
            Ignore overflow
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.LayoutArea">
            <summary>
            Abstract base class for layout elements with an implicit area.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutArea.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements with an implicit area.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.WidthAttribute">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.HeightAttribute">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.MaxWidthAttribute">
            <summary>
            Maximum Width
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.MaxHeightAttribute">
            <summary>
            Maximum Height
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.MinWidthAttribute">
            <summary>
            Minimum Width
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.MinHeightAttribute">
            <summary>
            Minimum Height
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.KeepAspectRatioAttribute">
            <summary>
            Keep aspect-ratio
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.OverflowAttribute">
            <summary>
            Overflow
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutArea.OnClickAttribute">
            <summary>
            OnClick event script
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutArea.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutArea.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutArea.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutArea.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.LayoutContainer">
            <summary>
            Abstract base class for layout containers (area elements containing 
            embedded layout elements).
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout containers (area elements containing 
            embedded layout elements).
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutContainer.Children">
            <summary>
            Child elements
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutContainer.HasChildren">
            <summary>
            If the element has children or not.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.IncludeElement(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Includes element in dimension measurement.
            </summary>
            <param name="Element">Element to include.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutContainer.MeasureChildrenDimensions">
            <summary>
            If children dimensions are to be measured.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutContainer.MeasureChildrenPositions">
            <summary>
            If children positions are to be measured.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.IncludePoint(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Includes a point in the area measurement.
            </summary>
            <param name="X">X-Coordinate of center-point</param>
            <param name="Y">Y-Coordinate of center-point</param>
            <param name="RX">Radius along X-axis</param>
            <param name="RY">Radius along Y-axis</param>
            <param name="Angle">Angle, in degrees, clockwise from positive horizontal X-axis.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.IncludePoint(System.Single,System.Single)">
            <summary>
            Includes a point in the area measurement.
            </summary>
            <param name="X">X-Coordinate</param>
            <param name="Y">Y-Coordinate</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.IncludePoint(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Attributes.LengthAttribute,Waher.Layout.Layout2D.Model.Attributes.LengthAttribute,Waher.Layout.Layout2D.Model.Attributes.StringAttribute,System.Single@,System.Single@,System.Boolean@)">
            <summary>
            Includes a point in the area measurement.
            </summary>
            <param name="State">Current drawing state</param>
            <param name="XAttribute">X-Coordinate attribute</param>
            <param name="YAttribute">Y-Coordinate attribute</param>
            <param name="RefAttribute">Reference attribute</param>
            <param name="X">Resulting X-coordinate.</param>
            <param name="Y">Resulting Y-coordinate.</param>
            <param name="Relative">If coordinate is relative, and should be recalculated if dimensions change.</param>
            <returns>If point is well-defined.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutContainer.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.LayoutElement">
            <summary>
            Abstract base class for layout elements.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LayoutElement.DegreesToRadians">
            <summary>
            Pi / 180
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LayoutElement.defined">
            <summary>
            If element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Document">
            <summary>
            Layout document.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Parent">
            <summary>
            Parent element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Left">
            <summary>
            Left coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Right">
            <summary>
            Right coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Top">
            <summary>
            Top coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Bottom">
            <summary>
            Bottom coordinate of bounding box, after measurement.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.PresetWidth">
            <summary>
            Width of element, if defined explicitly (i.e. not evaluated from Left and Right).
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.PresetHeight">
            <summary>
            Height of element, if defined explicitly (i.e. not evaluated from Top and Bottom).
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Width">
            <summary>
            Width of element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Height">
            <summary>
            Height of element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.MinWidth">
            <summary>
            Minimum width.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.MaxWidth">
            <summary>
            Maximum width.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.MinHeight">
            <summary>
            Minimum height.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.MaxHeight">
            <summary>
            Maximum height.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.BoundingRect">
            <summary>
            Bounding rectangle.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.Namespace">
            <summary>
            Namespace of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.IdAttribute">
            <summary>
            ID of element
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.VisibleAttribute">
            <summary>
            Visibility attribute
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.ToXml(System.Xml.XmlWriter)">
            <summary>
            Exports the element to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.ExportChildren(System.Xml.XmlWriter)">
            <summary>
            Exports child elements to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.Copy(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a copy of the layout element.
            </summary>
            <param name="Parent">Parent of the new element.</param>
            <returns></returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.TransformBoundingBox(SkiaSharp.SKMatrix)">
            <summary>
            Transforms the measured bounding box.
            </summary>
            <param name="M">Transformation matrix.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.LayoutElement.IsVisible">
            <summary>
            If the element is visible or not.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CalcPoint(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Attributes.LengthAttribute,Waher.Layout.Layout2D.Model.Attributes.LengthAttribute,Waher.Layout.Layout2D.Model.Attributes.StringAttribute,System.Single@,System.Single@,System.Boolean@)">
            <summary>
            Includes a point in the area measurement.
            </summary>
            <param name="State">Current drawing state</param>
            <param name="XAttribute">X-Coordinate attribute</param>
            <param name="YAttribute">Y-Coordinate attribute</param>
            <param name="RefAttribute">Reference attribute</param>
            <param name="X">Resulting X-coordinate.</param>
            <param name="Y">Resulting Y-coordinate.</param>
            <param name="Relative">If coordinate is relative, and should be recalculated if dimensions change.</param>
            <returns>If point is well-defined.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.DrawShape(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draw the shape represented by the layout element.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CalcDirection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the direction of the pen when drawing from (x1,y1) to (x2,y2).
            </summary>
            <param name="x1">First X-coordinate</param>
            <param name="y1">First Y-coordinate</param>
            <param name="x2">Second X-coordinate</param>
            <param name="y2">Second Y-coordinate</param>
            <returns>Direction angle</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CalcDirection(System.Single,System.Single)">
            <summary>
            Calculates the direction of the pen when drawing in the direction of (dx,dy)
            </summary>
            <param name="dx">Delta-X</param>
            <param name="dy">Delta-Y</param>
            <returns>Direction angle</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CalcDirection(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <summary>
            Calculates the direction of the pen when drawing from P1 to P2.
            </summary>
            <param name="P1">First point</param>
            <param name="P2">Second point</param>
            <returns>Direction angle</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.CalcDirection(Waher.Layout.Layout2D.Model.References.Vertex,Waher.Layout.Layout2D.Model.References.Vertex)">
            <summary>
            Calculates the direction of the pen when drawing from P1 to P2.
            </summary>
            <param name="P1">First vertex</param>
            <param name="P2">Second vertex</param>
            <returns>Direction angle</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.LayoutElement.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.LengthUnit">
            <summary>
            Unit of length
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Px">
            <summary>
            pixels (1px = 1/96th of 1in) (absolute)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Pt">
            <summary>
            points (1pt = 1/72 of 1in) (absolute)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Pc">
            <summary>
            picas (1pc = 12 pt) (absolute)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Cm">
            <summary>
            centimeters (absolute)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.In">
            <summary>
            inches (1in = 96px = 2.54cm)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Mm">
            <summary>
            millimeters (absolute)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Em">
            <summary>
            Relative to the font-size of the element (2em means 2 times the size of the current font)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Ex">
            <summary>
            Relative to the x-height of the current font (rarely used)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Ch">
            <summary>
            Relative to the width of the "0" (zero)
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Rem">
            <summary>
            Relative to font-size of the root element
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Vw">
            <summary>
            Relative to 1% of the width of the viewport
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Vh">
            <summary>
            Relative to 1% of the height of the viewport
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Vmin">
            <summary>
            Relative to 1% of viewport's* smaller dimension
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Vmax">
            <summary>
            Relative to 1% of viewport's* larger dimension
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.LengthUnit.Percent">
            <summary>
            Relative to the parent element
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Length">
            <summary>
            Length definition.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Length.#ctor(System.Single,Waher.Layout.Layout2D.Model.LengthUnit)">
            <summary>
            Length definition.
            </summary>
            <param name="Value">Value of length</param>
            <param name="Unit">Unit of length.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Length.Value">
            <summary>
            Value of length
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Length.Unit">
            <summary>
            Unit of length.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Length.HundredPercent">
            <summary>
            100%
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Length.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Pens.Pen">
            <summary>
            Abstract base class for pens.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Pens.Pen.paint">
            <summary>
            Current pen
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for pens.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.Pen.Paint">
            <summary>
            Current pen
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.Pen.WidthAttribute">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.Pen.CapAttribute">
            <summary>
            Cap
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.Pen.JoinAttribute">
            <summary>
            Join
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.Pen.MiterAttribute">
            <summary>
            Miter
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.Pen.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Pens.Pen.penWidth">
            <summary>
            Measured pen width.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Pens.Pen.penCap">
            <summary>
            Measured pen stroke cap.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Pens.Pen.penJoin">
            <summary>
            Measured pen stroke join.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Pens.Pen.penMiter">
            <summary>
            Measured pen miter.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Pens.SolidPen">
            <summary>
            A solid pen
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A solid pen
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.SolidPen.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Pens.SolidPen.ColorAttribute">
            <summary>
            Color
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Pens.SolidPen.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Point">
            <summary>
            Abstract base class for layout elements with one point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements with one point.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point.XAttribute">
            <summary>
            X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point.YAttribute">
            <summary>
            Y-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point.ReferenceAttribute">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point.xCoordinate">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point.yCoordinate">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Point2">
            <summary>
            Abstract base class for layout elements with two points.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements with two points.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point2.X2Attribute">
            <summary>
            X-coordinate 2
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point2.Y2Attribute">
            <summary>
            Y-coordinate 2
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point2.Reference2Attribute">
            <summary>
            Reference 2
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point2.xCoordinate2">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point2.yCoordinate2">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Point2Weight">
            <summary>
            Abstract base class for layout elements with two points and a weight.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2Weight.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements with two points and a weight.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point2Weight.WeightAttribute">
            <summary>
            Weight
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2Weight.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2Weight.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2Weight.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point2Weight.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point2Weight.weight">
            <summary>
            Measured weight
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Point3">
            <summary>
            Abstract base class for layout elements with three points.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point3.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Abstract base class for layout elements with three points.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point3.X3Attribute">
            <summary>
            X-coordinate 3
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point3.Y3Attribute">
            <summary>
            Y-coordinate 3
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Point3.Reference3Attribute">
            <summary>
            Reference 3
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point3.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point3.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point3.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Point3.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point3.xCoordinate3">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Point3.yCoordinate3">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.References.Copy">
            <summary>
            Copies the layout from a reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies the layout from a reference
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Copy.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Copy.ReferenceAttribute">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.MeasurePositions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to positions.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Copy.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.References.Shape">
            <summary>
            Defines a shape for use elsewhere in the layout.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Defines a shape for use elsewhere in the layout.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Shape.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.DrawShape(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws the shape
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.Measure(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState)">
            <summary>
            Measures layout entities and defines unassigned properties.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.Draw(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.Figures.SegmentNodes.PathState,SkiaSharp.SKPath)">
            <summary>
            Draws the segments of the path.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="PathState">Current path state.</param>
            <param name="Path">Path being generated.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.DrawTail(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.IDirectedElement,SkiaSharp.SKPaint,SkiaSharp.SKPaint)">
            <summary>
            Draws shape as a tail
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="DirectedElement">Directed element.</param>
            <param name="DefaultPen">Default pen, if any, null otherwise</param>
            <param name="DefaultFill">Default fill, if any, null otherwise.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.DrawHead(Waher.Layout.Layout2D.Model.DrawingState,Waher.Layout.Layout2D.Model.IDirectedElement,SkiaSharp.SKPaint,SkiaSharp.SKPaint)">
            <summary>
            Draws shape as a head
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="DirectedElement">Directed element.</param>
            <param name="DefaultPen">Default pen, if any, null otherwise</param>
            <param name="DefaultFill">Default fill, if any, null otherwise.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Shape.Draw(Waher.Layout.Layout2D.Model.DrawingState,SkiaSharp.SKPaint,SkiaSharp.SKPaint,System.Single,System.Single,System.Single)">
            <summary>
            Draws the shape at a given position &amp; direction.
            </summary>
            <param name="State">Current drawing state.</param>
            <param name="DefaultPen">Default pen, if any, null otherwise</param>
            <param name="DefaultFill">Default fill, if any, null otherwise.</param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Direction"></param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.References.Vertex">
            <summary>
            Defines a vertex in the graf
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Vertex.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Defines a vertex in the graf
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Vertex.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.References.Vertex.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Vertex.XCoordinate">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.References.Vertex.YCoordinate">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.LinearTrasformation">
            <summary>
            Base abstract class for linear transforms.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.LinearTrasformation.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Base abstract class for linear transforms.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.LinearTrasformation.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation">
            <summary>
            Base abstract class for transformations using an optional pivot point.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Base abstract class for transformations using an optional pivot point.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.XAttribute">
            <summary>
            X-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.YAttribute">
            <summary>
            Y-coordinate
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.ReferenceAttribute">
            <summary>
            Reference
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.xCoordinate">
            <summary>
            Measured X-coordinate
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.Model.Transforms.PivotTrasformation.yCoordinate">
            <summary>
            Measured Y-coordinate
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.Rotate">
            <summary>
            A rotation transform
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A rotation transform
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Rotate.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Rotate.DegreesAttribute">
            <summary>
            Degrees
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Rotate.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.Scale">
            <summary>
            A scale transform
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A scale transform
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Scale.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Scale.ScaleXAttribute">
            <summary>
            Scale X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Scale.ScaleYAttribute">
            <summary>
            Scale Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Scale.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.SkewX">
            <summary>
            A skew transform along the X-axis.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A skew transform along the X-axis.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.SkewX.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.SkewX.FactorAttribute">
            <summary>
            Factor
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewX.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.SkewY">
            <summary>
            A skew transform along the Y-axis.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A skew transform along the Y-axis.
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.SkewY.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.SkewY.FactorAttribute">
            <summary>
            Factor
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.SkewY.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.Model.Transforms.Translate">
            <summary>
            A translation transform
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.#ctor(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            A translation transform
            </summary>
            <param name="Document">Layout document containing the element.</param>
            <param name="Parent">Parent element.</param>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Translate.LocalName">
            <summary>
            Local name of type of element.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Translate.TranslateXAttribute">
            <summary>
            Translate X
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.Model.Transforms.Translate.TranslateYAttribute">
            <summary>
            Translate Y
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.FromXml(System.Xml.XmlElement)">
            <summary>
            Populates the element (including children) with information from its XML definition.
            </summary>
            <param name="Input">XML definition.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.ExportAttributes(System.Xml.XmlWriter)">
            <summary>
            Exports attributes to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.Create(Waher.Layout.Layout2D.Layout2DDocument,Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Creates a new instance of the layout element.
            </summary>
            <param name="Document">Document containing the new element.</param>
            <param name="Parent">Parent element.</param>
            <returns>New instance.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.CopyContents(Waher.Layout.Layout2D.Model.ILayoutElement)">
            <summary>
            Copies contents (attributes and children) to the destination element.
            </summary>
            <param name="Destination">Destination element</param>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.MeasureDimensions(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Measures layout entities and defines unassigned properties, related to dimensions.
            </summary>
            <param name="State">Current drawing state.</param>
            <returns>If layout contains relative sizes and dimensions should be recalculated.</returns>
        </member>
        <member name="M:Waher.Layout.Layout2D.Model.Transforms.Translate.Draw(Waher.Layout.Layout2D.Model.DrawingState)">
            <summary>
            Draws layout entities.
            </summary>
            <param name="State">Current drawing state.</param>
        </member>
        <member name="T:Waher.Layout.Layout2D.RenderedImageSize">
            <summary>
            Affects the size of the rendered image.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.RenderedImageSize.ScaleToFit">
            <summary>
            Scales the layout to fit the desired image size.
            </summary>
        </member>
        <member name="F:Waher.Layout.Layout2D.RenderedImageSize.ResizeImage">
            <summary>
            Resizes the output to match the size of the layout.
            </summary>
        </member>
        <member name="T:Waher.Layout.Layout2D.RenderSettings">
            <summary>
            Render settings.
            </summary>
        </member>
        <member name="M:Waher.Layout.Layout2D.RenderSettings.#ctor">
            <summary>
            Determines the size of the rendered image.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.ImageSize">
            <summary>
            Offset along X-axis.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.Width">
            <summary>
            Width of image
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.Height">
            <summary>
            Height of image
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.Zoom">
            <summary>
            Zoom factor
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.OffsetX">
            <summary>
            Offset along X-axis.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.OffsetY">
            <summary>
            Offset along Y-axis.
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.PenColor">
            <summary>
            Pen color
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.FontSize">
            <summary>
            Font size, in points
            </summary>
        </member>
        <member name="P:Waher.Layout.Layout2D.RenderSettings.PixelsPerInch">
            <summary>
            Pixels per inch (defualt=96 pixels/inch)
            </summary>
        </member>
    </members>
</doc>
