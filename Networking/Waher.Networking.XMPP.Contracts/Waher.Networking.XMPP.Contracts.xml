<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Networking.XMPP.Contracts</name>
    </assembly>
    <members>
        <member name="T:Waher.Networking.XMPP.Contracts.Attachment">
            <summary>
            Contains a reference to an attachment assigned to a legal object.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Attachment.#ctor">
            <summary>
            Contains a reference to an attachment assigned to a legal object.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.Id">
            <summary>
            Attachment ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.LegalId">
            <summary>
            Legal ID of uploader of attachment
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.ContentType">
            <summary>
            Internet Content Type of binary attachment.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.FileName">
            <summary>
            Filename of attachment.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.Url">
            <summary>
            URL to retrieve attachment, if provided.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.Signature">
            <summary>
            Binary signature of the attachment, generated by an approved legal identity of the account-holder.
            If no signature, attribute is null.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Attachment.Timestamp">
            <summary>
            Timestamp of signature. If no signature, value is <see cref="F:System.DateTime.MinValue"/>
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.BooleanParameter">
            <summary>
            Boolean contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.BooleanParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.BooleanParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.BooleanParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.BooleanParameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.BooleanParameter.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.BooleanParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.CalcParameter">
            <summary>
            Calculation contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.CalcParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.CalcParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.CalcParameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.CalcParameter.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.CalcParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ClientSignature">
            <summary>
            Represents a digital signature on a contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.LegalId">
            <summary>
            ID of legal identity signing the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.LegalIdUri">
            <summary>
            ID of legal identity signing the contract, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.LegalIdUriString">
            <summary>
            ID of legal identity signing the contract, as an URI string.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.BareJid">
            <summary>
            Bare JID of the client used to generate the signature.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.Role">
            <summary>
            Role of the legal identity in the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ClientSignature.Transferable">
            <summary>
            If the signature is transferable to contracts based on the current contract as a template,
            and if no parameters and attributes change in the contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ClientSignature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Contract">
            <summary>
            Contains the definition of a contract
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.#ctor">
            <summary>
            Contains the definition of a contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContractId">
            <summary>
            Contract identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContractIdUri">
            <summary>
            Contract identity, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContractIdUriString">
            <summary>
            Contract identity, as an URI string.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Provider">
            <summary>
            JID of the Trust Provider hosting the contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.TemplateId">
            <summary>
            Contract identity of template, if one was used to create the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.TemplateIdUri">
            <summary>
            Contract identity of template, if one was used to create the contract, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.TemplateIdUriString">
            <summary>
            Contract identity of template, if one was used to create the contract, as an URI string.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.State">
            <summary>
            Contract state
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Created">
            <summary>
            When the contract was created
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Updated">
            <summary>
            When the contract was last updated
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.From">
            <summary>
            From when the contract is valid (if signed)
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.To">
            <summary>
            Until when the contract is valid (if signed)
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.SignAfter">
            <summary>
            Signatures will only be accepted after this point in time.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.SignBefore">
            <summary>
            Signatures will only be accepted until this point in time.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Visibility">
            <summary>
            Contrat Visibility
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Duration">
            <summary>
            Duration of the contract. Is counted from the time it is signed by the required parties.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ArchiveRequired">
            <summary>
            Requied time to archive a signed smart contract, after it becomes obsolete.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ArchiveOptional">
            <summary>
            Optional time to archive a signed smart contract, after it becomes obsolete, and after its required archivation period.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContentSchemaDigest">
            <summary>
            The hash digest of the schema used to validate the machine-readable contents (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>) of the smart contract,
            if such a schema was used.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ContentSchemaHashFunction">
            <summary>
            Hash function of the schema used to validate the machine-readable contents (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>) of the smart contract,
            if such a schema was used.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Roles">
            <summary>
            Roles defined in the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.PartsMode">
            <summary>
            How parts are defined in the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Parts">
            <summary>
            Defined parts for the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Parameters">
            <summary>
            Defined parameters for the smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines">
            <summary>
            Machine-readable contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachinesNamespace">
            <summary>
            Namespace used by the root node of the machine-readable contents of the contract (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForMachinesLocalName">
            <summary>
            Local name used by the root node of the machine-readable contents of the contract (<see cref="P:Waher.Networking.XMPP.Contracts.Contract.ForMachines"/>).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ForHumans">
            <summary>
            Human-readable contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ClientSignatures">
            <summary>
            Client signatures of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Attachments">
            <summary>
            Attachments assigned to the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.ServerSignature">
            <summary>
            Server signature attesting to the validity of the contents of the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.CanActAsTemplate">
            <summary>
            If the contract can act as a template for other contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.Parse(System.Xml.XmlDocument)">
            <summary>
            Validates a contract XML Document, and returns the contract definition in it.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Parsed contract, or null if it contains errors.</returns>
            <exception cref="T:System.Exception">If XML is invalid.</exception>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.Parse(System.Xml.XmlElement)">
            <summary>
            Parses a contract from is XML representation.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Parsed contract, or null if it contains errors.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.NormalizeXml(System.Xml.XmlElement,System.Text.StringBuilder,System.String)">
            <summary>
            Normalizes an XML element.
            </summary>
            <param name="Xml">XML element to normalize</param>
            <param name="Output">Normalized XML will be output here</param>
            <param name="CurrentNamespace">Namespace at the encapsulating entity.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.IsLegallyBinding(System.Boolean)">
            <summary>
            Checks if a contract is legally binding.
            </summary>
            <param name="CheckCurrentTime">If the current time should be checked as well.</param>
            <returns>If the contract is legally binding.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.Serialize(System.Text.StringBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serializes the Contract, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="IncludeNamespace">If namespace attribute should be included.</param>
            <param name="IncludeIdAttribute">If id attribute should be included.</param>
            <param name="IncludeClientSignatures">If client signatures should be included.</param>
            <param name="IncludeAttachments">If attachments are to be included.</param>
            <param name="IncludeStatus">If the status element should be included.</param>
            <param name="IncludeServerSignature">If the server signature should be included.</param>
            <param name="IncludeAttachmentReferences">If attachment references (URLs) are to be included.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.GetTags">
            <summary>
            Gets event tags describing the contract.
            </summary>
            <returns>Tags</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.Item(System.String)">
            <summary>
            Access to contract parameters.
            </summary>
            <param name="Key"></param>
            <returns>Parameter value.</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Contract.DefaultLanguage">
            <summary>
            Default language for contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.GetLanguages">
            <summary>
            Gets available languages encoded in contract.
            </summary>
            <returns>Array of languages.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToMarkdown(System.String)">
            <summary>
            Creates a human-readable Markdown document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToMarkdown(System.String,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType)">
            <summary>
            Creates a human-readable Markdown document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Type">Type of Markdown being generated.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToHTML(System.String)">
            <summary>
            Creates a human-readable HTML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToPlainText(System.String)">
            <summary>
            Creates a human-readable Plain Trext document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToXAML(System.String)">
            <summary>
            Creates a human-readable WPF XAML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ToXamarinForms(System.String)">
            <summary>
            Creates a human-readable Xamarin.Forms XAML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.TrySetRoleParameters(System.String,System.Int32,Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Tries to set role parameters.
            </summary>
            <param name="Role">Role</param>
            <param name="RoleIndex">Role index.</param>
            <param name="Identity">Corresponding identity of signatory.</param>
            <returns>null if OK, name of role parameter that could not be set if failed.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Contract.ClearRoleParameters(System.String,System.Int32)">
            <summary>
            Clears role-reference parameter values.
            </summary>
            <param name="Role">Role</param>
            <param name="RoleIndex">Role index.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractsClient">
            <summary>
            Adds support for legal identities, smart contracts and signatures to an XMPP client.
            
            The interface is defined in the IEEE XMPP IoT extensions:
            https://gitlab.com/IEEE-SA/XMPPI/IoT
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractsClient.NamespaceLegalIdentities">
            <summary>
            urn:ieee:iot:leg:id:1.0
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractsClient.NamespaceSmartContracts">
            <summary>
            urn:ieee:iot:leg:sc:1.0
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractsClient.NamespaceOnboarding">
            <summary>
            http://waher.se/schema/Onboarding/v1.xsd
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.#ctor(Waher.Networking.XMPP.XmppClient,System.String)">
            <summary>
            Adds support for legal identities, smart contracts and signatures to an XMPP client.
            
            The interface is defined in the IEEE XMPP IoT extensions:
            https://gitlab.com/IEEE-SA/XMPPI/IoT
            
            Before the Contracts Client can be used, you either need to load previously stored
            keys using <see cref="M:Waher.Networking.XMPP.Contracts.ContractsClient.LoadKeys(System.Boolean)"/>, or generate new keys, calling
            <see cref="M:Waher.Networking.XMPP.Contracts.ContractsClient.GenerateNewKeys"/>.
            </summary>
            <param name="Client">XMPP Client to use.</param>
            <param name="ComponentAddress">Address to the contracts component.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.#ctor(Waher.Networking.XMPP.XmppClient,System.String,System.Object[])">
            <summary>
            Adds support for legal identities, smart contracts and signatures to an XMPP client.
            
            The interface is defined in the IEEE XMPP IoT extensions:
            https://gitlab.com/IEEE-SA/XMPPI/IoT
            
            Before the Contracts Client can be used, you either need to load previously stored
            keys using <see cref="M:Waher.Networking.XMPP.Contracts.ContractsClient.LoadKeys(System.Boolean)"/>, or generate new keys, calling
            <see cref="M:Waher.Networking.XMPP.Contracts.ContractsClient.GenerateNewKeys"/>.
            </summary>
            <param name="Client">XMPP Client to use.</param>
            <param name="ComponentAddress">Address to the contracts component.</param>
            <param name="ApprovedSources">If access to sensitive methods is only accessible from a set of approved sources.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Dispose">
            <summary>
            Disposes of the extension.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsClient.Extensions">
            <summary>
            Implemented extensions.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsClient.ComponentAddress">
            <summary>
            Component address.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsClient.KeysTimestamp">
            <summary>
            Timestamps of current keys used for signatures.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.LoadKeys(System.Boolean)">
            <summary>
            Loads keys from the underlying persistence layer.
            </summary>
            <param name="CreateIfNone">Allows new keys to be created, if no keys were found in the persistence layer.</param>
            <returns>If keys were loaded or generated (i.e. can be used) or not.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.LoadKeys(System.Boolean,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Loads keys from the underlying persistence layer.
            </summary>
            <param name="CreateIfNone">Allows new keys to be created, if no keys were found in the persistence layer.</param>
            <param name="Thread">Optional thread to use during profiling.</param>
            <returns>If keys were loaded or generated (i.e. can be used) or not.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GenerateNewKeys">
            <summary>
            Generates new keys for the contracts clients.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ExportKeys">
            <summary>
            Exports Keys to XML.
            </summary>
            <returns>XML string.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ExportKeys(System.Xml.XmlWriter)">
            <summary>
            Exports Keys to XML.
            </summary>
            <param name="Output">XML output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ImportKeys(System.String)">
            <summary>
            Imports keys
            </summary>
            <param name="Xml">XML Definition of keys.</param>
            <returns>If keys could be loaded into the client.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ImportKeys(System.Xml.XmlDocument)">
            <summary>
            Imports keys
            </summary>
            <param name="Xml">XML Definition of keys.</param>
            <returns>If keys could be loaded into the client.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ImportKeys(System.Xml.XmlElement)">
            <summary>
            Imports keys
            </summary>
            <param name="Xml">XML Definition of keys.</param>
            <returns>If keys could be loaded into the client.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SetKeySettingsInstance(System.String,System.Boolean)">
            <summary>
            Sets the key settings instance name.
            </summary>
            <param name="InstanceName">Instance name.</param>
            <param name="Locked">If the key settings instance name should be locked.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SetAllowedSources(System.Object[])">
            <summary>
            If access to sensitive methods is only accessible from a set of approved sources.
            </summary>
            <param name="ApprovedSources">Approved sources.</param>
            <exception cref="T:System.NotSupportedException">If trying to change previously set sources.</exception>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.LegalIdUriString(System.String)">
            <summary>
            Legal identity URI, as a string.
            </summary>
            <param name="LegalId">Legal ID</param>
            <returns>URI String</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.LegalIdUri(System.String)">
            <summary>
            Legal identity URI.
            </summary>
            <param name="LegalId">Legal ID</param>
            <returns>URI</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ContractIdUriString(System.String)">
            <summary>
            Contract identity URI, as a string.
            </summary>
            <param name="ContractId">Contract ID</param>
            <returns>URI String</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ContractIdUri(System.String)">
            <summary>
            Contract identity URI.
            </summary>
            <param name="ContractId">Contract ID</param>
            <returns>URI</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKey(Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKey(System.String,Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Address">Address of entity whose public key is requested.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKeyAsync">
            <summary>
            Gets the server public key.
            </summary>
            <returns>Server public key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetServerPublicKeyAsync(System.String)">
            <summary>
            Gets the server public key.
            </summary>
            <param name="Address">Address of entity whose public key is requested.</param>
            <returns>Server public key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKey(Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Get the local key that matches the server key.
            </summary>
            <param name="Callback">Method called when response is available.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKey(System.String,Waher.Networking.XMPP.Contracts.KeyEventHandler,System.Object)">
            <summary>
            Get the local key that matches a given server key.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method called when response is available.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKeyAsync">
            <summary>
            Get the local key that matches the server key.
            </summary>
            <returns>Local key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetMatchingLocalKeyAsync(System.String)">
            <summary>
            Get the local key that matches a given server key.
            </summary>
            <param name="Address">Address of server (component).</param>
            <returns>Local key.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetIdApplicationAttributes(Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventHandler,System.Object)">
            <summary>
            Gets attributes relevant for application for legal identities on the broker.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetIdApplicationAttributesAsync">
            <summary>
            Gets attributes relevant for application for legal identities on the broker.
            </summary>
            <returns>ID Application attributes</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Apply(Waher.Networking.XMPP.Contracts.Property[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Properties">Properties of the legal identity.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Apply(System.String,Waher.Networking.XMPP.Contracts.Property[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Properties">Properties of the legal identity.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ApplyAsync(Waher.Networking.XMPP.Contracts.Property[])">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Properties">Properties of the legal identity.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ApplyAsync(System.String,Waher.Networking.XMPP.Contracts.Property[])">
            <summary>
            Applies for a legal identity to be registered.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Properties">Properties of the legal identity.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ReadyForApproval(System.String,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Marks an Identity as Ready for Approval. Call this after necessary attachments have been
            added. If automatic KYC modules exist on the server, they may at this point process
            available information, and choose to automatically approve or reject the application.
            </summary>
            <param name="LegalIdentityId">ID of Legal Identity that is ready for approval.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ReadyForApproval(System.String,System.String,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Marks an Identity as Ready for Approval. Call this after necessary attachments have been
            added. If automatic KYC modules exist on the server, they may at this point process
            available information, and choose to automatically approve or reject the application.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalIdentityId">ID of Legal Identity that is ready for approval.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ReadyForApprovalAsync(System.String)">
            <summary>
            Marks an Identity as Ready for Approval. Call this after necessary attachments have been
            added. If automatic KYC modules exist on the server, they may at this point process
            available information, and choose to automatically approve or reject the application.
            </summary>
            <param name="LegalIdentityId">ID of Legal Identity that is ready for approval.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ReadyForApprovalAsync(System.String,System.String)">
            <summary>
            Marks an Identity as Ready for Approval. Call this after necessary attachments have been
            added. If automatic KYC modules exist on the server, they may at this point process
            available information, and choose to automatically approve or reject the application.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalIdentityId">ID of Legal Identity that is ready for approval.</param>
            <returns>Identity object representing the application.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.LegalIdentity,Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler,System.Object)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.LegalIdentity,System.Boolean,Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler,System.Object)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(Waher.Networking.XMPP.Contracts.LegalIdentity,System.Byte[],System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Identity">Legal identity used to create the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <returns>
            true = Signature is valid.
            false = Signature is invalid.
            null = Client key algorithm is unknown, and veracity of signature could not be established.
            </returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(Waher.Networking.XMPP.Contracts.LegalIdentity,System.IO.Stream,System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Identity">Legal identity used to create the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <returns>
            true = Signature is valid.
            false = Signature is invalid.
            null = Client key algorithm is unknown, and veracity of signature could not be established.
            </returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.LegalIdentity,System.Boolean)">
            <summary>
            Validates a legal identity.
            </summary>
            <param name="Identity">Legal identity to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.HasPrivateKey(Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Checks if the private key of a legal identity is available. Private keys are required to be able to
            sign data, petitions and contracts.
            </summary>
            <param name="Identity">Legal Identity.</param>
            <returns>If the private key of the legal identity is available (and belongs to the Bare JID of the client).</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.HasPrivateKey(System.String)">
            <summary>
            Checks if the private key of a legal identity is available. Private keys are required to be able to
            sign data, petitions and contracts.
            </summary>
            <param name="IdentityId">Identity string of Legal Identity.</param>
            <returns>If the private key of the legal identity is available (and belongs to the Bare JID of the client).</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLatestApprovedLegalId">
            <summary>
            Gets the latest approved Legal ID.
            </summary>
            <returns>Legal ID, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLatestApprovedLegalId(System.Byte[])">
            <summary>
            Gets the (latest) approved Legal ID whose public key matches <paramref name="PublicKey"/>.
            </summary>
            <param name="PublicKey">Public key</param>
            <returns>Legal ID, if found, null otherwise.</returns>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.IdentityUpdated">
            <summary>
            Event raised whenever the legal identity has been updated by the server.
            The identity is validated before the event is raised. Invalid identities are discarded.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentities(Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentities(System.String,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identities are registered.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentitiesAsync">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <returns>Set of legal identities registered on the account.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentitiesAsync(System.String)">
            <summary>
            Gets legal identities registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identities are registered.</param>
            <returns>Set of legal identities registered on the account.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Gets information about a legal identity given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetTrustProvider(System.String)">
            <summary>
            Gets the trust provider hosting an entity with a given ID, in the form of LocalId@Provider.
            </summary>
            <param name="EntityId">ID, in the form of LocalId@Provider.</param>
            <returns>Provider</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Gets information about a legal identity given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentityAsync(System.String)">
            <summary>
            Gets legal identity registered with the account.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetLegalIdentityAsync(System.String,System.String)">
            <summary>
            Gets legal identity registered with the account.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to get.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentityAsync(System.String)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteLegalIdentityAsync(System.String,System.String)">
            <summary>
            Obsoletes one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to obsolete.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromisedLegalIdentity(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Reports as Compromised one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to compromise.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromisedLegalIdentity(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Reports as Compromised one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to compromise.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromisedLegalIdentityAsync(System.String)">
            <summary>
            Reports as Compromised one of the legal identities of the account, given its ID.
            </summary>
            <param name="LegalIdentityId">ID of the legal identity to compromise.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CompromisedLegalIdentityAsync(System.String,System.String)">
            <summary>
            Reports as Compromised one of the legal identities of the account, given its ID.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalIdentityId">ID of the legal identity to compromise.</param>
            <returns>Legal identity object corresponding to <paramref name="LegalIdentityId"/>.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.Byte[],Waher.Networking.XMPP.Contracts.SignWith,Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.String,System.Byte[],Waher.Networking.XMPP.Contracts.SignWith,Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.Byte[],Waher.Networking.XMPP.Contracts.SignWith)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <returns>Digital signature.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.String,System.Byte[],Waher.Networking.XMPP.Contracts.SignWith)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <returns>Digital signature.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.IO.Stream,Waher.Networking.XMPP.Contracts.SignWith,Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Sign(System.String,System.IO.Stream,Waher.Networking.XMPP.Contracts.SignWith,Waher.Networking.XMPP.Contracts.SignatureEventHandler,System.Object)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.IO.Stream,Waher.Networking.XMPP.Contracts.SignWith)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <returns>Digital signature.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignAsync(System.String,System.IO.Stream,Waher.Networking.XMPP.Contracts.SignWith)">
            <summary>
            Signs binary data with the corresponding private key.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <returns>Digital signature.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(System.String,System.Byte[],System.Byte[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignature(System.String,System.String,System.Byte[],System.Byte[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to <paramref name="Callback"/>.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignatureAsync(System.String,System.Byte[],System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <returns>Legal identity object.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateSignatureAsync(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Validates a signature of binary data.
            </summary>
            <param name="Address">Address of entity on which the legal identity are registered.</param>
            <param name="LegalId">Legal identity used to create the signature. If empty, current approved legal identities will be used to validate the signature.</param>
            <param name="Data">Binary data to sign.</param>
            <param name="Signature">Digital signature of data</param>
            <returns>Legal identity object.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <returns>Contract.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,System.Xml.XmlElement,Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText[],Waher.Networking.XMPP.Contracts.Role[],Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ForMachines">Machine-readable content.</param>
            <param name="ForHumans">Human-readable localized content. Provide one object for each language supported by the contract.</param>
            <param name="Roles">Roles defined in contract.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <returns>Contract.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContract(System.String,System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <param name="Callback">Method to call when registration response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <returns>Contract.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.CreateContractAsync(System.String,System.String,Waher.Networking.XMPP.Contracts.Part[],Waher.Networking.XMPP.Contracts.Parameter[],Waher.Networking.XMPP.Contracts.ContractVisibility,Waher.Networking.XMPP.Contracts.ContractParts,System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{Waher.Content.Duration},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new contract from a template.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="TemplateId">ID of contract to be used as a template.</param>
            <param name="Parts">Parts defined in contract. Can be empty or null, if creating an open contract or a template.</param>
            <param name="Parameters">Any contractual parameters defined for the contract.</param>
            <param name="Visibility">Visibility of the contract.</param>
            <param name="PartsMode">How parts are defined in the contract. If equal to <see cref="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined"/>,
            then the explicitly defined parts must be provided in <paramref name="Parts"/>.</param>
            <param name="Duration">Duration of the contract, once signed.</param>
            <param name="ArchiveRequired">Required archivation duration, after signed contract has become obsolete.</param>
            <param name="ArchiveOptional">Optional archivation duration, after required archivation duration has elapsed.</param>
            <param name="SignAfter">Signatures will only be accepted after this point in time, if provided.</param>
            <param name="SignBefore">Signatures will only be accepted until this point in time, if provided.</param>
            <param name="CanActAsTemplate">If the contract can act as a template.</param>
            <returns>Contract.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferences(Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferences(System.String,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferences(System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferences(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferencesAsync">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferencesAsync(System.String)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferencesAsync(System.Int32,System.Int32)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractReferencesAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get references to contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(System.String,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContracts(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync">
            <summary>
            Get contracts the account has created.
            </summary>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync(System.String)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync(System.Int32,System.Int32)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetCreatedContractsAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get contracts the account has created.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContract(Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Signs a contract
            </summary>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContract(System.String,Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Signs a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContractAsync(Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean)">
            <summary>
            Signs a contract
            </summary>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SignContractAsync(System.String,Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean)">
            <summary>
            Signs a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Smart Contract to sign.</param>
            <param name="Role">Role of the legal idenity, in the contract.</param>
            <param name="Transferable">If the signature should be transferable or not.
            Transferable signatures are copied to contracts based on the current contract as a template,
            and only if no parameters and attributes are changed. (Otherwise the signature would break.)</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferences(Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferences(System.String,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferences(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.IdReferencesEventHandler,System.Object)">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferencesAsync">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferencesAsync(System.Int32,System.Int32)">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractReferencesAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get references to contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Contract IDs</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(System.String,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContracts(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractsAsync">
            <summary>
            Get contracts the account has signed.
            </summary>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractsAsync(System.Int32,System.Int32)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Response with results.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSignedContractsAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get contracts the account has signed.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <returns>Response with results.</returns>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.ContractSigned">
            <summary>
            Event raised whenever a contract has been signed.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContract(System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Gets a contract
            </summary>
            <param name="ContractId">ID of contract to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContract(System.String,System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Gets a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractAsync(System.String)">
            <summary>
            Gets a contract
            </summary>
            <param name="ContractId">ID of contract to get.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractAsync(System.String,System.String)">
            <summary>
            Gets a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to get.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContracts(System.String[],Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Gets a collection of contracts
            </summary>
            <param name="ContractIds">IDs of contracts to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContracts(System.String,System.String[],Waher.Networking.XMPP.Contracts.ContractsEventHandler,System.Object)">
            <summary>
            Gets a collection of contracts
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractIds">IDs of contracts to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractsAsync(System.String[])">
            <summary>
            Gets a collection of contracts
            </summary>
            <param name="ContractIds">IDs of contracts to get.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractsAsync(System.String,System.String[])">
            <summary>
            Gets a collection of contracts
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractIds">IDs of contracts to get.</param>
            <returns>Contracts that could be retrieved, and references for the IDs that could not be retrieved.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteContract(System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Obsoletes a contract
            </summary>
            <param name="ContractId">ID of contract to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteContract(System.String,System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Obsoletes a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to obsolete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteContractAsync(System.String)">
            <summary>
            Obsoletes a contract
            </summary>
            <param name="ContractId">ID of contract to obsolete.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ObsoleteContractAsync(System.String,System.String)">
            <summary>
            Obsoletes a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to obsolete.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.DeleteContract(System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Deletes a contract
            </summary>
            <param name="ContractId">ID of contract to delete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.DeleteContract(System.String,System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Deletes a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to delete.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.DeleteContractAsync(System.String)">
            <summary>
            Deletes a contract
            </summary>
            <param name="ContractId">ID of contract to delete.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.DeleteContractAsync(System.String,System.String)">
            <summary>
            Deletes a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of contract to delete.</param>
            <returns>Contract</returns>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.ContractCreated">
            <summary>
            Event raised whenever a contract has been created.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.ContractUpdated">
            <summary>
            Event raised whenever a contract has been updated.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.ContractDeleted">
            <summary>
            Event raised whenever a contract has been deleted.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.UpdateContract(Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Updates a contract
            </summary>
            <param name="Contract">Contract to update.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.UpdateContract(System.String,Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Updates a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Contract to update.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.UpdateContractAsync(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Updates a contract
            </summary>
            <param name="Contract">Contract to update.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.UpdateContractAsync(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Updates a contract
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Contract">Contract to update.</param>
            <returns>Contract</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.ContractValidationEventHandler,System.Object)">
            <summary>
            Validates a smart contract.
            </summary>
            <param name="Contract">Contract to validate</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Validate(Waher.Networking.XMPP.Contracts.Contract,System.Boolean,Waher.Networking.XMPP.Contracts.ContractValidationEventHandler,System.Object)">
            <summary>
            Validates a smart contract.
            </summary>
            <param name="Contract">Contract to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <param name="Callback">Method to call when validation is completed</param>
            <param name="State">State object to pass to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Validates a smart contract.
            </summary>
            <param name="Contract">Contract to validate</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.ValidateAsync(Waher.Networking.XMPP.Contracts.Contract,System.Boolean)">
            <summary>
            Validates a smart contract.
            </summary>
            <param name="Contract">Contract to validate</param>
            <param name="ValidateState">If the state attribute should be validated. (Default=true)</param>
            <returns>Status of validation.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SendContractProposal(System.String,System.String,System.String)">
            <summary>
            Sends a contract proposal to a recipient.
            </summary>
            <param name="ContractId">ID of proposed contract.</param>
            <param name="Role">Proposed role of recipient.</param>
            <param name="To">Recipient Address (Bare or Full JID).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SendContractProposal(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a contract proposal to a recipient.
            </summary>
            <param name="ContractId">ID of proposed contract.</param>
            <param name="Role">Proposed role of recipient.</param>
            <param name="To">Recipient Address (Bare or Full JID).</param>
            <param name="Message">Optional message included in message.</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.ContractProposalReceived">
            <summary>
            Event raised when a new contract proposal has been received.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemas(Waher.Networking.XMPP.Contracts.SchemaReferencesEventHandler,System.Object)">
            <summary>
            Gets available schemas.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemas(System.String,Waher.Networking.XMPP.Contracts.SchemaReferencesEventHandler,System.Object)">
            <summary>
            Gets available schemas.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemasAsync">
            <summary>
            Gets available schemas.
            </summary>
            <returns>XML Schema references.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemasAsync(System.String)">
            <summary>
            Gets available schemas.
            </summary>
            <param name="Address">Address of server (component).</param>
            <returns>XML Schema references.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchema(System.String,Waher.Networking.XMPP.Contracts.SchemaEventHandler,System.Object)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchema(System.String,Waher.Networking.XMPP.Contracts.SchemaDigest,Waher.Networking.XMPP.Contracts.SchemaEventHandler,System.Object)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Digest">Specifies a specific schema version. If not provided (or null), the most recently recorded schema will be returned.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchema(System.String,System.String,Waher.Networking.XMPP.Contracts.SchemaEventHandler,System.Object)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchema(System.String,System.String,Waher.Networking.XMPP.Contracts.SchemaDigest,Waher.Networking.XMPP.Contracts.SchemaEventHandler,System.Object)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Digest">Specifies a specific schema version. If not provided (or null), the most recently recorded schema will be returned.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemaAsync(System.String)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Namespace">Namespace of schema to get.</param>
            <returns>Binary XML schema.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemaAsync(System.String,Waher.Networking.XMPP.Contracts.SchemaDigest)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Digest">Specifies a specific schema version. If not provided (or null), the most recently recorded schema will be returned.</param>
            <returns>Binary XML schema.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemaAsync(System.String,System.String)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Namespace">Namespace of schema to get.</param>
            <returns>Binary XML schema.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetSchemaAsync(System.String,System.String,Waher.Networking.XMPP.Contracts.SchemaDigest)">
            <summary>
            Gets a schema.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Namespace">Namespace of schema to get.</param>
            <param name="Digest">Specifies a specific schema version. If not provided (or null), the most recently recorded schema will be returned.</param>
            <returns>Binary XML schema.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentities(System.String,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentities(System.String,System.Boolean,System.Boolean,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Current">If current legal identities are to be returned. (Default=false).</param>
            <param name="Historic">If legal identities at the time of signature are to be returned. (Default=true).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentities(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentities(System.String,System.String,System.Boolean,System.Boolean,Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Current">If current legal identities are to be returned. (Default=false).</param>
            <param name="Historic">If legal identities at the time of signature are to be returned. (Default=true).</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentitiesAsync(System.String)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <returns>Legal identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentitiesAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Current">If current legal identities are to be returned. (Default=false).</param>
            <param name="Historic">If legal identities at the time of signature are to be returned. (Default=true).</param>
            <returns>Legal identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentitiesAsync(System.String,System.String)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <returns>Legal identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractLegalIdentitiesAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets available legal identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get legal identities related to the contract identified by this identity.</param>
            <param name="Current">If current legal identities are to be returned. (Default=false).</param>
            <param name="Historic">If legal identities at the time of signature are to be returned. (Default=true).</param>
            <returns>Legal identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractNetworkIdentities(System.String,Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available network identities related to a contract.
            </summary>
            <param name="ContractId">Get network identities related to the contract identified by this identity.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractNetworkIdentities(System.String,System.String,Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventHandler,System.Object)">
            <summary>
            Gets available network identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get network identities related to the contract identified by this identity.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractNetworkIdentitiesAsync(System.String)">
            <summary>
            Gets available network identities related to a contract.
            </summary>
            <param name="ContractId">Get network identities related to the contract identified by this identity.</param>
            <returns>Network identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetContractNetworkIdentitiesAsync(System.String,System.String)">
            <summary>
            Gets available network identities related to a contract.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Get network identities related to the contract identified by this identity.</param>
            <returns>Network identities.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Search(Waher.Networking.XMPP.Contracts.Search.SearchFilter[],Waher.Networking.XMPP.Contracts.SearchResultEventHandler,System.Object)">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Filter">Search filters.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Search(System.String,Waher.Networking.XMPP.Contracts.Search.SearchFilter[],Waher.Networking.XMPP.Contracts.SearchResultEventHandler,System.Object)">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Filter">Search filters.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Search(System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.Search.SearchFilter[],Waher.Networking.XMPP.Contracts.SearchResultEventHandler,System.Object)">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Filter">Search filters.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Search(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.Search.SearchFilter[],Waher.Networking.XMPP.Contracts.SearchResultEventHandler,System.Object)">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Filter">Search filters.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to the callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SearchAsync(Waher.Networking.XMPP.Contracts.Search.SearchFilter[])">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Filter">Search filters.</param>
            <returns>Search result.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SearchAsync(System.String,Waher.Networking.XMPP.Contracts.Search.SearchFilter[])">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Filter">Search filters.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SearchAsync(System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.Search.SearchFilter[])">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Filter">Search filters.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SearchAsync(System.String,System.Int32,System.Int32,Waher.Networking.XMPP.Contracts.Search.SearchFilter[])">
            <summary>
            Performs a search of public smart contracts.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="Offset">Result will start with the response at this offset into result set.</param>
            <param name="MaxCount">Result will be limited to this number of items.</param>
            <param name="Filter">Search filters.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionIdentityAsync(System.String,System.String,System.String)">
            <summary>
            Sends a petition to the owner of a legal identity, to access the information in the identity. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForIdentityReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedIdentityResponseReceived"/> event is raised.
            </summary>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionIdentityAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a petition to the owner of a legal identity, to access the information in the identity. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForIdentityReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedIdentityResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionIdentityResponseAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition for information about a legal identity.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForIdentityReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedIdentityResponseReceived"/> event is raised.
            </summary>
            <param name="LegalId">Legal Identity petitioned.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionIdentityResponseAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition for information about a legal identity.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForIdentityReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedIdentityResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">Legal Identity petitioned.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForIdentityReceived">
            <summary>
            Event raised when someone requests access to one of the legal identities owned by the client.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedIdentityResponseReceived">
            <summary>
            Event raised when a response to an identity petition has been received by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionSignatureAsync(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Sends a petition to a third party to request a digital signature of some content. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForSignatureReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedSignatureResponseReceived"/> event is raised.
            </summary>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="Content">Content to be signed.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionSignatureAsync(System.String,System.String,System.Byte[],System.String,System.String)">
            <summary>
            Sends a petition to a third party to request a digital signature of some content. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForSignatureReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedSignatureResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="Content">Content to be signed.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionSignatureResponseAsync(System.String,System.Byte[],System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition for a signature by the client.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForSignatureReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedSignatureResponseReceived"/> event is raised.
            </summary>
            <param name="LegalId">Legal Identity petitioned.</param>
            <param name="Content">Content to be signed.</param>
            <param name="Signature">Digital signature of content, made by the legal identity.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionSignatureResponseAsync(System.String,System.String,System.Byte[],System.Byte[],System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition for a signature by the client.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForSignatureReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedSignatureResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">Legal Identity petitioned.</param>
            <param name="Content">Content to be signed.</param>
            <param name="Signature">Digital signature of content, made by the legal identity.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForSignatureReceived">
            <summary>
            Event raised when someone requests access to one of the legal identities owned by the client.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedSignatureResponseReceived">
            <summary>
            Event raised when a response to a signature petition has been received by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionPeerReviewIDAsync(System.String,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.String)">
            <summary>
            Sends a petition to a third party to peer review a new legal identity. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForPeerReviewIDReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedPeerReviewIDResponseReceived"/> event is raised.
            
            Note: This is a special case of requesting a signature from a third party. In the normal
            case, both parties have valid legal identities. In this case, the requestor does not need a
            valid legal identity. However, the legal identity must be in an applied state, and the request
            properly signed. The identity also needs a JID meta-data tag equal to the bare JID of the
            client making the petition.
            </summary>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="Identity">Legal Identity to peer review.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionPeerReviewIDAsync(System.String,System.String,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.String)">
            <summary>
            Sends a petition to a third party to peer review a new legal identity. The petition is not
            guaranteed to return a response. Response is returned if the recipient accepts the petition.
            When a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForPeerReviewIDReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedPeerReviewIDResponseReceived"/> event is raised.
            
            Note: This is a special case of requesting a signature from a third party. In the normal
            case, both parties have valid legal identities. In this case, the requestor does not need a
            valid legal identity. However, the legal identity must be in an applied state, and the request
            properly signed. The identity also needs a JID meta-data tag equal to the bare JID of the
            client making the petition.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">Legal Identity to petition.</param>
            <param name="Identity">Legal Identity to peer review.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForPeerReviewIDReceived">
            <summary>
            Event raised when someone makes a request to one of the legal identities owned by the client, for a peer review of a newly created legal identity.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedPeerReviewIDResponseReceived">
            <summary>
            Event raised when a response to a ID Peer Review petition has been received by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AddPeerReviewIDAttachment(Waher.Networking.XMPP.Contracts.LegalIdentity,Waher.Networking.XMPP.Contracts.LegalIdentity,System.Byte[])">
            <summary>
            Adds an attachment to a legal identity with information about a peer review of the identity.
            </summary>
            <param name="Identity"></param>
            <param name="ReviewerLegalIdentity">Identity of reviewer.</param>
            <param name="PeerSignature">Signature made by reviewer.</param>
            <returns>Updated identity.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionContractAsync(System.String,System.String,System.String)">
            <summary>
            Sends a petition to the parts of a smart contract, to access the information in the contract. The petition is not
            guaranteed to return a response. Response is returned if one of the parts accepts the petition.
            When a petition for a contract is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForContractReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedContractResponseReceived"/> event is raised.
            </summary>
            <param name="ContractId">Smart Contract to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionContractAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a petition to the parts of a smart contract, to access the information in the contract. The petition is not
            guaranteed to return a response. Response is returned if one of the parts accepts the petition.
            When a petition for a contract is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForContractReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedContractResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Smart Contract to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="Purpose">Purpose string to show to the owner.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionContractResponseAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition to access a smart contract.
            When a petition for a contract is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForContractReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedContractResponseReceived"/> event is raised.
            </summary>
            <param name="ContractId">Smart Contract to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionContractResponseAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends a response to a petition to access a smart contract.
            When a petition for a contract is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForContractReceived"/> event is raised.
            When a response to a petition is received, the <see cref="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedContractResponseReceived"/> event is raised.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">Smart Contract to petition.</param>
            <param name="PetitionId">A petition identifier. This identifier will follow the petition, and can be used
            to identify the petition request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="Response">If the petition is accepted (true) or rejected (false).</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionForContractReceived">
            <summary>
            Event raised when someone requests access to a smart contract to which the client is part.
            </summary>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionedContractResponseReceived">
            <summary>
            Event raised when a response to a contract petition has been received by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AddLegalIdAttachment(System.String,System.String,System.Byte[],Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Adds an attachment to a newly created legal identity.
            </summary>
            <param name="LegalId">ID of Legal Identity.</param>
            <param name="GetUrl">The GET URL of the attachment to associate with the legal identity.
            The URL might previously have been provided by the HTTP Upload Service.</param>
            <param name="Signature">Signature of the content of the attachment, made by the same private key used when
            creating the legal identity object.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AddLegalIdAttachmentAsync(System.String,System.String,System.Byte[])">
            <summary>
            Adds an attachment to a newly created legal identity.
            </summary>
            <param name="LegalId">ID of Legal Identity.</param>
            <param name="GetUrl">The GET URL of the attachment to associate with the legal identity.
            The URL is previously provided by the HTTP Upload Service.</param>
            <param name="Signature">Signature of the content of the attachment, made by the same private key used when
            creating the legal identity object.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AddContractAttachment(System.String,System.String,System.Byte[],Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Adds an attachment to a proposed or approved contract before it is being signed.
            </summary>
            <param name="ContractId">ID of Smart Contract.</param>
            <param name="GetUrl">The GET URL of the attachment to associate with the smart contract.
            The URL might previously have been provided by the HTTP Upload Service.</param>
            <param name="Signature">Signature of the content of the attachment, made by an approved legal identity of the sender.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AddContractAttachmentAsync(System.String,System.String,System.Byte[])">
            <summary>
            Adds an attachment to a proposed or approved contract before it is being signed.
            </summary>
            <param name="ContractId">ID of Smart Contract.</param>
            <param name="GetUrl">The GET URL of the attachment to associate with the smart contract.
            The URL might previously have been provided by the HTTP Upload Service.</param>
            <param name="Signature">Signature of the content of the attachment, made by an approved legal identity of the sender.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetAttachmentAsync(System.String,Waher.Networking.XMPP.Contracts.SignWith)">
            <summary>
            Gets an attachment from a Trust Provider
            </summary>
            <param name="Url">URL to attachment.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <returns>Content-Type, and attachment.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetAttachmentAsync(System.String,Waher.Networking.XMPP.Contracts.SignWith,System.Int32)">
            <summary>
            Gets an attachment from a Trust Provider
            </summary>
            <param name="Url">URL to attachment.</param>
            <param name="SignWith">What keys that can be used to sign the data.</param>
            <param name="Timeout">Timeout, in milliseconds.</param>
            <returns>Content-Type, and attachment.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.RemoveLegalIdAttachment(System.String,Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler,System.Object)">
            <summary>
            Removes an attachment from a newly created legal identity.
            </summary>
            <param name="AttachmentId">ID of Attachment.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.RemoveLegalIdAttachmentAsync(System.String)">
            <summary>
            Removes an attachment from a newly created legal identity.
            </summary>
            <param name="AttachmentId">ID of Attachment.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.RemoveContractAttachment(System.String,Waher.Networking.XMPP.Contracts.SmartContractEventHandler,System.Object)">
            <summary>
            Removes an attachment from a proposed or approved contract before it is being signed.
            </summary>
            <param name="AttachmentId">ID of Attachment.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.RemoveContractAttachmentAsync(System.String)">
            <summary>
            Removes an attachment from a proposed or approved contract before it is being signed.
            </summary>
            <param name="AttachmentId">ID of Attachment.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.String)">
            <summary>
            Encrypts a message for an intended recipient given its public key and
            key algorithm name.
            </summary>
            <param name="Message">Message to encrypt.</param>
            <param name="Nonce">Nonce-value to use during encryption. Size does not matter,
            but must be unique for every message.</param>
            <param name="RecipientPublicKey">Public key of recipient.</param>
            <param name="RecipientPublicKeyName">Name of key algorithm of recipient.</param>
            <returns>Encrypted message, together with the public key used to obtain the shared secret.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.String,System.String)">
            <summary>
            Encrypts a message for an intended recipient given its public key and
            key algorithm name.
            </summary>
            <param name="Message">Message to encrypt.</param>
            <param name="Nonce">Nonce-value to use during encryption. Size does not matter,
            but must be unique for every message.</param>
            <param name="RecipientPublicKey">Public key of recipient.</param>
            <param name="RecipientPublicKeyName">Name of key algorithm of recipient.</param>
            <param name="RecipientPublicKeyNamespace">Namespace of key algorithm of recipient.</param>
            <returns>Encrypted message, together with the public key used to obtain the shared secret.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts a message that was aimed at the client using the current keys.
            </summary>
            <param name="EncryptedMessage">Encrypted message.</param>
            <param name="SenderPublicKey">Public key used by the sender.</param>
            <param name="Nonce">Nonce-value to use during decryption. Must be the same
            as the one used during encryption.</param>
            <returns>Decrypted message.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToId(System.String,System.String,System.Boolean,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Authorizes access to (or revokes access to) a Legal ID of the caller.
            </summary>
            <param name="LegalId">ID of Legal ID</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Legal ID or not. (Setting false, revokes earlier authorization.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToId(System.String,System.String,System.String,System.Boolean,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Authorizes access to (or revokes access to) a Legal ID of the caller.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">ID of Legal ID</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Legal ID or not. (Setting false, revokes earlier authorization.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToIdAsync(System.String,System.String,System.Boolean)">
            <summary>
            Authorizes access to (or revokes access to) a Legal ID of the caller.
            </summary>
            <param name="LegalId">ID of Legal ID</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Legal ID or not. (Setting false, revokes earlier authorization.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToIdAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Authorizes access to (or revokes access to) a Legal ID of the caller.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="LegalId">ID of Legal ID</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Legal ID or not. (Setting false, revokes earlier authorization.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToContract(System.String,System.String,System.Boolean,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Authorizes access to (or revokes access to) a Contract of which the caller is part and can access.
            </summary>
            <param name="ContractId">ID of Contract</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Contract or not. (Setting false, revokes earlier authorization.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToContract(System.String,System.String,System.String,System.Boolean,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Authorizes access to (or revokes access to) a Contract of which the caller is part and can access.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of Contract</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Contract or not. (Setting false, revokes earlier authorization.)</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToContractAsync(System.String,System.String,System.Boolean)">
            <summary>
            Authorizes access to (or revokes access to) a Contract of which the caller is part and can access.
            </summary>
            <param name="ContractId">ID of Contract</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Contract or not. (Setting false, revokes earlier authorization.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.AuthorizeAccessToContractAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Authorizes access to (or revokes access to) a Contract of which the caller is part and can access.
            </summary>
            <param name="Address">Address of server (component).</param>
            <param name="ContractId">ID of Contract</param>
            <param name="RemoteId">ID of Legal ID of remote party</param>
            <param name="Authorized">If the remote party is authorized access to the referenced Contract or not. (Setting false, revokes earlier authorization.)</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetPeerReviewIdServiceProviders(Waher.Networking.XMPP.Contracts.ServiceProvidersEventHandler{Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId},System.Object)">
            <summary>
            Gets available service providers who can help review an ID application.
            </summary>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetPeerReviewIdServiceProviders(System.String,Waher.Networking.XMPP.Contracts.ServiceProvidersEventHandler{Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId},System.Object)">
            <summary>
            Gets available service providers who can help review an ID application.
            </summary>
            <param name="ComponentAddress">Address of component.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetPeerReviewIdServiceProvidersAsync">
            <summary>
            Gets available service providers who can help review an ID application.
            </summary>
            <returns>Peer Review Services available.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.GetPeerReviewIdServiceProvidersAsync(System.String)">
            <summary>
            Gets available service providers who can help review an ID application.
            </summary>
            <param name="ComponentAddress">Address of component.</param>
            <returns>Peer Review Services available.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SelectPeerReviewService(System.String,System.String,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Selects a service provider for peer review. This needs to be done before requesting the trust provider
            (given its JID) to peer review an identity application. Such service providers are returned by calling
            the GetPeerReviewIdServiceProviders method (or overloads), looking for results with External=false.
            </summary>
            <param name="Provider">Identifies the Peer Review Service Provider on the server.</param>
            <param name="ServiceId">Identifies the Peer Review Service hosted by the service provider.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SelectPeerReviewService(System.String,System.String,System.String,Waher.Networking.XMPP.IqResultEventHandlerAsync,System.Object)">
            <summary>
            Selects a service provider for peer review. This needs to be done before requesting the trust provider
            (given its JID) to peer review an identity application. Such service providers are returned by calling
            the GetPeerReviewIdServiceProviders method (or overloads), looking for results with External=false.
            </summary>
            <param name="ComponentAddress">Address of component.</param>
            <param name="Provider">Identifies the Peer Review Service Provider on the server.</param>
            <param name="ServiceId">Identifies the Peer Review Service hosted by the service provider.</param>
            <param name="Callback">Method to call when response is returned.</param>
            <param name="State">State object to pass on to callback method.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SelectPeerReviewServiceAsync(System.String,System.String)">
            <summary>
            Selects a service provider for peer review. This needs to be done before requesting the trust provider
            (given its JID) to peer review an identity application. Such service providers are returned by calling
            the GetPeerReviewIdServiceProviders method (or overloads), looking for results with External=false.
            </summary>
            <param name="Provider">Identifies the Peer Review Service Provider on the server.</param>
            <param name="ServiceId">Identifies the Peer Review Service hosted by the service provider.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsClient.SelectPeerReviewServiceAsync(System.String,System.String,System.String)">
            <summary>
            Selects a service provider for peer review. This needs to be done before requesting the trust provider
            (given its JID) to peer review an identity application. Such service providers are returned by calling
            the GetPeerReviewIdServiceProviders method (or overloads), looking for results with External=false.
            </summary>
            <param name="ComponentAddress">Address of component.</param>
            <param name="Provider">Identifies the Peer Review Service Provider on the server.</param>
            <param name="ServiceId">Identifies the Peer Review Service hosted by the service provider.</param>
        </member>
        <member name="E:Waher.Networking.XMPP.Contracts.ContractsClient.PetitionClientUrlReceived">
            <summary>
            Event raised when a Client URL has been sent to the client as part of a
            petition process. Such an URL must be opened by the client to complete 
            the petition.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.DateParameter">
            <summary>
            Date contractual parameter
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DateParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DateParameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DateParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.DateTimeParameter">
            <summary>
            Date and Time contractual parameter
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DateTimeParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DateTimeParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.DurationParameter">
            <summary>
            Duration contractual parameter
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DurationParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.DurationParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractState">
            <summary>
            Recognized contract states
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Proposed">
            <summary>
            The contract has been proposed as a new contract.
            It needs to be revied and approved by the Trust Provider before it can be used as a template or be signed.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Rejected">
            <summary>
            The contract has been deemed incomplete, inconsistent, or otherwise faulty.
            A rejected contract cannot be used as a template or be signed.
            A rejected contract can be updated by the creator, and thus be put in a Proposed state again.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Approved">
            <summary>
            The contract has been reviewed and approved. It is still not signed, but can act as a template for other contracts.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.BeingSigned">
            <summary>
            The contract is being signed. Not all reuired roles have signed however, and the contract is not legally binding.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Signed">
            <summary>
            The contract has been signed by all required parties, and is legally binding.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Failed">
            <summary>
            The contract has either manually, or automatically, been deemed failed, by the Trust Provider. This can happen when any of the parties fail to fulfill their obligations as defined by the contract.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Obsoleted">
            <summary>
            The contract has been explicitly obsoleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractState.Deleted">
            <summary>
            The contract has been explicitly deleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractVisibility">
            <summary>
            Visibility types for contracts.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.CreatorAndParts">
            <summary>
            Contract is only accessible to the creator, and any parts in the contract.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.DomainAndParts">
            <summary>
            Contract is accessible to the creator of the contract, any parts in the contract, and any account on the Trust Provider server domain.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.Public">
            <summary>
            Contract is accessible by everyone requesting it. It is not searchable.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractVisibility.PublicSearchable">
            <summary>
            Contract is accessible by everyone requesting it. It is also searchable.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignWith">
            <summary>
            Options on what keys to use when signing data.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.SignWith.CurrentKeys">
            <summary>
            Use current endpoint keys.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.SignWith.LatestApprovedId">
            <summary>
            Use keys from latest approved Legal Identity
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.SignWith.LatestApprovedIdOrCurrentKeys">
            <summary>
            Use keys from latest approved Legal Identity, if any, or current endpoint keys if not.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractPetitionEventHandler">
            <summary>
            Delegate for smart contract petition events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs">
            <summary>
            Event arguments for smart contract petitions
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Event arguments for smart contract petitions
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestorIdentity">Legal Identity of entity making the request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="RequestedContractId">Petition for this smart contract.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Purpose">Purpose of petitioning the identity information.</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.RequestorIdentity">
            <summary>
            Legal Identity of requesting entity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.RequestorFullJid">
            <summary>
            Full JID of requestor.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.RequestedContractId">
            <summary>
            Requested contract ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.Purpose">
            <summary>
            Purpose
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventHandler">
            <summary>
            Delegate for smart contract petition response events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs">
            <summary>
            Event arguments for smart contract petition responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.Contract,System.String,System.Boolean,System.String)">
            <summary>
            Event arguments for smart contract petition responses
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestedContract">Requested contract, if accepted, null if rejected.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Response">If accepted (true) or rejected (false).</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs.RequestedContract">
            <summary>
            Requested contract, if accepted, null if rejected.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs.Response">
            <summary>
            If accepted (true) or rejected (false).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractPetitionResponseEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractProposalEventHandler">
            <summary>
            Delegate for smart contract proposal events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractProposalEventArgs">
            <summary>
            Event arguments for smart contract proposals
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractProposalEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,System.String,System.String,System.String)">
            <summary>
            Event arguments for smart contract petitions
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="ContractId">ID of proposed contract.</param>
            <param name="Role">Proposed role in proposed contract.</param>
            <param name="Message">Optional message to present to recipient.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractProposalEventArgs.ContractId">
            <summary>
            ID of proposed contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractProposalEventArgs.Role">
            <summary>
            Proposed role in proposed contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractProposalEventArgs.MessageText">
            <summary>
            Optional message to present to recipient.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractReferenceEventHandler">
            <summary>
            Delegate for event handlers referencing a contract.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractReferenceEventArgs">
            <summary>
            Event arguments for events referencing a contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractReferenceEventArgs.#ctor(System.String)">
            <summary>
            Event arguments for events referencing a contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractReferenceEventArgs.ContractId">
            <summary>
            ID of contract being signed.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractReferenceEventArgs.ContractIdUri">
            <summary>
            ID of contract being signed, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractReferenceEventArgs.ContractIdUriString">
            <summary>
            ID of contract being signed, as an URI string.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractsEventHandler">
            <summary>
            Delegate for Contracts callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractsEventArgs">
            <summary>
            Event arguments for Contracts responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractsEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.Contract[],System.String[])">
            <summary>
            Event arguments for ID References responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Contracts">Contracts.</param>
            <param name="ReferencesOnly">References to contracts that could not be returned.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsEventArgs.Contracts">
            <summary>
            Contracts
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractsEventArgs.References">
            <summary>
            References to contracts that could not be returned.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractSignedEventHandler">
            <summary>
            Delegate for contract signature event handlers.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs">
            <summary>
            Event arguments for contract signature events
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Event arguments for contract signature events
            </summary>
            <param name="ContractId">Contract ID</param>
            <param name="LegalId">Legal ID</param>
            <param name="Role">Role</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs.LegalId">
            <summary>
            ID of legal identity signing the contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs.Role">
            <summary>
            Role the legal identity has signed.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs.LegalIdUri">
            <summary>
            ID of legal identity signing the contract, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractSignedEventArgs.LegalIdUriString">
            <summary>
            ID of legal identity signing the contract, as an URI string.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractStatus">
            <summary>
            Validation Status of smart contract
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ContractUndefined">
            <summary>
            Contract is not defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NotApproved">
            <summary>
            Contract is not approved (yet) by trust provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NotValidYet">
            <summary>
            Contract is not valid yet. 
            <see cref="P:Waher.Networking.XMPP.Contracts.Contract.From"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NotValidAnymore">
            <summary>
            Contract is not valid anymore.
            <see cref="P:Waher.Networking.XMPP.Contracts.Contract.To"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.TemplateOnly">
            <summary>
            Contract is a template, not a valid legal document.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NotLegallyBinding">
            <summary>
            The contract is not in a legally binding state. The prerequisites of the contracts are not met.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.HumanReadableNotWellDefined">
            <summary>
            Human-readable section not properly defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ParameterValuesNotValid">
            <summary>
            Parameter Values not valid
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.MachineReadableNotWellDefined">
            <summary>
            Machine-readable section not properly defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NoSchemaAccess">
            <summary>
            Unable to get access to schema used to validate the machine-readable section.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.CorruptSchema">
            <summary>
            Corrupt schema used for validating machine-readable part.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.FraudulentSchema">
            <summary>
            Fraudulent schema used for validating machine-readable part.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.FraudulentMachineReadable">
            <summary>
            Fraudulent machine-readable claim. Does not validate against schema.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NoClientSignatures">
            <summary>
            No client signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ClientSignatureInvalid">
            <summary>
            One or more of the client signatures are invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ClientIdentityInvalid">
            <summary>
            One or more of the legal identities used to sign the contract are invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.AttachmentLacksUrl">
            <summary>
            Attachment is missing download URL.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.AttachmentUnavailable">
            <summary>
            Unable to download attachment.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.AttachmentInconsistency">
            <summary>
            Information about attachment is inconsistent.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.AttachmentSignatureInvalid">
            <summary>
            Attachment signature is invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NoTrustProvider">
            <summary>
            No Trust Provider attesting to the validity of the identity.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NoProviderPublicKey">
            <summary>
            No provider public key found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.NoProviderSignature">
            <summary>
            No Trust Provider signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ProviderSignatureInvalid">
            <summary>
            Provider signature invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.ProviderKeyNotRecognized">
            <summary>
            Provider key not recognized.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractStatus.Valid">
            <summary>
            Contract valid.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractValidationEventHandler">
            <summary>
            Delegate for identity validation callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractValidationEventArgs">
            <summary>
            Event arguments for identity validation responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ContractValidationEventArgs.#ctor(Waher.Networking.XMPP.Contracts.ContractStatus,System.Object)">
            <summary>
            Event arguments for identity validation responses
            </summary>
            <param name="Status">Validation status</param>
            <param name="State">State object</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractValidationEventArgs.Status">
            <summary>
            Validation status of smart contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ContractValidationEventArgs.State">
            <summary>
            State object.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityStatus">
            <summary>
            Validation Status of legal identity
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.IdentityUndefined">
            <summary>
            Identity is not defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotApproved">
            <summary>
            Identity is not approved (yet) by trust provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotValidYet">
            <summary>
            Legal identity is not valid yet. 
            <see cref="P:Waher.Networking.XMPP.Contracts.LegalIdentity.From"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NotValidAnymore">
            <summary>
            Legal identity is not valid anymore.
            <see cref="P:Waher.Networking.XMPP.Contracts.LegalIdentity.To"/>
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoClientPublicKey">
            <summary>
            No client public key found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ClientKeyNotRecognized">
            <summary>
            Client key not recognized.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoClientSignature">
            <summary>
            No client signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ClientSignatureInvalid">
            <summary>
            Client signature invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.AttachmentLacksUrl">
            <summary>
            Attachment is missing download URL.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.AttachmentUnavailable">
            <summary>
            Unable to download attachment.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.AttachmentInconsistency">
            <summary>
            Information about attachment is inconsistent.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.AttachmentSignatureInvalid">
            <summary>
            Attachment signature is invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoTrustProvider">
            <summary>
            No Trust Provider attesting to the validity of the identity.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoProviderPublicKey">
            <summary>
            No provider public key found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.NoProviderSignature">
            <summary>
            No Trust Provider signature found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ProviderSignatureInvalid">
            <summary>
            Provider signature invalid.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.ProviderKeyNotRecognized">
            <summary>
            Provider key not recognized.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityStatus.Valid">
            <summary>
            Legal identity valid
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityValidationEventHandler">
            <summary>
            Delegate for identity validation callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs">
            <summary>
            Event arguments for identity validation responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.#ctor(Waher.Networking.XMPP.Contracts.IdentityStatus,System.Object)">
            <summary>
            Event arguments for identity validation responses
            </summary>
            <param name="Status">Validation status</param>
            <param name="State">State object</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.Status">
            <summary>
            Validation status of legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdentityValidationEventArgs.State">
            <summary>
            State object.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdReferencesEventHandler">
            <summary>
            Delegate for ID References callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs">
            <summary>
            Event arguments for ID References responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,System.String[])">
            <summary>
            Event arguments for ID References responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="References">ID References.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdReferencesEventArgs.References">
            <summary>
            ID References
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventHandler">
            <summary>
            Delegate for legal identities callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs">
            <summary>
            Event arguments for legal identities responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity[])">
            <summary>
            Event arguments for legal identities responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Identities">Legal Identities.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentitiesEventArgs.Identities">
            <summary>
            Legal Identities
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityEventHandler">
            <summary>
            Delegate for legal identity callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs">
            <summary>
            Event arguments for legal identity responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity)">
            <summary>
            Event arguments for legal identity responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Identity">Legal Identity.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityEventArgs.Identity">
            <summary>
            Legal Identity
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventHandler">
            <summary>
            Delegate for legal identity petition events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs">
            <summary>
            Event arguments for legal identity petitions
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Event arguments for legal identity petitions
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestorIdentity">Legal Identity of entity making the request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="RequestedIdentityId">Petition for this legal identity.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Purpose">Purpose of petitioning the identity information.</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.RequestorIdentity">
            <summary>
            Legal Identity of requesting entity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.RequestorFullJid">
            <summary>
            Full JID of requestor.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.RequestedIdentityId">
            <summary>
            Requested identity ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.Purpose">
            <summary>
            Purpose
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventHandler">
            <summary>
            Delegate for legal identity petition response events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs">
            <summary>
            Event arguments for legal identity petition responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.Boolean,System.String)">
            <summary>
            Event arguments for legal identity petition responses
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestedIdentity">Requested identity, if accepted, null if rejected.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Response">If accepted (true) or rejected (false).</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs.RequestedIdentity">
            <summary>
            Requested identity, if accepted, null if rejected.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs.Response">
            <summary>
            If accepted (true) or rejected (false).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityPetitionResponseEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventHandler">
            <summary>
            Delegate for network identities callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventArgs">
            <summary>
            Event arguments for network identities responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.NetworkIdentity[])">
            <summary>
            Event arguments for network identities responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Identities">Network Identities.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NetworkIdentitiesEventArgs.Identities">
            <summary>
            Network Identities
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.KeyEventHandler">
            <summary>
            Delegate for key callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.KeyEventArgs">
            <summary>
            Event arguments for key responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.KeyEventArgs.#ctor(Waher.Networking.XMPP.Contracts.KeyEventArgs)">
            <summary>
            Event arguments for key responses
            </summary>
            <param name="e">IQ response event arguments.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.KeyEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.IE2eEndpoint)">
            <summary>
            Event arguments for key responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Key">Key.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.KeyEventArgs.#ctor(Waher.Networking.XMPP.IE2eEndpoint,System.Object)">
            <summary>
            Event arguments for key responses
            </summary>
            <param name="Key">Key.</param>
            <param name="State">State object.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.KeyEventArgs.Key">
            <summary>
            Public key of server endpoint.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaEventHandler">
            <summary>
            Delegate for schema callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaEventArgs">
            <summary>
            Event arguments for schema responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,System.Byte[])">
            <summary>
            Event arguments for schema responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Schema">XML Schema.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaEventArgs.Schema">
            <summary>
            Binary XML Schema.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaReferencesEventHandler">
            <summary>
            Delegate for Schema References callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaReferencesEventArgs">
            <summary>
            Event arguments for Schema References responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaReferencesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.SchemaReference[])">
            <summary>
            Event arguments for Schema References responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="References">Schema References.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaReferencesEventArgs.References">
            <summary>
            Schema References
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SearchResultEventHandler">
            <summary>
            Delegate for Search Result callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SearchResultEventArgs">
            <summary>
            Event arguments for Search Result responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SearchResultEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,System.Int32,System.Int32,System.Boolean,System.String[])">
            <summary>
            Event arguments for Search Result responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Offset">Result starts with the response at this offset into result set.</param>
            <param name="MaxCount">Result is limited to this number of items.</param>
            <param name="More">If more results are available on the server.</param>
            <param name="References">Search Result.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SearchResultEventArgs.Offset">
            <summary>
            Result starts with the response at this offset into result set.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SearchResultEventArgs.MaxCount">
            <summary>
            Result is limited to this number of items.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SearchResultEventArgs.More">
            <summary>
            If more results are available on the server.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SearchResultEventArgs.References">
            <summary>
            Contract references
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignatureEventHandler">
            <summary>
            Delegate for signature callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignatureEventArgs">
            <summary>
            Event arguments for signature responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SignatureEventArgs.#ctor(Waher.Networking.XMPP.IE2eEndpoint,System.Byte[],System.Object)">
            <summary>
            Event arguments for signature responses
            </summary>
            <param name="Key">Key algorithm used.</param>
            <param name="Signature">Digital signature</param>
            <param name="State">State object.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SignatureEventArgs.#ctor(Waher.Networking.XMPP.Contracts.KeyEventArgs,System.Byte[])">
            <summary>
            Event arguments for signature responses
            </summary>
            <param name="e">Event arguments of request response.</param>
            <param name="Signature">Digital signature</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignatureEventArgs.Signature">
            <summary>
            Digital signature
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignaturePetitionEventHandler">
            <summary>
            Delegate for digital signature petition events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs">
            <summary>
            Event arguments for digital signature petitions
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.String,System.String,System.String,System.Byte[],System.String)">
            <summary>
            Event arguments for legal identity petitions
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestorIdentity">Legal Identity of entity making the request.</param>
            <param name="RequestorFullJid">Full JID of requestor.</param>
            <param name="SignatoryIdentityId">Legal identity of petitioned signatory.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Purpose">Purpose of petitioning the identity information.</param>
            <param name="Content">Content to sign.</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.RequestorIdentity">
            <summary>
            Legal Identity of requesting entity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.RequestorFullJid">
            <summary>
            Full JID of requestor.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.SignatoryIdentityId">
            <summary>
            Legal identity of petitioned signatory.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.Purpose">
            <summary>
            Purpose
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.ContentToSign">
            <summary>
            Content to sign.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventHandler">
            <summary>
            Delegate for signature petition response events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs">
            <summary>
            Event arguments for signature petition responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,Waher.Networking.XMPP.Contracts.LegalIdentity,System.String,System.Byte[],System.Boolean,System.String)">
            <summary>
            Event arguments for signature petition responses
            </summary>
            <param name="e">Message event arguments.</param>
            <param name="RequestedIdentity">Requested identity, if accepted, null if rejected.</param>
            <param name="PetitionId">Petition ID. Identifies the petition.</param>
            <param name="Signature">Digital Signature petitioned.</param>
            <param name="Response">If accepted (true) or rejected (false).</param>
            <param name="ClientEndpoint">Remote endpoint of remote party client.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.RequestedIdentity">
            <summary>
            Requested identity, if accepted, null if rejected.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.PetitionId">
            <summary>
            Petition ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.Signature">
            <summary>
            Digital Signature petitioned, if accepted by recipient.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.Response">
            <summary>
            If accepted (true) or rejected (false).
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SignaturePetitionResponseEventArgs.ClientEndpoint">
            <summary>
            Remote endpoint of remote party client.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractEventHandler">
            <summary>
            Delegate for smart contract callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractEventArgs">
            <summary>
            Event arguments for smart contract responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SmartContractEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Event arguments for smart contract responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Contract">Smart Contract.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SmartContractEventArgs.Contract">
            <summary>
            Smart Contract
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractsEventHandler">
            <summary>
            Delegate for smart contracts callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs">
            <summary>
            Event arguments for smart contracts responses
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs,Waher.Networking.XMPP.Contracts.Contract[])">
            <summary>
            Event arguments for smart contracts responses
            </summary>
            <param name="e">IQ response event arguments.</param>
            <param name="Contracts">Smart Contracts.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SmartContractsEventArgs.Contracts">
            <summary>
            Smart Contracts
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BlockElement">
            <summary>
            Abstract base class for inline elements.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BlockElement.Parse(System.Xml.XmlElement)">
            <summary>
            Parses XML for a set of block elements.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Array of block elements</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks">
            <summary>
            Abstract base class for sets of blocks.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.Body">
            <summary>
            Body elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Blocks.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList">
            <summary>
            Bullet list
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.BulletList.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock">
            <summary>
            Abstract base class of blocks with inline elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock.Elements">
            <summary>
            Inline elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.InlineBlock.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item">
            <summary>
            An item in an item list.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Item.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList">
            <summary>
            Abstract base class for item lists
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.ItemList.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList">
            <summary>
            Numbered list
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.NumberedList.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph">
            <summary>
            Paragaph of text.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Paragraph.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section">
            <summary>
            A section consisting of a header and a body.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.Header">
            <summary>
            Header elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.BlockElements.Section.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement">
            <summary>
            Abstract base class for human readable elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement})">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
            <param name="Elements">Elements to serialize.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.Serialize(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement},System.String)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
            <param name="Elements">Elements to serialize.</param>
            <param name="EncapsulatingElementName">Encapsulating element name.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableElement.MarkdownEncode(System.String,System.Boolean)">
            <summary>
            Encodes text to Markdown.
            </summary>
            <param name="s">Text to encode.</param>
            <param name="SimpleEscape">If simplified escape procedures are to be used.</param>
            <returns>Encoded text.</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText">
            <summary>
            Class representing human-readable text.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Parse(System.Xml.XmlElement)">
            <summary>
            Class representing human-readable text.
            </summary>
            <param name="Xml">XML representation.</param>
            <returns>Human-readable text.</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Language">
            <summary>
            Optional language
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.Serialize(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Serializes the human-readable text, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="TagName">Local name of the text.</param>
            <param name="IncludeNamespace">If namespace attribute should be included.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateMarkdown(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateMarkdown(Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <param name="Type">Type of Markdown to generate</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateMarkdown(Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GeneratePlainText(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates plain text for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>Plain text</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateHTML(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates HTML for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>HTML</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateXAML(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates WPF XAML for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>WPF XAML</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.HumanReadableText.GenerateXamarinForms(Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Generates Xamarin.Forms XAML for the human-readable text.
            </summary>
            <param name="Contract">Contract, of which the human-readable text is part.</param>
            <returns>Xamarin.Forms XAML</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold">
            <summary>
            Bold text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Bold.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting">
            <summary>
            Abstract base class for inline formatting elements.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting.Elements">
            <summary>
            Embedded elements
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Formatting.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.InlineElement">
            <summary>
            Abstract base class for inline elements.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.InlineElement.Parse(System.Xml.XmlElement)">
            <summary>
            Parses XML for a set of inline elements.
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Array of inline elements</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic">
            <summary>
            Italic text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Italic.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter">
            <summary>
            Is replaced by parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.Name">
            <summary>
            Name of parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Parameter.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough">
            <summary>
            Text that is stricken through
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.StrikeThrough.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript">
            <summary>
            Sub text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Subscript.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript">
            <summary>
            Superscript text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Superscript.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.Value">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.IsWellDefined">
            <summary>
            Checks if the element is well-defined.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Text.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline">
            <summary>
            Underline text
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the element in normalized form.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.InlineElements.Underline.GenerateMarkdown(System.Text.StringBuilder,System.Int32,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings)">
            <summary>
            Generates markdown for the human-readable text.
            </summary>
            <param name="Markdown">Markdown output.</param>
            <param name="SectionLevel">Current section level.</param>
            <param name="Settings">Settings used for Markdown generation of human-readable text.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType">
            <summary>
            Type of Markdown to generate
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType.ForRendering">
            <summary>
            Markdown used for rendering
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType.ForEditing">
            <summary>
            Markdown used for editing
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings">
            <summary>
            Settings used for Markdown generation of human-readable text.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings.#ctor(Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType)">
            <summary>
            Settings used for Markdown generation of human-readable text.
            </summary>
            <param name="Contract">Contract containing the human-readable text.</param>
            <param name="Type">Type of Markdown being generated.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings.Contract">
            <summary>
            Contract containing the human-readable text.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings.Type">
            <summary>
            Type of Markdown being generated.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownSettings.SimpleEscape">
            <summary>
            If simple Markdown escaping rules apply.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventHandler">
            <summary>
            Delegate for ID Application attributes callback methods.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs">
            <summary>
            Event arguments for callback methods to ID Application attributes queries.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.#ctor(Waher.Networking.XMPP.IqResultEventArgs)">
            <summary>
            Event arguments for callback methods to ID Application attributes queries.
            </summary>
            <param name="e">IQ Response</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.PeerReview">
            <summary>
            If peer-review is allowed as a mechanism to approve ID applications.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.NrReviewers">
            <summary>
            Number of peer reviewers required to get an ID approved using peer review.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.NrPhotos">
            <summary>
            Number of photos required in a peer-review.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.Iso3166">
            <summary>
            If ISO 3166 country codes are mandated in peer-review.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IdApplicationAttributesEventArgs.RequiredProperties">
            <summary>
            Required properties in an ID application for peer-review.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IServiceProvider">
            <summary>
            Interface for information about a service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.Id">
            <summary>
            ID of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.Type">
            <summary>
            Type of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.Name">
            <summary>
            Displayable name of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.IconUrl">
            <summary>
            Optional URL to icon of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.IconWidth">
            <summary>
            Width of icon, if available.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.IServiceProvider.IconHeight">
            <summary>
            Height of icon, if available.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IServiceProvider.Create(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.IServiceProvider.Create(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="IconUrl">Optional URL to icon of service provider.</param>
            <param name="IconWidth">Width of icon, if available.</param>
            <param name="IconHeight">Height of icon, if available.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.IdentityState">
            <summary>
            Lists recognized legal identity states.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Created">
            <summary>
            An application has been received.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Rejected">
            <summary>
            The legal identity has been rejected.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Approved">
            <summary>
            The legal identity is authenticated and approved by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Obsoleted">
            <summary>
            The legal identity has been explicitly obsoleted by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.IdentityState.Compromised">
            <summary>
            The legal identity has been reported compromised by its owner, or by the Trust Provider.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentity">
            <summary>
            Legal identity
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.#ctor">
            <summary>
            Legal identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Id">
            <summary>
            ID of the legal identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.IdUri">
            <summary>
            ID of legal identity, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.IdUriString">
            <summary>
            ID of legal identity, as an URI string.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Provider">
            <summary>
            Provider where the identity is maintained.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.State">
            <summary>
            Current state of identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Created">
            <summary>
            When the identity object was created
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Updated">
            <summary>
            When the identity object was last updated
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.From">
            <summary>
            From what point in time the legal identity is valid.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.To">
            <summary>
            To what point in time the legal identity is valid.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Properties">
            <summary>
            Properties detailing the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Attachments">
            <summary>
            Attachments assigned to the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientKeyName">
            <summary>
            Type of key used for client signatures
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientPubKey">
            <summary>
            Client Public key
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ClientSignature">
            <summary>
            Client signature
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.ServerSignature">
            <summary>
            Server signature
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Parse(System.Xml.XmlElement)">
            <summary>
            Parses an identity from its XML representation
            </summary>
            <param name="Xml">XML representation</param>
            <returns>Legal identity</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.HasClientPublicKey">
            <summary>
            If the identity has a client public key
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.HasClientSignature">
            <summary>
            If the identity has a client signature
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Serialize(System.Text.StringBuilder,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Serializes the identity to XML
            </summary>
            <param name="Xml">XML output</param>
            <param name="IncludeNamespace">If namespace should be included in the identity element.</param>
            <param name="IncludeIdAttribute">If the id attribute should be included</param>
            <param name="IncludeClientSignature">If the client signature should be included</param>
            <param name="IncludeAttachments">If attachments should be included</param>
            <param name="IncludeStatus">If the status should be included</param>
            <param name="IncludeServerSignature">If the server signature should be included</param>
            <param name="IncludeAttachmentReferences">If URLs to attachment content is to be included</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.ValidateSignature(System.Byte[],System.Byte[])">
            <summary>
            Validates a client signature
            </summary>
            <param name="Data">Binary data being signed.</param>
            <param name="Signature">Digital signature</param>
            <returns>If the client signature is correct</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.ValidateClientSignature">
            <summary>
            Validates the client signature of the legal identity
            </summary>
            <returns>If the client signature of the legal identity is correct</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.GetTags">
            <summary>
            Gets tags describing the legal identity.
            </summary>
            <returns>Set of tags</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentity.Item(System.String)">
            <summary>
            Access to property values.
            </summary>
            <param name="Key">Property key</param>
            <returns>Corresponding property value, if one is found with the same key, or the empty string, if not.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LegalIdentityState">
            <summary>
            Contains information about a legal identity generated by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityState.#ctor">
            <summary>
            Contains information about a legal identity generated by the client.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityState.#ctor(System.String)">
            <summary>
            Contains information about a legal identity generated by the client.
            </summary>
            <param name="LegalId">Legal identity.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.ObjectId">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.BareJid">
            <summary>
            Bare JID of client applying for the identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.LegalId">
            <summary>
            Identity string assigned to the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.PublicKey">
            <summary>
            Public Key used by the cryptographic algororithm used to sign the identity application.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.State">
            <summary>
            State of the legal identity.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LegalIdentityState.Timestamp">
            <summary>
            Timestamp when the legal identity was created or last updated.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LegalIdentityState.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.LocalizableDescription">
            <summary>
            Abstract base class for contractual parameters
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.LocalizableDescription.Descriptions">
            <summary>
            Discriptions of the object, in different languages.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToMarkdown(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Creates a human-readable Markdown document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToMarkdown(System.String,Waher.Networking.XMPP.Contracts.Contract,Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType)">
            <summary>
            Creates a human-readable Markdown document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <param name="Type">Type of Markdown being generated. (Default=<see cref="F:Waher.Networking.XMPP.Contracts.HumanReadable.MarkdownType.ForRendering"/>)</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToHTML(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Creates a human-readable HTML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToPlainText(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Creates a human-readable Plain Trext document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToXAML(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Creates a human-readable WPF XAML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <returns>Markdown</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.LocalizableDescription.ToXamarinForms(System.String,Waher.Networking.XMPP.Contracts.Contract)">
            <summary>
            Creates a human-readable Xamarin.Forms XAML document for the contract.
            </summary>
            <param name="Language">Desired language</param>
            <param name="Contract">Contract hosting the object.</param>
            <returns>Markdown</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.NetworkIdentity">
            <summary>
            Contains a network identity related to a legal identity
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NetworkIdentity.#ctor">
            <summary>
            Contains a network identity related to a legal identity
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NetworkIdentity.#ctor(System.String,System.String)">
            <summary>
            Contains a network identity related to a legal identity
            </summary>
            <param name="BareJid">Bare JID</param>
            <param name="LegalId">Legal ID</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NetworkIdentity.BareJid">
            <summary>
            Bare JID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NetworkIdentity.LegalId">
            <summary>
            Legal ID
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NetworkIdentity.LegalIdUri">
            <summary>
            Legal ID, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.NetworkIdentity.LegalIdUriString">
            <summary>
            Legal ID, as an URI string.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.NumericalParameter">
            <summary>
            Numerical contractual parameter
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NumericalParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.NumericalParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Parameter">
            <summary>
            Abstract base class for contractual parameters
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Guide">
            <summary>
            Parameter guide text
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Expression">
            <summary>
            Parameter validation script expression.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Parameter.Parsed">
            <summary>
            Parsed expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Parameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ParsedContract">
            <summary>
            Contains information about a parsed contract.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ParsedContract.Contract">
            <summary>
            Contract object
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ParsedContract.HasStatus">
            <summary>
            If a status element was found.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ParsedContract.ParametersValid">
            <summary>
            If parameter values in the contract are valid.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ContractParts">
            <summary>
            How the parts of the contract are defined.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.Open">
            <summary>
            Contract is open. Anyone can sign.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.TemplateOnly">
            <summary>
            Contract is only a template. No-one can sign.
            </summary>
        </member>
        <member name="F:Waher.Networking.XMPP.Contracts.ContractParts.ExplicitlyDefined">
            <summary>
            Only explicitly defined parts can sign.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Part">
            <summary>
            Class defining a part in a contract
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.LegalId">
            <summary>
            Legal identity of part
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.LegalIdUri">
            <summary>
            Legal identity of part, as an URI.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.LegalIdUriString">
            <summary>
            Legal identity of part, as an URI string.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Part.Role">
            <summary>
            Role of the part in the contract
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.PetitionClientUrlEventHandler">
            <summary>
            Delegate for client URL events when performing a petition.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.PetitionClientUrlEventArgs">
            <summary>
            Event arguments for events where a client URL needs to be displayed
            when performing a petition.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.PetitionClientUrlEventArgs.#ctor(Waher.Networking.XMPP.MessageEventArgs,System.String,System.String)">
            <summary>
            Event arguments for events where a client URL needs to be displayed
            when reviewing an identity application.
            </summary>
            <param name="e">IQ result event arguments.</param>
            <param name="PetitionId">Petition ID.</param>
            <param name="ClientUrl">Client URL.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.PetitionClientUrlEventArgs.PetitionId">
            <summary>
            ID of peer review petition.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.PetitionClientUrlEventArgs.ClientUrl">
            <summary>
            URL client needs to open to complete the peer review.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Property">
            <summary>
            Named property
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.#ctor">
            <summary>
            Named property
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.#ctor(System.String,System.String)">
            <summary>
            Named property
            </summary>
            <param name="Name">Name of property</param>
            <param name="Value">Property value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Property.Name">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Property.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Property.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.RangeParameter`1">
            <summary>
            Numerical contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.Min">
            <summary>
            Optional minimum value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.Max">
            <summary>
            Optional maximum value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.MinIncluded">
            <summary>
            If the optional minimum value is included in the allowed range.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.MaxIncluded">
            <summary>
            If the optional maximum value is included in the allowed range.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RangeParameter`1.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RangeParameter`1.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RangeParameter`1.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Role">
            <summary>
            Class defining a role
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.Name">
            <summary>
            Name of the role.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.MinCount">
            <summary>
            Smallest amount of signatures of this role required for a legally binding contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.MaxCount">
            <summary>
            Largest amount of signatures of this role required for a legally binding contract.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Role.CanRevoke">
            <summary>
            If parts having this role, can revoke their signature, once signed.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.RoleParameter">
            <summary>
            Role-reference contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RoleParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RoleParameter.Role">
            <summary>
            Name of role the parameter references.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RoleParameter.Index">
            <summary>
            1-based Role index. 1=First signatory having the rolw, 2=second, etc.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RoleParameter.Property">
            <summary>
            Name of property of signatory having the corresponding role.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.RoleParameter.Required">
            <summary>
            If parameter is required to exist for contract to be valid.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RoleParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RoleParameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>Error message, if parameter value is not valid, null if valid.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RoleParameter.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.RoleParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaDigest">
            <summary>
            Contains a schema digest
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaDigest.#ctor">
            <summary>
            Contains a schema digest
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaDigest.#ctor(Waher.Security.HashFunction,System.Byte[])">
            <summary>
            Contains a schema digest
            </summary>
            <param name="Function">Hash function</param>
            <param name="Digest">Digest</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaDigest.Digest">
            <summary>
            Hash Digest of schema file
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaDigest.Function">
            <summary>
            Hash Function used to calculate the digest.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.SchemaReference">
            <summary>
            References a XML Schema used for validating machine-readable contents in smart contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaReference.#ctor">
            <summary>
            References a XML Schema used for validating machine-readable contents in smart contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.SchemaReference.#ctor(System.String,Waher.Networking.XMPP.Contracts.SchemaDigest[])">
            <summary>
            References a XML Schema used for validating machine-readable contents in smart contracts.
            </summary>
            <param name="Namespace">Schema namespace</param>
            <param name="Digests">Digests of available versions.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaReference.Namespace">
            <summary>
            Namespace of schema
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.SchemaReference.Digests">
            <summary>
            Hash of schema
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToBoolean">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToBoolean.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToDate">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToDate.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToDateTime">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToDateTime.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToDuration">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToDuration.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToNumber">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToNumber.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToString">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToString.#ctor(System.String)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.EqualToTime">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.EqualToTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values equal to this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.EqualToTime.OperandName">
            <summary>
            Local XML element name of double operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterCreated">
            <summary>
            Places restrictions on when public contracts were created.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterCreated.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Places restrictions on when public contracts were created.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterCreated.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterCreated.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterCreated.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterDuration">
            <summary>
            Places restrictions on when public contracts were created.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterDuration.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Places restrictions on when public contracts were created.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterDuration.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterDuration.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterDuration.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterFrom">
            <summary>
            Places restrictions on when public contracts became legally binding.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterFrom.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Places restrictions on when public contracts became legally binding.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterFrom.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterFrom.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterFrom.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalName">
            <summary>
            Abstract base class for search filters relating to the local name of the machine-readable content of contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalName.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for search filters relating to the local name of the machine-readable content of contracts.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalName.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalName.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalName.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalNameEquality">
            <summary>
            Return public contracts in which the local name of the contents is equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalNameEquality.#ctor(System.String)">
            <summary>
            Return public contracts in which the local name of the contents is equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalNameRegEx">
            <summary>
            Return public contracts in which the local name of the contents matches this regular expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentLocalNameRegEx.#ctor(System.String)">
            <summary>
            Return public contracts in which the local name of the contents matches this regular expression.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespace">
            <summary>
            Abstract base class for search filters relating to the namespace of the machine-readable content of contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespace.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for search filters relating to the namespace of the machine-readable content of contracts.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespace.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespace.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespace.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespaceEquality">
            <summary>
            Return public contracts in which the namespace of the contents is equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespaceEquality.#ctor(System.String)">
            <summary>
            Return public contracts in which the namespace of the contents is equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespaceRegEx">
            <summary>
            Return public contracts in which the namespace of the contents matches this regular expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterMachineContentNamespaceRegEx.#ctor(System.String)">
            <summary>
            Return public contracts in which the namespace of the contents matches this regular expression.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterParameter">
            <summary>
            Abstract base class for search filters relating to the roles of contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterParameter.#ctor(System.String,Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for search filters relating to the roles of contracts.
            </summary>
            <param name="Name">Parameter Name</param>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterParameter.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterParameter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterParameter.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterParameter.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterRole">
            <summary>
            Abstract base class for search filters relating to the roles of contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterRole.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for search filters relating to the roles of contracts.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterRole.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterRole.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterRole.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterRoleEquality">
            <summary>
            Return public contracts defining a role equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterRoleEquality.#ctor(System.String)">
            <summary>
            Return public contracts defining a role equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterRoleRegEx">
            <summary>
            Return public contracts defining a role matching this regular expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterRoleRegEx.#ctor(System.String)">
            <summary>
            Return public contracts defining a role matching this regular expression.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterTemplate">
            <summary>
            Abstract base class for search filters relating to the template of contracts.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterTemplate.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for search filters relating to the template of contracts.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTemplate.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTemplate.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTemplate.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterTemplateEquality">
            <summary>
            Return public contracts based on a template that is equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterTemplateEquality.#ctor(System.String)">
            <summary>
            Return public contracts based on a template that matches this regular expression.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterTemplateRegEx">
            <summary>
            Return public contracts based on a template that matches this regular expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterTemplateRegEx.#ctor(System.String)">
            <summary>
            Return public contracts based on a template that matches this regular expression.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterTo">
            <summary>
            Places restrictions on when public contracts cease to be legally binding.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterTo.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Places restrictions on when public contracts cease to be legally binding.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTo.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTo.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterTo.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.FilterUpdated">
            <summary>
            Places restrictions on when public contracts were last updated.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.FilterUpdated.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Places restrictions on when public contracts were last updated.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterUpdated.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterUpdated.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.FilterUpdated.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanBoolean">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanBoolean.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanDate">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanDate.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanDateTime">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanDateTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanDuration">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanDuration.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanNumber">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanNumber.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToBoolean">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToBoolean.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDate">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDate.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDateTime">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDateTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDuration">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToDuration.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToNumber">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToNumber.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToString">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToString.#ctor(System.String)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToTime">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values greater than or equal to this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanOrEqualToTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanString">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanString.#ctor(System.String)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.GreaterThanTime">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.GreaterThanTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values greater than this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.GreaterThanTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanBoolean">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanBoolean.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanDate">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanDate.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanDateTime">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanDateTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanDuration">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanDuration.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanNumber">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanNumber.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToBoolean">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToBoolean.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDate">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDate.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDateTime">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDateTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDuration">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToDuration.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToNumber">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToNumber.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToString">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToString.#ctor(System.String)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToTime">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values lesser than or equal to this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanOrEqualToTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanString">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanString.#ctor(System.String)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LesserThanTime">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LesserThanTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values lesser than this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LesserThanTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.LikeRegEx">
            <summary>
            Limits searches to items with values like this value, using a regular expression.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.LikeRegEx.#ctor(System.String)">
            <summary>
            Limits searches to items with values like this value, using a regular expression.
            </summary>
            <param name="Value">Regular expression</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.LikeRegEx.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToBoolean">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToBoolean.#ctor(System.Boolean)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToBoolean.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToDate">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToDate.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">Date value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToDate.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToDateTime">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToDateTime.#ctor(System.DateTime)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">DateTime value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToDateTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToDuration">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToDuration.#ctor(Waher.Content.Duration)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">Duration value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToDuration.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToNumber">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToNumber.#ctor(System.Decimal)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">Number value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToNumber.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToString">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToString.#ctor(System.String)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToString.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.NotEqualToTime">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.NotEqualToTime.#ctor(System.TimeSpan)">
            <summary>
            Limits searches to items with values not equal to this value.
            </summary>
            <param name="Value">Time value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.NotEqualToTime.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilter">
            <summary>
            Abstract base class for Smart Contract Search filters.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilter.#ctor(Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand[])">
            <summary>
            Abstract base class for Smart Contract Search filters.
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilter.Operands">
            <summary>
            Operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilter.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilter.ElementName">
            <summary>
            Local XML element name of filter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilter.Order">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilter.MaxOccurs">
            <summary>
            Maximum number of occurrences in a search.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterBooleanOperand">
            <summary>
            Abstract base class for Boolean Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterBooleanOperand.#ctor(System.Boolean)">
            <summary>
            Abstract base class for Boolean Smart Contract Search filter operands.
            </summary>
            <param name="Value">Boolean value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterBooleanOperand.Value">
            <summary>
            Boolean value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterBooleanOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterBooleanOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateOperand">
            <summary>
            Abstract base class for Date Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateOperand.#ctor(System.DateTime)">
            <summary>
            Abstract base class for Date Smart Contract Search filter operands.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateOperand.Value">
            <summary>
            Date value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateTimeOperand">
            <summary>
            Abstract base class for <see cref="T:System.DateTime"/>-valued Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateTimeOperand.#ctor(System.DateTime)">
            <summary>
            Abstract base class for <see cref="T:System.DateTime"/>-valued Smart Contract Search filter operands.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateTimeOperand.Value">
            <summary>
            <see cref="T:System.DateTime"/> value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateTimeOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDateTimeOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterDurationOperand">
            <summary>
            Abstract base class for <see cref="T:Waher.Content.Duration"/>-valued Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDurationOperand.#ctor(Waher.Content.Duration)">
            <summary>
            Abstract base class for <see cref="T:Waher.Content.Duration"/>-valued Smart Contract Search filter operands.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDurationOperand.Value">
            <summary>
            <see cref="T:Waher.Content.Duration"/> value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterDurationOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterDurationOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterNumberOperand">
            <summary>
            Abstract base class for Numerical Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterNumberOperand.#ctor(System.Decimal)">
            <summary>
            Abstract base class for Numerical Smart Contract Search filter operands.
            </summary>
            <param name="Value">Numerical value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterNumberOperand.Value">
            <summary>
            Numerical value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterNumberOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterNumberOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand">
            <summary>
            Abstract base class for Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand.#ctor">
            <summary>
            Abstract base class for Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter operand to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand.OperandName">
            <summary>
            Local XML element name of string operand.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterStringOperand">
            <summary>
            Abstract base class for String-valued Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterStringOperand.#ctor(System.String)">
            <summary>
            Abstract base class for String-valued Smart Contract Search filter operands.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterStringOperand.Value">
            <summary>
            String value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterStringOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterStringOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Search.SearchFilterTimeOperand">
            <summary>
            Abstract base class for Time Smart Contract Search filter operands.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterTimeOperand.#ctor(System.TimeSpan)">
            <summary>
            Abstract base class for Time Smart Contract Search filter operands.
            </summary>
            <param name="Value">String value</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterTimeOperand.Value">
            <summary>
            Date value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Search.SearchFilterTimeOperand.ElementSuffix">
            <summary>
            Local XML element suffix.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Search.SearchFilterTimeOperand.Serialize(System.Text.StringBuilder,System.String)">
            <summary>
            Serializes the search filter to XML.
            </summary>
            <param name="Xml">XML output.</param>
            <param name="ElementSuffix">Suffix, to append to element name during serialization.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServerSignature">
            <summary>
            Represents a server signature on a contract.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServerSignature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServiceProvider">
            <summary>
            Contains information about a service provider.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProvider.#ctor">
            <summary>
            Contains information about a service provider.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Contains information about a service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProvider.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Contains information about a service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="IconUrl">Optional URL to icon of service provider.</param>
            <param name="IconWidth">Width of icon, if available.</param>
            <param name="IconHeight">Height of icon, if available.</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.Id">
            <summary>
            ID of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.Type">
            <summary>
            Type of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.Name">
            <summary>
            Displayable name of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.IconUrl">
            <summary>
            Optional URL to icon of service provider.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.IconWidth">
            <summary>
            Width of icon, if available.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvider.IconHeight">
            <summary>
            Height of icon, if available.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProvider.Create(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProvider.Create(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="IconUrl">Optional URL to icon of service provider.</param>
            <param name="IconWidth">Width of icon, if available.</param>
            <param name="IconHeight">Height of icon, if available.</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServiceProvidersEventHandler`1">
            <summary>
            Delegate for service provider callback methods.
            </summary>
            <typeparam name="T">Service-provider type.</typeparam>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServiceProvidersEventArgs`1">
            <summary>
            Event arguments for Service Provider callback methods.
            </summary>
            <typeparam name="T">Service-provider type.</typeparam>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProvidersEventArgs`1.ServiceProviders">
            <summary>
            Service Providers.
            </summary>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId">
            <summary>
            Contains information about a service provider with a legal identity.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.#ctor">
            <summary>
            Contains information about a service provider with a legal identity.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Contains information about a service provider with a legal identity.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="LegalId">Legal Identity</param>
            <param name="External">If legal identity is external (true) or belongs to the server (false).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Contains information about a service provider with a legal identity.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="IconUrl">Optional URL to icon of service provider.</param>
            <param name="IconWidth">Width of icon, if available.</param>
            <param name="IconHeight">Height of icon, if available.</param>
            <param name="LegalId">Legal Identity</param>
            <param name="External">If legal identity is external (true) or belongs to the server (false).</param>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.LegalId">
            <summary>
            Legal identity
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.External">
            <summary>
            If legal identity is external (true) or belongs to the server (false).
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="LegalId">Legal Identity</param>
            <param name="External">If legal identity is external (true) or belongs to the server (false).</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.ServiceProviderWithLegalId.Create(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the service provider.
            </summary>
            <param name="Id">ID of service provider.</param>
            <param name="Type">Type of service provider.</param>
            <param name="Name">Displayable name of service provider.</param>
            <param name="IconUrl">Optional URL to icon of service provider.</param>
            <param name="IconWidth">Width of icon, if available.</param>
            <param name="IconHeight">Height of icon, if available.</param>
            <param name="LegalId">Legal Identity</param>
            <param name="External">If legal identity is external (true) or belongs to the server (false).</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.Signature">
            <summary>
            Abstract base class of signatures
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Signature.Timestamp">
            <summary>
            Timestamp of signature.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.Signature.DigitalSignature">
            <summary>
            Digital Signature
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.Signature.Serialize(System.Text.StringBuilder)">
            <summary>
            Serializes the signature, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.StringParameter">
            <summary>
            String-valued contractual parameter
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.RegEx">
            <summary>
            Optional regular expression to validate the value of the string parameter.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.Min">
            <summary>
            Optional minimum value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.Max">
            <summary>
            Optional maximum value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.MinIncluded">
            <summary>
            If the optional minimum value is included in the allowed range.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.MaxIncluded">
            <summary>
            If the optional maximum value is included in the allowed range.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.MinLength">
            <summary>
            Optional minimum length of value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.MaxLength">
            <summary>
            Optional maximum length of value.
            </summary>
        </member>
        <member name="P:Waher.Networking.XMPP.Contracts.StringParameter.ObjectValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.StringParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.StringParameter.IsParameterValid(Waher.Script.Variables)">
            <summary>
            Checks if the parameter value is valid.
            </summary>
            <param name="Variables">Collection of parameter values.</param>
            <returns>If parameter value is valid.</returns>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.StringParameter.Populate(Waher.Script.Variables)">
            <summary>
            Populates a variable collection with the value of the parameter.
            </summary>
            <param name="Variables">Variable collection.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.StringParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
        <member name="T:Waher.Networking.XMPP.Contracts.TimeParameter">
            <summary>
            Time contractual parameter
            </summary>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.TimeParameter.Serialize(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Serializes the parameter, in normalized form.
            </summary>
            <param name="Xml">XML Output</param>
            <param name="UsingTemplate">If the XML is for creating a contract using a template.</param>
        </member>
        <member name="M:Waher.Networking.XMPP.Contracts.TimeParameter.SetValue(System.Object)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="Value">Value</param>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of the correct type.</exception>
        </member>
    </members>
</doc>
