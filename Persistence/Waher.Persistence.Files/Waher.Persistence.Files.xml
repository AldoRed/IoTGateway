<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Persistence.Files</name>
    </assembly>
    <members>
        <member name="T:Waher.Persistence.Files.Bookmark">
            <summary>
            Bookmark
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.GetNewCursorCallback`1">
            <summary>
            Delegate for reset methods.
            </summary>
            <typeparam name="T">Type argument</typeparam>
            <param name="ExistingCursor">Existing cursor</param>
            <returns>New cursor, or existing cursor reset to starting position.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.CursorEnumerator`1">
            <summary>
            Cursor enumerator
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.CursorEnumerator`1.#ctor(Waher.Persistence.Files.ICursor{`0},Waher.Persistence.Files.GetNewCursorCallback{`0},System.Int32)">
            <summary>
            Cursor enumerator
            </summary>
            <param name="Cursor">Cursor.</param>
            <param name="ResetFunction">Reset function.</param>
            <param name="TimeoutMilliseconds">Time to wait to get access to underlying database.</param>
        </member>
        <member name="P:Waher.Persistence.Files.CursorEnumerator`1.Current">
            <summary>
            The current element in the collection.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.CursorEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            The current element in the collection.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.CursorEnumerator`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.CursorEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.CursorEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.FileException">
            <summary>
            Exception related to a file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FileException.#ctor(System.String,System.String,System.String)">
            <summary>
            Exception related to a file.
            </summary>
            <param name="Message">Exception message</param>
            <param name="FileName">File Name</param>
            <param name="Collection">Corresponding collection.</param>
        </member>
        <member name="P:Waher.Persistence.Files.FileException.Object">
            <summary>
            File name.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.FileOfBlocks">
            <summary>
            File of sequential blocks.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.#ctor(System.String,System.String,System.Int32)">
            <summary>
            File of sequential blocks.
            </summary>
            <param name="CollectionName">Collection Name</param>
            <param name="FileName">File name. If the file or folder does not exist
            prior to the creation of the object, they are created accordingly.</param>
            <param name="BlockSize">Block Size</param>
        </member>
        <member name="P:Waher.Persistence.Files.FileOfBlocks.FilePreExisting">
            <summary>
            If the file existed before the construction of the object (true),
            or if the constructor created the file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FileOfBlocks.CollectionName">
            <summary>
            Collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FileOfBlocks.Length">
            <summary>
            File length.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FileOfBlocks.BlockLimit">
            <summary>
            Number of blocks in file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.LoadBlock(System.UInt32)">
            <summary>
            Loads a block from the file.
            </summary>
            <param name="BlockIndex">Zero-based block index.</param>
            <returns>Loaded block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.LoadBlock(System.UInt32,System.Byte[])">
            <summary>
            Loads a block from the file.
            </summary>
            <param name="BlockIndex">Zero-based block index.</param>
            <param name="Block"></param>
            <returns>Loaded block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.SaveBlock(System.UInt32,System.Byte[])">
            <summary>
            Saves a block to the file.
            </summary>
            <param name="BlockIndex">Zero-based block index.</param>
            <param name="Block">Block to save.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.Truncate(System.UInt32)">
            <summary>
            Truncates the file to a given number of blocks.
            </summary>
            <param name="BlockLimit">Number of blocks in file.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FileOfBlocks.FlushAsync">
            <summary>
            Flushes changes to the underlying device.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.CustomKeyHandler">
            <summary>
            Delegate for custom key callback methods.
            </summary>
            <param name="FileName">Name of file.</param>
            <returns>A pair of (Key, IV).</returns>
        </member>
        <member name="T:Waher.Persistence.Files.RegenerationOptions">
            <summary>
            Index regeneration options.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.RegenerationOptions.DontRegenerate">
            <summary>
            Don't regenerate index.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.RegenerationOptions.RegenerateIfFileNotFound">
            <summary>
            Regenerate index if index file not found.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.RegenerationOptions.RegenerateIfIndexNotInstantiated">
            <summary>
            Regenerate index if index object not instantiated.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.RegenerationOptions.Regenerate">
            <summary>
            Regenerate file.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.FilesProvider">
            <summary>
            Persists objects into binary files.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Persistence.Files.CustomKeyHandler)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="CustomKeyMethod">Custom method to get keys for encrypted files. (Implies encrypted files)</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Persistence.Files.CustomKeyHandler)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="CustomKeyMethod">Custom method to get keys for encrypted files. (Implies encrypted files)</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
            <param name="Compiled">If object serializers should be compiled or not.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Persistence.Files.CustomKeyHandler,System.Boolean)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="CustomKeyMethod">Custom method to get keys for encrypted files. (Implies encrypted files)</param>
            <param name="Compiled">If object serializers should be compiled or not.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,System.Boolean,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
            <param name="Thread">Profiling thread. If provided, will be used to indicate events during setup of provider.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Persistence.Files.CustomKeyHandler,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="CustomKeyMethod">Custom method to get keys for encrypted files. (Implies encrypted files)</param>
            <param name="Thread">Profiling thread. If provided, will be used to indicate events during setup of provider.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Thread">Profiling thread. If provided, will be used to indicate events during setup of provider.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,System.Boolean,System.Boolean,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
            <param name="Compiled">If object serializers should be compiled or not.</param>
            <param name="Thread">Profiling thread. If provided, will be used to indicate events during setup of provider.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Int32,Waher.Persistence.Files.CustomKeyHandler,System.Boolean,Waher.Runtime.Profiling.ProfilerThread)">
            <summary>
            Persists objects into binary files.
            </summary>
            <param name="Folder">Folder to store data files.</param>
            <param name="DefaultCollectionName">Default collection name.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlocksInCache">Maximum number of blocks in in-memory cache. This cache is used by all files governed by the
            database provider. The cache does not contain BLOB blocks.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="CustomKeyMethod">Custom method to get keys for encrypted files. (Implies encrypted files)</param>
            <param name="Compiled">If object serializers should be compiled or not.</param>
            <param name="Thread">Profiling thread. If provided, will be used to indicate events during setup of provider.</param>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.DefaultCollectionName">
            <summary>
            Default collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Folder">
            <summary>
            Base folder of where files will be stored.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.AsyncFileIo">
            <summary>
            If asynchronous file I/O is to be performed (true), or synchronous file I/O (false).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.AutoRepairReportFolder">
            <summary>
            Folder for Auto-Repair reports. If empty or null, <see cref="P:Waher.Persistence.Files.FilesProvider.Folder"/>\AutoRepair will be used. 
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Id">
            <summary>
            An ID of the files provider. It's unique, and constant during the life-time of the FilesProvider class.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.ObjectIdByteCount">
            <summary>
            Number of bytes used by an Object ID.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.BlockSize">
            <summary>
            Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> will be persisted as BLOBs, with the bulk of the object stored as separate files. 
            Smallest block size = 1024, largest block size = 65536.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.BlobBlockSize">
            <summary>
            Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Encoding">
            <summary>
            Encoding to use for text properties.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.TimeoutMilliseconds">
            <summary>
            Timeout, in milliseconds, for database operations.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Encrypted">
            <summary>
            If the files should be encrypted or not.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Compiled">
            <summary>
            If object serializers should be compiled or not.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.DeleteObsoleteKeys">
            <summary>
            If old keys are to be removed, before a new encrypted file is created. (Default=true).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.NormalizedNames">
            <summary>
            If normalized names are to be used or not. Normalized names reduces the number
            of bytes required to serialize objects, but do not work in a decentralized
            architecture.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetObjectSerializer(System.Type)">
            <summary>
            Gets the object serializer corresponding to a specific type.
            </summary>
            <param name="Type">Type of object to serialize.</param>
            <returns>Object Serializer</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetObjectSerializerNoCreate(System.Type)">
            <summary>
            Gets the object serializer corresponding to a specific type, if one exists.
            </summary>
            <param name="Type">Type of object to serialize.</param>
            <returns>Object Serializer if exists, or null if not.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetObjectSerializerEx(System.Object)">
            <summary>
            Gets the object serializer corresponding to a specific object.
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>Object Serializer</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetObjectSerializerEx(System.Type)">
            <summary>
            Gets the object serializer corresponding to a specific object.
            </summary>
            <param name="Type">Type of object to serialize.</param>
            <returns>Object Serializer</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetFieldCode(System.String,System.String)">
            <summary>
            Gets the code for a specific field in a collection.
            </summary>
            <param name="Collection">Name of collection.</param>
            <param name="FieldName">Name of field.</param>
            <returns>Field code.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetFieldName(System.String,System.UInt64)">
            <summary>
            Gets the name of a field in a collection, given its code.
            </summary>
            <param name="Collection">Name of collection.</param>
            <param name="FieldCode">Field code.</param>
            <returns>Field name.</returns>
            <exception cref="T:System.ArgumentException">If the collection or field code are not known.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.IsLabel(System.String,System.String)">
            <summary>
            Checks if a string is a label in a given collection.
            </summary>
            <param name="Collection">Name of collection.</param>
            <param name="Label">Label to check.</param>
            <returns>If <paramref name="Label"/> is a label in the collection
            defined by <paramref name="Collection"/>.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetLabels(System.String)">
            <summary>
            Gets an array of available labels for a collection.
            </summary>
            <returns>Array of labels.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryGetObjectId(System.Object)">
            <summary>
            Tries to get the Object ID of an object, if it exists.
            </summary>
            <param name="Object">Object whose Object ID is of interest.</param>
            <returns>Object ID, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.RemoveBlocks(System.Int32)">
            <summary>
            Removes all blocks pertaining to a specific file.
            </summary>
            <param name="FileId">Internal file ID.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.RemoveBlock(System.Int32,System.UInt32)">
            <summary>
            Removes a particular block from the cache.
            </summary>
            <param name="FileId">Internal file ID.</param>
            <param name="BlockIndex">Block index.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetBlockKey(System.Int32,System.UInt32)">
            <summary>
            Calculates a block key value.
            </summary>
            <param name="FileId">Internal file ID.</param>
            <param name="BlockIndex">Block index.</param>
            <returns>Key value.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryGetBlock(System.Int32,System.UInt32,System.Byte[]@)">
            <summary>
            Tries to get a cached block.
            </summary>
            <param name="FileId">Internal file ID.</param>
            <param name="BlockIndex">Block index.</param>
            <param name="Block">Cached block, if found.</param>
            <returns>If block was found in cache.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.AddBlockToCache(System.Int32,System.UInt32,System.Byte[])">
            <summary>
            Adds a block to the cache.
            </summary>
            <param name="FileId">Internal file ID.</param>
            <param name="BlockIndex">Block index.</param>
            <param name="Block">Block.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.StartBulk">
            <summary>
            Starts bulk-proccessing of data. Must be followed by a call to <see cref="M:Waher.Persistence.Files.FilesProvider.EndBulk"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.EndBulk">
            <summary>
            Ends bulk-processing of data. Must be called once for every call to <see cref="M:Waher.Persistence.Files.FilesProvider.StartBulk"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.BulkCount">
            <summary>
            Number of current bulk operations.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetNewFileId">
            <summary>
            Gets a new file ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetFile(System.String)">
            <summary>
            Gets the BTree file corresponding to a named collection.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <returns>BTree file corresponding to the given collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetFile(System.String,System.Boolean)">
            <summary>
            Gets the BTree file corresponding to a named collection.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="CreateIfNotExists">If the physical file should be created if one does not already exist.</param>
            <returns>BTree file corresponding to the given collection. 
            If file did not exist, and <paramref name="CreateIfNotExists"/> is false, null is returned.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryGetLabelsFile(System.String,Waher.Persistence.Files.LabelFile@)">
            <summary>
            Tries to get the labels file for a given collection.
            </summary>
            <param name="CollectionName">Collection name.</param>
            <param name="Labels">Labels file, if found.</param>
            <returns>If a labels dictionary was found for the given collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetIndexFile(Waher.Persistence.Files.ObjectBTreeFile,Waher.Persistence.Files.RegenerationOptions,System.String[])">
            <summary>
            Gets an index file.
            </summary>
            <param name="File">Object file.</param>
            <param name="RegenerationOptions">Index regeneration options.</param>
            <param name="FieldNames">Field names to build the index on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <returns>Index file.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetIndexFileName(Waher.Persistence.Files.ObjectBTreeFile,System.String[])">
            <summary>
            Gets an index file name.
            </summary>
            <param name="File">Object file.</param>
            <param name="FieldNames">Field names to build the index on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <returns>Index file name.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CloseFile(System.String)">
            <summary>
            Closes files related to a collection.
            </summary>
            <param name="CollectionName">Collection.</param>
            <returns>If a collection with the given name was found and closed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetFileName(System.String)">
            <summary>
            Gets the file name root that corresponds to a given collection.
            </summary>
            <param name="CollectionName">Collection name.</param>
            <returns>File name root.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.LoadConfiguration">
            <summary>
            Loads the configuration from the master file.
            </summary>
            <returns>Task object</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetCollections">
            <summary>
            Gets an array of available collections.
            </summary>
            <returns>Array of collections.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetCollection(System.Type)">
            <summary>
            Gets the collection corresponding to a given type.
            </summary>
            <param name="Type">Type</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetCollection(System.Object)">
            <summary>
            Gets the collection corresponding to a given object.
            </summary>
            <param name="Object">Object</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.DropCollection(System.String)">
            <summary>
            Drops a collection, if it exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.Guid)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.Guid,Waher.Persistence.Serialization.EmbeddedObjectSetter)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="ObjectId">Object ID</param>
            <param name="EmbeddedSetter">Setter method, used to set an embedded property during delayed loading.</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject(System.Type,System.Guid,Waher.Persistence.Serialization.EmbeddedObjectSetter)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <paramref name="T"/>.
            </summary>
            <param name="T">Base type.</param>
            <param name="ObjectId">Object ID</param>
            <param name="EmbeddedSetter">Setter method, used to set an embedded property during delayed loading.</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.String,System.Guid)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject``1(System.String,System.Guid,Waher.Persistence.Serialization.EmbeddedObjectSetter)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <param name="EmbeddedSetter">Setter method, used to set an embedded property during delayed loading.</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its collection name <paramref name="CollectionName"/>.
            </summary>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.TryLoadObject(System.String,System.Object,Waher.Persistence.Serialization.EmbeddedObjectSetter)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its collection name <paramref name="CollectionName"/>.
            </summary>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <param name="EmbeddedSetter">Setter method, used to set an embedded property during delayed loading.</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetObjectId(System.Object,System.Boolean)">
            <summary>
            Gets the Object ID for a given object.
            </summary>
            <param name="Value">Object reference.</param>
            <param name="InsertIfNotFound">Insert object into database with new Object ID, if no Object ID is set.</param>
            <returns>Object ID for <paramref name="Value"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.SaveNewObject(System.Object)">
            <summary>
            Saves an unsaved object, and returns a new GUID identifying the saved object.
            </summary>
            <param name="Value">Object to save.</param>
            <returns>GUID identifying the saved object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Insert(System.Object)">
            <summary>
            Inserts an object into the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Insert(System.Object[])">
            <summary>
            Inserts a collection of objects into the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Insert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts a collection of objects into the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.InsertLazy(System.Object)">
            <summary>
            Inserts an object into the database, if unlocked. If locked, object will be inserted at next opportunity.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.InsertLazy(System.Object[])">
            <summary>
            Inserts an object into the database, if unlocked. If locked, object will be inserted at next opportunity.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.InsertLazy(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts an object into the database, if unlocked. If locked, object will be inserted at next opportunity.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Insert(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Inserts a collection of objects into the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
            <param name="Lazy">If Lazy insert is used, i.e. sufficiant that object is inserted at next opportuity.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Find``1(System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Find``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Find(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Find(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.FindDelete``1(System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.FindDelete``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.FindDelete(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.FindDelete(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Update(System.Object)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Update(System.Object[])">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Delete(System.Object)">
            <summary>
            Deletes an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Delete(System.Object[])">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.GetDictionary(System.String)">
            <summary>
            Gets a persistent dictionary containing objects in a collection.
            </summary>
            <param name="Collection">Collection Name</param>
            <returns>Persistent dictionary</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Generalize(System.Object)">
            <summary>
            Creates a generalized representation of an object.
            </summary>
            <param name="Object">Object</param>
            <returns>Generalized representation.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.ExportXml(System.Boolean)">
            <summary>
            Exports the database to XML.
            </summary>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Graph XML.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.ExportXml(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Exports the database to XML.
            </summary>
            <param name="Output">XML Output</param>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Asynchronous task object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.ExportXml(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Exports the database to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Asynhronous task object.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.FilesProvider.Files">
            <summary>
            Available Object files.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Export(Waher.Persistence.Serialization.IDatabaseExport,System.String[])">
            <summary>
            Performs an export of the entire database.
            </summary>
            <param name="Output">Database will be output to this interface.</param>
            <param name="CollectionNames">Optional array of collections to export. If null, all collections will be exported.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Clear(System.String)">
            <summary>
            Clears a collection of all objects.
            </summary>
            <param name="CollectionName">Name of collection to clear.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Repair(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and repairs it if necessary. Results are exported to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <param name="Repair">If files should be repaired if corruptions are detected.</param>
            <returns>Collections with errors.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <param name="Repair">If files should be repaired if corruptions are detected.</param>
            <param name="CollectionNames">If provided, lists collections to be repaired.</param>
            <returns>Collections with errors.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.RepairIfInproperShutdown(System.String)">
            <summary>
            Checks if the database needs repairing. This is done by checking the last start and stop timetamps to detect
            inproper shutdowns.
            </summary>
            <param name="XsltPath">Path to optional XSLT file for the resulting report.</param>
            <returns>Collections with errors.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Repair(System.String[])">
            <summary>
            Repairs a set of collections.
            </summary>
            <param name="CollectionNames">Set of collections to repair.</param>
            <returns>Collections repaired.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Repair(System.String,System.String[])">
            <summary>
            Repairs a set of collections.
            </summary>
            <param name="XsltPath">Path to XSLT transform formatting the report.</param>
            <param name="CollectionNames">Set of collections to repair.</param>
            <returns>Collections repaired.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Repair(System.String,System.String,System.String[])">
            <summary>
            Repairs a set of collections.
            </summary>
            <param name="ReportFileName">Filename of repair report.</param>
            <param name="XsltPath">Path to XSLT transform formatting the report.</param>
            <param name="CollectionNames">Set of collections to repair.</param>
            <returns>Collections repaired.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.CreateGuid">
            <summary>
            Creates a new GUID.
            </summary>
            <returns>New GUID.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.AddIndex(System.String,System.String[])">
            <summary>
            Adds an index to a collection, if one does not already exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.RemoveIndex(System.String,System.String[])">
            <summary>
            Removes an index from a collection, if one exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Start">
            <summary>
            Called when processing starts.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Stop">
            <summary>
            Called when processing ends.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.FilesProvider.Flush">
            <summary>
            Persists any pending changes.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.ICursor`1">
            <summary>
            Interface for typed cursors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Waher.Persistence.Files.ICursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.ICursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.ICursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.ICursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ICursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.ICursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ICursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.ICursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ICursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ICursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ICursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ICursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.IndexBTreeFile">
            <summary>
            This class manages an index file to a <see cref="T:Waher.Persistence.Files.ObjectBTreeFile"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.Create(System.String,Waher.Persistence.Files.ObjectBTreeFile,Waher.Persistence.Files.FilesProvider,System.String[])">
            <summary>
            This class manages an index file to a <see cref="T:Waher.Persistence.Files.ObjectBTreeFile"/>.
            </summary>
            <param name="FileName">File name of index file.</param>
            <param name="ObjectFile">Object file storing actual objects.</param>
            <param name="Provider">Files provider.</param>
            <param name="FieldNames">Field names to build the index on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.CollectionName">
            <summary>
            Name of corresponding collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.Encoding">
            <summary>
            Encoding to use for text properties.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.FieldNames">
            <summary>
            Field names included in the index.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.Ascending">
            <summary>
            If the corresponding field name is sorted in ascending order (true) or descending order (false).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.IndexFileLocked">
            <summary>
            Access to underlying Index file. Should only be accessed when the main file is properly locked.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFile.CountAsync">
            <summary>
            Number of objects in file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.SaveNewObjectLocked(System.Guid,System.Object,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Saves a new object to the file.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="Object">Object to persist.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was saved in the index (true), or if the index property values of the object did not exist, or were too big to fit in an index record.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.SaveNewObjectsLocked(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Saves a new set of objects to the file.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="Objects">Objects to persist.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was saved in the index (true), or if the index property values of the object did not exist, or were too big to fit in an index record.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.DeleteObjectLocked(System.Guid,System.Object,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Deletes an object from the file.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="Object">Object to delete.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was deleted from the index (true), or if the object did not exist in the index.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.DeleteObjectsLocked(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Deletes a set of objects from the file.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="Objects">Objects to delete.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was deleted from the index (true), or if the object did not exist in the index.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.UpdateObjectLocked(System.Guid,System.Object,System.Object,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Updates an object in the file.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OldObject">Object that is being changed.</param>
            <param name="NewObject">New version of object.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was saved in the index (true), or if the index property values of the object did not exist, or were too big to fit in an index record.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.UpdateObjectsLocked(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Updates a series of objects in the file.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OldObjects">Objects that are being changed.</param>
            <param name="NewObjects">New versions of objects.</param>
            <param name="Serializer">Object serializer.</param>
            <returns>If the object was saved in the index (true), or if the index property values of the object did not exist, or were too big to fit in an index record.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.ClearAsyncLocked">
            <summary>
            Clears the database of all objects.
            </summary>
            <returns>Task object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.GetCursorAsyncLocked">
            <summary>
            Returns an untyped enumerator that iterates through the collection in the order specified by the index.
            
            For a typed enumerator, call the <see cref="M:Waher.Persistence.Files.IndexBTreeFile.GetTypedEnumeratorLocked``1"/> method.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.GetTypedEnumeratorLocked``1">
            <summary>
            Returns an typed enumerator that iterates through the collection in the order specified by the index. The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.GetRankLocked(System.Guid)">
            <summary>
            Calculates the rank of an object in the database, given its Object ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Rank of object in database.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.RegenerateLocked">
            <summary>
            Regenerates the index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindFirstGreaterOrEqualToLocked``1(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Searches for the first object that is greater than or equal to a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Properties">Limit properties to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is greater than or equal to the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindFirstGreaterOrEqualToLocked``1(Waher.Persistence.Serialization.GenericObject)">
            <summary>
            Searches for the first object that is greater than or equal to a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Object">Limit object to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is greater than or equal to the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindLastLesserOrEqualToLocked``1(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Searches for the first object that is lasser than or equal to a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Properties">Limit properties to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is lesser than or equal to the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindLastLesserOrEqualToLocked``1(Waher.Persistence.Serialization.GenericObject)">
            <summary>
            Searches for the first object that is lasser than or equal to a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Object">Limit object to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is lesser than or equal to the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindFirstGreaterThanLocked``1(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Searches for the first object that is greater than a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Properties">Limit properties to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is greater than the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindFirstGreaterThanLocked``1(Waher.Persistence.Serialization.GenericObject)">
            <summary>
            Searches for the first object that is greater than a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Object">Limit object to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is greater than the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindLastLesserThanLocked``1(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Searches for the first object that is lasser than a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Properties">Limit properties to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is lesser than the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.FindLastLesserThanLocked``1(Waher.Persistence.Serialization.GenericObject)">
            <summary>
            Searches for the first object that is lasser than a hypothetical limit object.
            </summary>
            <typeparam name="T">The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.</typeparam>
            <param name="Object">Limit object to search for.</param>
            <returns>Enumerator that can be used to enumerate objects in index order. First object will be the first
            object that is lesser than the limit object. If null is returned, the search operation could
            not be performed.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFile.ComputeStatisticsLocked(System.Collections.Generic.Dictionary{System.Guid,System.Boolean})">
            <summary>
            Goes through the entire file and computes statistics abouts its composition.
            </summary>
            <param name="ExistingIds">Object ID available in master file.</param>
            <returns>File statistics.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.IndexBTreeFileCursor`1">
            <summary>
            Enumerates object in a <see cref="T:Waher.Persistence.Files.ObjectBTreeFile"/> in GUID order. You can use the enumerator to enumerate objects
            forwards and backwards, as well as skip a given number of objects.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.GetCurrentRankLocked">
            <summary>
            Gets the rank of the current object.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.Current"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.GoToFirstLocked">
            <summary>
            Goes to the first object.
            </summary>
            <returns>If a first object was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.GoToLastLocked">
            <summary>
            Goes to the last object.
            </summary>
            <returns>If a last object was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.GoToObjectLocked(System.UInt64)">
            <summary>
            Finds the object given its order in the underlying database.
            </summary>
            <param name="ObjectIndex">Order of object in database.</param>
            <returns>If the corresponding object was found. If so, the <see cref="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.Current"/> property will contain the corresponding
            object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.Reset(Waher.Persistence.Files.Bookmark)">
            <summary>
            Resets the enumerator, and sets the starting point to a given starting point.
            </summary>
            <param name="StartingPoint">Starting point to start enumeration.</param>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.SkipLocked(System.Int64)">
            <summary>
            Skips a certain number of objects forward (positive <paramref name="NrObjects"/>) or backward (negative <paramref name="NrObjects"/>).
            </summary>
            <param name="NrObjects">Number of objects to skip forward (positive) or backward (negative).</param>
            <returns>If the skip operation was successful and a new object is available in <see cref="P:Waher.Persistence.Files.IndexBTreeFileCursor`1.Current"/>.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.GetBookmarkLocked">
            <summary>
            Gets a bookmark for the current position. You can set the current position of the enumerator, calling the
            <see cref="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.Reset(Waher.Persistence.Files.Bookmark)"/> method.
            </summary>
            <returns>Bookmark</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.IndexBTreeFileCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.KeyCollection.CopyToAsync(System.String[],System.Int32)">
            <summary>
            Copies the keys of the dicitionary to an array.
            </summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Start index</param>
        </member>
        <member name="T:Waher.Persistence.Files.LabelFile">
            <summary>
            Maintains an enumerated set of labels for an Object B-Tree File.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.ReadLabel(System.Int64)">
            <summary>
            Reads a label from the file.
            </summary>
            <param name="Position">Position of label.</param>
            <returns>Label, and the position of the following label.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.WriteLabel(System.String)">
            <summary>
            Writes a label to the end of the file.
            </summary>
            <param name="Label">New label to save to the file.</param>
            <returns>Position of label.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.WriteLabelLocked(System.String)">
            <summary>
            Writes a label to the end of the file.
            </summary>
            <param name="Label">New label to save to the file.</param>
            <returns>Position of label.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.Create(System.String,System.Int32,System.Boolean,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Creates a LabelFile object.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
            <param name="Provider">Reference to the files provider.</param>
            <returns>LabelFile object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.GetFieldCode(System.String)">
            <summary>
            Gets the code for a specific field in a collection.
            </summary>
            <param name="FieldName">Name of field.</param>
            <returns>Field code.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.TryGetFieldCode(System.String)">
            <summary>
            Tries to get the code for a specific field in a collection.
            </summary>
            <param name="FieldName">Name of field.</param>
            <returns>The field code, if one was found, or null otherwise.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.GetLabelsAsync">
            <summary>
            Gets an array of available labels.
            </summary>
            <returns>Array of labels.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.GetFieldName(System.UInt32)">
            <summary>
            Gets the name of a field in a collection, given its code.
            </summary>
            <param name="FieldCode">Field code.</param>
            <returns>Field name.</returns>
            <exception cref="T:System.ArgumentException">If the collection or field code are not known.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.LabelFile.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.ObjectBTreeFile">
            <summary>
            This class manages a binary file where objects are persisted in a B-tree.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.Create(System.String,System.String,System.String,System.Int32,System.Int32,Waher.Persistence.Files.FilesProvider,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            This class manages a binary file where objects are persisted in a B-tree.
            </summary>
            <param name="FileName">Name of binary file. File will be created if it does not exist. The class will require
            unique read/write access to the file.</param>
            <param name="CollectionName">Name of collection corresponding to the file.</param>
            <param name="BlobFileName">Name of file in which BLOBs are stored.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Provider">Reference to the files provider.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.Create(System.String,System.String,System.String,System.Int32,System.Int32,Waher.Persistence.Files.FilesProvider,System.Text.Encoding,System.Int32,System.Boolean,Waher.Persistence.Files.Storage.IRecordHandler,Waher.Runtime.Threading.MultiReadSingleWriteObject)">
            <summary>
            This class manages a binary file where objects are persisted in a B-tree.
            </summary>
            <param name="FileName">Name of binary file. File will be created if it does not exist. The class will require
            unique read/write access to the file.</param>
            <param name="CollectionName">Name of collection corresponding to the file.</param>
            <param name="BlobFileName">Name of file in which BLOBs are stored.</param>
            <param name="BlockSize">Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> bytes will be stored as BLOBs.</param>
            <param name="BlobBlockSize">Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.</param>
            <param name="Provider">Reference to the files provider.</param>
            <param name="Encoding">Encoding to use for text properties.</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds, to wait for access to the database layer.</param>
            <param name="Encrypted">If the files should be encrypted or not.</param>
            <param name="RecordHandler">Record handler to use.</param>
            <param name="FileAccess">File Access synchronization object.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.Id">
            <summary>
            Identifier of the file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.Provider">
            <summary>
            Reference to files provider.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.FileName">
            <summary>
            Name of binary file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.CollectionName">
            <summary>
            Name of corresponding collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlobFileName">
            <summary>
            Name of file in which BLOBs are stored.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.Encoding">
            <summary>
            Encoding to use for text properties.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlockSize">
            <summary>
            Size of a block in the B-tree. The size must be a power of two, and should be at least the same
            size as a sector on the storage device. Smaller block sizes (2, 4 kB) are suitable for online transaction processing, where
            a lot of updates to the database occurs. Larger block sizes (8, 16, 32 kB) are suitable for decision support systems.
            The block sizes also limit the size of objects stored directly in the file. Objects larger than
            <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit"/> will be persisted as BLOBs, with the bulk of the object stored as separate files. 
            Smallest block size = 1024, largest block size = 65536.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlobBlockSize">
            <summary>
            Size of a block in the BLOB file. The size must be a power of two. The BLOB file will consist
            of a doubly linked list of blocks of this size.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.InlineObjectSizeLimit">
            <summary>
            Maximum size of objects that are stored in-line. Larger objects will be stored as BLOBs.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.TimeoutMilliseconds">
            <summary>
            Timeout, in milliseconds, for database operations.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.Encrypted">
            <summary>
            If the files should be encrypted or not.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlockLimit">
            <summary>
            Block limit
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlobBlockLimit">
            <summary>
            BLOB Block Limit
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.MainSynch">
            <summary>
            If the file is the main synchronization file of a collection (true) or a secondary file (false).
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.CreateDatabaseGUID">
            <summary>
            Creates a new GUID suitable for use in databases.
            </summary>
            <returns>New GUID.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.BeginRead">
            <summary>
            Waits until object ready for reading.
            Each call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.BeginRead"/> must be followed by exactly one call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.EndRead"/>.
            </summary>
            <exception cref="T:System.TimeoutException">If read access could not be given within the <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.TimeoutMilliseconds"/> time.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.TryBeginRead(System.Int32)">
            <summary>
            Waits, at most <paramref name="Timeout"/> milliseconds, until object ready for reading.
            Each successful call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.TryBeginRead(System.Int32)"/> must be followed by exactly one call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.EndRead"/>.
            </summary>
            <param name="Timeout">Timeout, in milliseconds.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.BeginWrite">
            <summary>
            Waits until object ready for writing.
            Each call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.BeginWrite"/> must be followed by exactly one call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.EndWrite"/>.
            </summary>
            <exception cref="T:System.TimeoutException">If write access could not be given within the <see cref="P:Waher.Persistence.Files.ObjectBTreeFile.TimeoutMilliseconds"/> time.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.TryBeginWrite(System.Int32)">
            <summary>
            Waits, at most <paramref name="Timeout"/> milliseconds, until object ready for writing.
            Each successful call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.TryBeginWrite(System.Int32)"/> must be followed by exactly one call to <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.EndWrite"/>.
            </summary>
            <param name="Timeout">Timeout, in milliseconds.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.EndRead">
            <summary>
            Ends a reading session of the object.
            Must be called once for each call to <see cref="M:Waher.Runtime.Threading.MultiReadSingleWriteObject.BeginRead"/> or successful call to 
            <see cref="M:Waher.Runtime.Threading.MultiReadSingleWriteObject.TryBeginRead(System.Int32)"/>.
            </summary>
            <returns>Number of concurrent readers when returning from locked section of call.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.EndWrite">
            <summary>
            Ends a writing session of the object.
            Must be called once for each call to <see cref="M:Waher.Runtime.Threading.MultiReadSingleWriteObject.BeginWrite"/> or successful call to 
            <see cref="M:Waher.Runtime.Threading.MultiReadSingleWriteObject.TryBeginWrite(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ClearCache">
            <summary>
            Clears the internal memory cache.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.LoadBlock(System.UInt32)">
            <summary>
            Loads a block from the file.
            </summary>
            <param name="BlockIndex">Index of block to load.</param>
            <returns>Loaded block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.SaveBlock(System.UInt32,System.Byte[])">
            <summary>
            Saves a block to the file.
            </summary>
            <param name="BlockIndex">Block index of block in file.</param>
            <param name="Block">Block to save.</param>
            <returns>Block to save.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.BlockUpdateCounter">
            <summary>
            This counter gets updated each time a block is updated in the file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.SaveNewObject(System.Object,System.Boolean)">
            <summary>
            Saves a new object to the file.
            </summary>
            <param name="Object">Object to persist.</param>
            <param name="Lazy">If Lazy insert is used, i.e. sufficiant that object is inserted at next opportuity.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.SaveNewObject(System.Object,Waher.Persistence.Serialization.ObjectSerializer,System.Boolean)">
            <summary>
            Saves a new object to the file.
            </summary>
            <param name="Object">Object to persist.</param>
            <param name="Serializer">Object serializer. If not provided, the serializer registered for the corresponding type will be used.</param>
            <param name="Lazy">If Lazy insert is used, i.e. sufficiant that object is inserted at next opportuity.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.SaveNewObjectLocked(System.Object)">
            <summary>
            Saves a new object to the file (which is locked).
            </summary>
            <param name="Object">Object to persist.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.SaveNewObjects(System.Collections.Generic.IEnumerable{System.Object},Waher.Persistence.Serialization.ObjectSerializer,System.Boolean)">
            <summary>
            Saves a new set of objects to the file.
            </summary>
            <param name="Objects">Objects to persist.</param>
            <param name="Serializer">Object serializer. If not provided, the serializer registered for the corresponding type will be used.</param>
            <param name="Lazy">If Lazy insert is used, i.e. sufficiant that object is inserted at next opportuity.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.LoadObject(System.Guid)">
            <summary>
            Loads an object from the file.
            </summary>
            <param name="ObjectId">ID of object to load.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.LoadObject``1(System.Guid)">
            <summary>
            Loads an object from the file.
            </summary>
            <typeparam name="T">Type of object to load.</typeparam>
            <param name="ObjectId">ID of object to load.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.LoadObject``1(System.Guid,System.Type)">
            <summary>
            Loads an object from the file.
            </summary>
            <param name="ObjectId">ID of object to load.</param>
            <param name="Type">Type of object to load.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.LoadObject(System.Guid,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Loads an object from the file.
            </summary>
            <param name="ObjectId">ID of object to load.</param>
            <param name="Serializer">Object serializer. If not provided, the serializer will be deduced from information stored in the file.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.UpdateObject(System.Object)">
            <summary>
            Updates an object in the database, using the object serializer corresponding to the type of object being updated.
            </summary>
            <param name="Object">Object to update.</param>
            <returns>Task object that can be used to wait for the asynchronous method to complete.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.UpdateObject(System.Object,Waher.Persistence.Serialization.ObjectSerializer)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="Object">Object to update.</param>
            <param name="Serializer">Object serializer to use.</param>
            <returns>Task object that can be used to wait for the asynchronous method to complete.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.UpdateObject(System.Guid,System.Object,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="ObjectId">Object ID of object to update.</param>
            <param name="Object">Object to update.</param>
            <param name="Serializer">Object serializer to use.</param>
            <returns>Task object that can be used to wait for the asynchronous method to complete.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.UpdateObjects(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Updates a set of objects in the database.
            </summary>
            <param name="ObjectIds">Object IDs of objects to update.</param>
            <param name="Objects">Objects to update.</param>
            <param name="Serializer">Object serializer to use.</param>
            <returns>Task object that can be used to wait for the asynchronous method to complete.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.DeleteObject(System.Object)">
            <summary>
            Deletes an object from the database, using the object serializer corresponding to the type of object being updated, to find
            the Object ID of the object.
            </summary>
            <param name="Object">Object to delete.</param>
            <returns>Object that was deleted.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.DeleteObject(System.Object,Waher.Persistence.Serialization.ObjectSerializer)">
            <summary>
            Deletes an object from the database, using the object serializer corresponding to the type of object being updated, to find
            the Object ID of the object.
            </summary>
            <param name="Object">Object to delete.</param>
            <param name="Serializer">Object serializer to use.</param>
            <returns>Object that was deleted.</returns>
            <exception cref="T:System.NotSupportedException">Thrown, if the corresponding class does not have an Object ID property, 
            or if the corresponding property type is not supported.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.DeleteObject(System.Guid)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="ObjectId">Object ID of the object to delete.</param>
            <returns>Object that was deleted.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.DeleteObject(System.Guid,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="ObjectId">Object ID of the object to delete.</param>
            <param name="Serializer">Binary serializer.</param>
            <returns>Object that was deleted.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.DeleteObjects(System.Collections.Generic.IEnumerable{System.Guid},Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Deletes a set of objects from the database.
            </summary>
            <param name="ObjectIds">Object IDs of the objects to delete.</param>
            <param name="Serializer">Binary serializer.</param>
            <returns>Object that was deleted.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found in the database.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.GetCurrentStateReport(System.Boolean,System.Boolean)">
            <summary>
            Provides a report on the current state of the file.
            </summary>
            <param name="WriteStat">If statistics is to be included in the report.</param>
            <param name="Properties">If object properties should be exported as well, in case the database is corrupt or unbalanced.</param>
            <returns>Report</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ComputeStatistics">
            <summary>
            Goes through the entire file and computes statistics abouts its composition.
            </summary>
            <returns>File statistics and found Object IDs.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ComputeStatisticsLocked">
            <summary>
            Goes through the entire file and computes statistics abouts its composition.
            </summary>
            <returns>File statistics and found Object IDs.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ExportGraphXML(System.Boolean)">
            <summary>
            Exports the structure of the file to XML.
            </summary>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Graph XML.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ExportGraphXML(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Exports the structure of the file to XML.
            </summary>
            <param name="Output">XML Output</param>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Asynchronous task object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ExportGraphXML(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Exports the structure of the file to XML.
            </summary>
            <param name="XmlOutput">XML Output</param>
            <param name="Properties">If object properties should be exported as well.</param>
            <returns>Asynchronous task object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.GetObjectCount(System.UInt32,System.Boolean)">
            <summary>
            Get number of objects in subtree spanned by <paramref name="BlockIndex">BlockIndex</paramref>.
            </summary>
            <param name="BlockIndex">Block index of root of subtree.</param>
            <param name="IncludeChildren">If objects in children are to be included in count.</param>
            <returns>Total number of objects in subtree.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.GetRank(System.Guid)">
            <summary>
            Calculates the rank of an object in the database, given its Object ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Rank of object in database.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the object is not found.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ContainsAsync(System.Object)">
            <summary>
            Checks if an item is stored in the file.
            </summary>
            <param name="Item">Object to check for.</param>
            <returns>If the object is stored in the file.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.CountAsync">
            <summary>
            Number of objects in file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.IsReadOnly">
            <summary>
            <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.ClearAsync">
            <summary>
            Clears the database of all objects.
            </summary>
            <returns>Task object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.GetEnumeratorAsyncLocked">
            <summary>
            Returns an untyped enumerator that iterates through the collection.
            
            For a typed enumerator, call the <see cref="M:Waher.Persistence.Files.ObjectBTreeFile.GetTypedEnumeratorAsyncLocked``1"/> method.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.GetTypedEnumeratorAsyncLocked``1">
            <summary>
            Returns an typed enumerator that iterates through the collection. The typed enumerator uses
            the object serializer of <typeparamref name="T"/> to deserialize objects by default.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.AddIndexLocked(Waher.Persistence.Files.IndexBTreeFile,System.Boolean)">
            <summary>
            Adds an index to the file. When objects are added, updated or deleted from the file, the corresponding references in the
            index file will be updated as well. The index files will be disposed together with the main file as well.
            </summary>
            <param name="Index">Index file to add.</param>
            <param name="Regenerate">If the index is to be regenerated.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.RemoveIndex(Waher.Persistence.Files.IndexBTreeFile)">
            <summary>
            Removes an index from the file.
            </summary>
            <param name="Index">Index file to add.</param>
            <returns>If the index was found and removed.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFile.Indices">
            <summary>
            Available indices.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.FindBestIndex(System.Int32@,System.String,System.String[])">
            <summary>
            Finds the best index for finding objects using  a given property.
            </summary>
            <param name="BestNrFields">Number of index fields used in best index.</param>
            <param name="Property">Property to search on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <param name="SortOrder">Sort order result is to be presented with.</param>
            <returns>Best index to use for the search. If no index is found matching the properties, null is returned.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.FindBestIndex(System.Int32@,System.String[],System.String[])">
            <summary>
            Finds the best index for finding objects using  a given set of properties. The method assumes the most restrictive
            property is mentioned first in <paramref name="Properties"/>.
            </summary>
            <param name="BestNrFields">Number of index fields used in best index.</param>
            <param name="Properties">Properties to search on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <param name="SortOrder">Sort order result is to be presented with.</param>
            <returns>Best index to use for the search. If no index is found matching the properties, null is returned.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.FindBestIndex(System.String[])">
            <summary>
            Finds the best index for finding objects using  a given set of properties. The method assumes the most restrictive
            property is mentioned first in <paramref name="Properties"/>.
            </summary>
            <param name="Properties">Properties to search on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <returns>Best index to use for the search. If no index is found matching the properties, null is returned.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.FindBestIndex(System.Int32@,System.Int32,System.Int32,System.String[])">
            <summary>
            Finds the best index for finding objects using  a given set of properties. The method assumes the most restrictive
            property is mentioned first in <paramref name="Properties"/>.
            </summary>
            <param name="BestNrFields">Number of index fields used in best index.</param>
            <param name="FirstRequired">Number of field names in index that must exist among properties.</param>
            <param name="RequiredProperties">Number of properties that required field names may choose from.</param>
            <param name="Properties">Properties to search on. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
            <returns>Best index to use for the search. If no index is found matching the properties, null is returned.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.CheckIndicesInitialized``1">
            <summary>
            Checks that indices have been loaded and are active for searching.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFile.FindLocked``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.ObjectBTreeFileCursor`1">
            <summary>
            Enumerates object in a <see cref="T:Waher.Persistence.Files.ObjectBTreeFile"/> in GUID order. You can use the enumerator to enumerate objects
            forwards and backwards, as well as skip a given number of objects.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Waher#Persistence#Files#ICursor{T}#CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GetCurrentRankLocked">
            <summary>
            Gets the rank of the current object.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GoToFirstLocked">
            <summary>
            Goes to the first object.
            </summary>
            <returns>If a first object was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GoToLastLocked">
            <summary>
            Goes to the last object.
            </summary>
            <returns>If a last object was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GoToObjectLocked(System.Object)">
            <summary>
            Finds the position of an object in the underlying database.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>If the corresponding object was found. If so, the <see cref="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current"/> property will contain the corresponding
            object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GoToObjectLocked(System.UInt64)">
            <summary>
            Finds the object given its order in the underlying database.
            </summary>
            <param name="ObjectIndex">Order of object in database.</param>
            <returns>If the corresponding object was found. If so, the <see cref="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current"/> property will contain the corresponding
            object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Reset(Waher.Persistence.Files.Bookmark)">
            <summary>
            Resets the enumerator, and sets the starting point to a given starting point.
            </summary>
            <param name="StartingPoint">Starting point to start enumeration.</param>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.SkipLocked(System.Int64)">
            <summary>
            Skips a certain number of objects forward (positive <paramref name="NrObjects"/>) or backward (negative <paramref name="NrObjects"/>).
            </summary>
            <param name="NrObjects">Number of objects to skip forward (positive) or backward (negative).</param>
            <returns>If the skip operation was successful and a new object is available in <see cref="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Current"/>.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.GetBookmarkLocked">
            <summary>
            Gets a bookmark for the current position. You can set the current position of the enumerator, calling the
            <see cref="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.Reset(Waher.Persistence.Files.Bookmark)"/> method.
            </summary>
            <returns>Bookmark</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.ObjectBTreeFileCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.CurrentBlockIndex">
            <summary>
            Index of current block
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.ObjectBTreeFileCursor`1.CurrentObjectPosition">
            <summary>
            Current object position, within block.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.Comparison">
            <summary>
            Static class that performs comparisons of property values.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.TryMakeSameType(System.Object@,System.Object@)">
            <summary>
            Tries to make sure <paramref name="x"/> and <paramref name="y"/> have the same type.
            </summary>
            <param name="x">First value.</param>
            <param name="y">Second value.</param>
            <returns>If <paramref name="x"/> and <paramref name="y"/> are of the same type after the call.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Compare(System.Object,System.Object)">
            <summary>
            Compares two values. The values can be of different, but compatible types.
            </summary>
            <param name="Value1">First value.</param>
            <param name="Value2">Second value.</param>
            <returns>
            Negative, if <paramref name="Value1"/>&lt;<paramref name="Value2"/>.
            Positive, if <paramref name="Value1"/>&gt;<paramref name="Value2"/>.
            Zero, if <paramref name="Value1"/>=<paramref name="Value2"/>.
            </returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.Object@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.Double@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.Single@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.Decimal@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="F:Waher.Persistence.Files.Searching.Comparison.DecimalEpsilon">
            <summary>
            Smallest value represented by the <see cref="T:System.Decimal"/> data type.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.String@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(Waher.Persistence.CaseInsensitiveString@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Increment(System.Guid@)">
            <summary>
            Increments <paramref name="Value"/> to the smallest value greater than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.Object@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.Double@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.Single@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.Decimal@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.String@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(Waher.Persistence.CaseInsensitiveString@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.Comparison.Decrement(System.Guid@)">
            <summary>
            Decrements <paramref name="Value"/> to the largest value smaller than <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <returns>If operation was successful.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.EmptyCursor`1">
            <summary>
            Provides a cursor into an empty set.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.#ctor">
            <summary>
            Provides a cursor into an empty set.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.EmptyCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.EmptyCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.EmptyCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.EmptyCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.EmptyCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.EmptyCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.EmptyCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.EmptyCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.EmptyCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterAnd">
            <summary>
            This filter selects objects that conform to all child-filters provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterAnd.#ctor(Waher.Persistence.Files.Searching.IApplicableFilter[],Waher.Persistence.Filters.Filter[])">
            <summary>
            This filter selects objects that conform to all child-filters provided.
            </summary>
            <param name="ApplicableFilters">Applicable filters.</param>
            <param name="Filters">Child filters.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterAnd.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterAnd.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterCustom">
            <summary>
            Custom filter used to filter objects using an external expression.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.#ctor(Waher.Persistence.Filters.ICustomFilter)">
            <summary>
            Custom filter used to filter objects using an external expression.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterCustom.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inverse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterCustom.Passes(System.Object)">
            <summary>
            Checks if an object passes the test or not.
            </summary>
            <param name="Object">Untyped object</param>
            <returns>If the object passes the test.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilteredCursor`1">
            <summary>
            Provides a filtered cursor. It only returns objects that matches a given filter.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.#ctor(Waher.Persistence.Files.ICursor{`0},Waher.Persistence.Files.Searching.IApplicableFilter,System.Boolean,System.Boolean,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Provides a filtered cursor. It only returns objects that matches a given filter.
            </summary>
            <param name="Cursor">Cursor to be filtered.</param>
            <param name="Filter">Filter to apply.</param>
            <param name="UntilFirstFail">Only return ites until first filter failure.</param>
            <param name="Forward">If <paramref name="Cursor"/> is to be processed forwards (true) or backwards (false).</param>
            <param name="Provider">Files provider.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilteredCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.FilteredCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilteredCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.FilteredCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilteredCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.FilteredCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilteredCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.FilteredCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilteredCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldEqualTo">
            <summary>
            This filter selects objects that have a named field equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldEqualTo.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldEqualTo.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldGreaterOrEqualTo">
            <summary>
            This filter selects objects that have a named field greater or equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldGreaterOrEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field greater or equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldGreaterOrEqualTo.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldGreaterOrEqualTo.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldGreaterThan">
            <summary>
            This filter selects objects that have a named field greater than a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldGreaterThan.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field greater than a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldGreaterThan.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldGreaterThan.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldLesserOrEqualTo">
            <summary>
            This filter selects objects that have a named field lesser or equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLesserOrEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field lesser or equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldLesserOrEqualTo.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLesserOrEqualTo.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldLesserThan">
            <summary>
            This filter selects objects that have a named field lesser than a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLesserThan.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field lesser than a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldLesserThan.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLesserThan.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldLikeRegEx">
            <summary>
            This filter selects objects that have a named field matching a given regular expression.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLikeRegEx.#ctor(System.String,System.String)">
            <summary>
            This filter selects objects that have a named field matching a given regular expression.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="RegularExpression">Regular expression.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldLikeRegEx.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldLikeRegEx.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldLikeRegEx.Regex">
            <summary>
            Parsed regular expression.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterFieldNotEqualTo">
            <summary>
            This filter selects objects that have a named field not equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldNotEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field not equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterFieldNotEqualTo.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterFieldNotEqualTo.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterNot">
            <summary>
            This filter selects objects that does not conform to the child-filter provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterNot.#ctor(Waher.Persistence.Files.Searching.IApplicableFilter)">
            <summary>
            This filter selects objects that does not conform to the child-filter provided.
            </summary>
            <param name="Filter">Child filter.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterNot.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterNot.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.FilterOr">
            <summary>
            This filter selects objects that conform to any of the child-filters provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterOr.#ctor(Waher.Persistence.Files.Searching.IApplicableFilter[],Waher.Persistence.Filters.Filter[])">
            <summary>
            This filter selects objects that conform to any of the child-filters provided.
            </summary>
            <param name="ApplicableFilters">Applicable filters.</param>
            <param name="Filters">Child filters.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.FilterOr.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.FilterOr.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.IApplicableFilter.AppliesTo(System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Checks if the filter applies to the object.
            </summary>
            <param name="Object">Object.</param>
            <param name="Serializer">Corresponding object serializer.</param>
            <param name="Provider">Files provider.</param>
            <returns>If the filter can be applied.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.IApplicableFilter.ConstantFields">
            <summary>
            Gets an array of constant fields. Can return null, if there are no constant fields.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.ObjectIdCursor`1">
            <summary>
            Provides a cursor based on Object IDs.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.#ctor(Waher.Persistence.Files.ICursor{`0},System.String)">
            <summary>
            Provides a cursor based on Object IDs.
            </summary>
            <param name="Cursor">Cursor to be filtered.</param>
            <param name="ObjectIdFieldName">Field Name of the ObjectID field.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ObjectIdCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ObjectIdCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.PagesCursor`1">
            <summary>
            Provides a cursor into a paged set of objects.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.#ctor(System.Int32,System.Int32,Waher.Persistence.Files.ICursor{`0})">
            <summary>
            Provides a cursor into a paged set of objects.
            </summary>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Cursor">Cursor to underlying result set.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.PagesCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.PagesCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.PagesCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.PagesCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.PagesCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.PagesCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.PagesCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.PagesCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.PagesCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.RangeInfo">
            <summary>
            Contains information about a range in a search operation.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.#ctor(System.String)">
            <summary>
            Contains information about a range in a search operation.
            </summary>
            <param name="FieldName">Field name being searched.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.FieldName">
            <summary>
            Field Name
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.Min">
            <summary>
            Minimum endpoint, if a range.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.Max">
            <summary>
            Maximum endpoint, if a range.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.Point">
            <summary>
            Point value, if not a range.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.MinInclusive">
            <summary>
            If the minimum endpoint is included in the range.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.MaxInclusive">
            <summary>
            If the maximum endpoint is included in the range.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.IsRange">
            <summary>
            If the object specifies a range (true) or a single point (false).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.IsPoint">
            <summary>
            If the object specifies a point (true) or a range (false).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.IsOpenEndedRange">
            <summary>
            If the range is open-ended.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.HasMin">
            <summary>
            If the range has a minimum endpoint.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangeInfo.HasMax">
            <summary>
            If the range has a maximum endpoint.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.SetPoint(System.Object)">
            <summary>
            Range consists of a single point value.
            </summary>
            <param name="Value">Point value.</param>
            <returns>If range is consistent.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.SetMin(System.Object,System.Boolean,System.Boolean@)">
            <summary>
            Sets minimum endpoint of range.
            </summary>
            <param name="Value">Endpoint value.</param>
            <param name="Inclusive">If endpoint is included in range or not.</param>
            <param name="Smaller">If the range became smaller.</param>
            <returns>If range is consistent.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.SetMax(System.Object,System.Boolean,System.Boolean@)">
            <summary>
            Sets maximum endpoint of range.
            </summary>
            <param name="Value">Endpoint value.</param>
            <param name="Inclusive">If endpoint is included in range or not.</param>
            <param name="Smaller">If the range became smaller.</param>
            <returns>If range is consistent.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.Copy">
            <summary>
            Creates a copy of the range information.
            </summary>
            <returns>Copy</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangeInfo.CopyTo(Waher.Persistence.Files.Searching.RangeInfo)">
            <summary>
            Copies the range information to another range object.
            </summary>
            <param name="Destination">Destination object.</param>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.RangesCursor`1">
            <summary>
            Provides a cursor that enumerates ranges of values using an index.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.#ctor(Waher.Persistence.Files.IndexBTreeFile,Waher.Persistence.Files.Searching.RangeInfo[],Waher.Persistence.Files.Searching.IApplicableFilter[],Waher.Persistence.Files.FilesProvider)">
            <summary>
            Provides a cursor that joins results from multiple cursors. It only returns an object once, regardless of how many times
            it appears in the different child cursors.
            </summary>
            <param name="Index">Index.</param>
            <param name="Ranges">Ranges to enumerate.</param>
            <param name="AdditionalFilters">Additional filters.</param>
            <param name="Provider">Files provider.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangesCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.RangesCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangesCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.RangesCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangesCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.RangesCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.RangesCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.RangesCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.RangesCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.ReversedCursor`1">
            <summary>
            Reverses the direction of a given cursor.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.#ctor(Waher.Persistence.Files.ICursor{`0})">
            <summary>
            Reverses the direction of a given cursor.
            </summary>
            <param name="Cursor">Cursor to underlying result set.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ReversedCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.ReversedCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ReversedCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.ReversedCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ReversedCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.ReversedCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.ReversedCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.ReversedCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.ReversedCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.SingletonCursor`1">
            <summary>
            Provides a cursor into a set of a single object.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.#ctor(`0,Waher.Persistence.Serialization.ObjectSerializer,System.Guid)">
            <summary>
            Provides a cursor into a set of a single object.
            </summary>
            <param name="Value">Singleton value.</param>
            <param name="Serializer">Serializer of <paramref name="Value"/>.</param>
            <param name="ObjectId">Object ID.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SingletonCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.SingletonCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SingletonCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.SingletonCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SingletonCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.SingletonCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SingletonCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.SingletonCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SingletonCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.SortedCursor`1">
            <summary>
            Provides a cursor into a sorted set of objects.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.#ctor(System.Collections.Generic.SortedDictionary{Waher.Persistence.Files.Searching.SortedReference{`0},System.Boolean},Waher.Persistence.Files.Storage.IndexRecords)">
            <summary>
            Provides a cursor into a sorted set of objects.
            </summary>
            <param name="SortedObjects">Sorted set of objects.</param>
            <param name="RecordHandler">Record handler.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.SortedCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.SortedCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.SortedCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.SortedCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.SortedReference`1">
            <summary>
            Sorted object reference.
            </summary>
            <typeparam name="T">Type of object being sorted.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedReference`1.#ctor(System.Byte[],System.Collections.Generic.IComparer{System.Byte[]},`0,Waher.Persistence.Serialization.IObjectSerializer,System.Guid)">
            <summary>
            Sorted object reference.
            </summary>
            <param name="Key">Key</param>
            <param name="Comparer">Comparer</param>
            <param name="Value">Object value.</param>
            <param name="Serializer">Serializer used.</param>
            <param name="ObjectId">Object ID</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedReference`1.Value">
            <summary>
            Object value.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedReference`1.Serializer">
            <summary>
            Serializer used.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.SortedReference`1.ObjectId">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.SortedReference`1.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Searching.UnionCursor`1">
            <summary>
            Provides a cursor that joins results from multiple cursors. It only returns an object once, regardless of how many times
            it appears in the different child cursors.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.#ctor(Waher.Persistence.Filters.Filter[],Waher.Persistence.Files.ObjectBTreeFile)">
            <summary>
            Provides a cursor that joins results from multiple cursors. It only returns an object once, regardless of how many times
            it appears in the different child cursors.
            </summary>
            <param name="ChildFilters">Child filters.</param>
            <param name="File">File being searched.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.UnionCursor`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.UnionCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.UnionCursor`1.CurrentSerializer">
            <summary>
            Serializer used to deserialize <see cref="P:Waher.Persistence.Files.Searching.UnionCursor`1.Current"/>.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.UnionCursor`1.CurrentTypeCompatible">
            <summary>
            If the curent object is type compatible with <typeparamref name="T"/> or not. If not compatible, <see cref="P:Waher.Persistence.Files.Searching.UnionCursor`1.Current"/> 
            will be null, even if there exists an object at the current position.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Searching.UnionCursor`1.CurrentObjectId">
            <summary>
            Gets the Object ID of the current object.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the enumeration has not started. 
            Call <see cref="M:Waher.Persistence.Files.Searching.UnionCursor`1.MoveNextAsyncLocked"/> to start the enumeration after creating or resetting it.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.MoveNextAsyncLocked">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.MovePreviousAsyncLocked">
            <summary>
            Advances the enumerator to the previous element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the previous element; false if
            the enumerator has passed the beginning of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Searching.UnionCursor`1.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="T:Waher.Persistence.Files.SerialFile">
            <summary>
            Serializes binary blocks into a file, possibly encrypted. Blocks are accessed in the order they were persisted.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.SerialFile.collectionName">
            <summary>
            Collection Name
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Serializes binary blocks into a file, possibly encrypted. Blocks are accessed in the order they were persisted.
            </summary>
            <param name="FileName">Name of file</param>
            <param name="CollectionName">Collection Name</param>
            <param name="Encrypted">If file is encrypted.</param>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.Create(System.String,System.String)">
            <summary>
            Serializes binary blocks into a file, possibly encrypted. Blocks are accessed in the order they were persisted.
            </summary>
            <param name="FileName">Name of file</param>
            <param name="CollectionName">Collection Name</param>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.Create(System.String,System.String,System.Boolean,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Serializes binary blocks into a file, possibly encrypted. Blocks are accessed in the order they were persisted.
            </summary>
            <param name="FileName">Name of file</param>
            <param name="CollectionName">Collection Name</param>
            <param name="Encrypted">If file is encrypted.</param>
            <param name="Provider">Provider of encryption keys.</param>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.GetKeys(Waher.Persistence.Files.SerialFile,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Gets keys for the serial file, or decendant.
            </summary>
            <param name="SerialFile">SerialFile reference, or decendant.</param>
            <param name="Provider">Provider of encryption keys.</param>
        </member>
        <member name="P:Waher.Persistence.Files.SerialFile.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.SerialFile.CollectionName">
            <summary>
            Collection name.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.GetLength">
            <summary>
            Gets the length of the file, in bytes.
            </summary>
            <returns>Length of file.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.ReadBlock(System.Int64)">
            <summary>
            Reads a binary block from the file, starting at a given position.
            </summary>
            <param name="Position">Position of block.</param>
            <returns>Binary block (decrypted if file is encrypted), and the position of the following block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.WriteBlock(System.Byte[])">
            <summary>
            Writes a binary block to the end of the file.
            </summary>
            <param name="Data">Binary data to write.</param>
            <returns>Position of data block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.WriteBlockLocked(System.Byte[])">
            <summary>
            Writes a binary block to the end of the file.
            </summary>
            <param name="Data">Binary data to write.</param>
            <returns>Position of data block.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.Truncate(System.Int64)">
            <summary>
            Truncates the file.
            </summary>
            <param name="Length">Length at which the file will be truncated.</param>
        </member>
        <member name="M:Waher.Persistence.Files.SerialFile.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Statistics.FileStatistics">
            <summary>
            Contains information about a file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Statistics.FileStatistics.#ctor(System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Contains information about a file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.BlockSize">
            <summary>
            Block size
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrSearches">
            <summary>
            Number of searches performed against the file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrFullFileScans">
            <summary>
            Number of searches performed, resulting in full file scans.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlocks">
            <summary>
            Number of blocks
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBytesUsed">
            <summary>
            Number of bytes used.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBytesUnused">
            <summary>
            Number of bytes unused.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBytesTotal">
            <summary>
            Total number of bytes in file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBlocks">
            <summary>
            Number of BLOB blocks
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBytesUsed">
            <summary>
            Number of BLOB bytes used.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBytesUnused">
            <summary>
            Number of BLOB bytes unused.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBytesTotal">
            <summary>
            Total number of BLOB bytes in file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.Usage">
            <summary>
            Usage, in percent.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrObjects">
            <summary>
            Number of objects stored.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MinObjectSize">
            <summary>
            Size of smallest object.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MaxObjectSize">
            <summary>
            Size of largest object.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MinObjectsPerBlock">
            <summary>
            Smallest number of objects in a block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MaxObjectsPerBlock">
            <summary>
            Largest number of objects in a block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MinBytesUsedPerBlock">
            <summary>
            Smallest number of bytes used in a block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MaxBytesUsedPerBlock">
            <summary>
            Largest number of bytes used in a block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.AverageObjectSize">
            <summary>
            Average size of object.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.AverageObjectsPerBlock">
            <summary>
            Average number of objects per block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.AverageBytesUsedPerBlock">
            <summary>
            Average bytes used per block.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MinDepth">
            <summary>
            Depth of most shallow leaf.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.MaxDepth">
            <summary>
            Depth of deepest leaf.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlockLoads">
            <summary>
            Number of blocks load operations performed.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrCacheLoads">
            <summary>
            Number of blocks load operations performed, where result was fetched from internal cache.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlockSaves">
            <summary>
            Number of blocks save operations performed.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBlockLoads">
            <summary>
            Number of BLOB blocks load operations performed.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.NrBlobBlockSaves">
            <summary>
            Number of BLOB blocks save operations performed.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.IsCorrupt">
            <summary>
            If the file is corrupt.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.IsBalanced">
            <summary>
            If the file is balanced.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.Comments">
            <summary>
            Any comments logged when scanning the file. If no comments, this property is null.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.HasComments">
            <summary>
            If comments have been logged.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.UnreferencedBlocks">
            <summary>
            Unreferenced blocks, if any.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Statistics.FileStatistics.UnreferencedBlobBlocks">
            <summary>
            Unreferenced BLOB blocks, if any.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Statistics.FileStatistics.ToString(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Outputs file statistics to a string.
            </summary>
            <param name="Output">String output.</param>
            <param name="WriteStat">If statistics is to be written.</param>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.MissingFieldAction">
            <summary>
            How missing fields are to be treated in an index search.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.Storage.MissingFieldAction.Prohibit">
            <summary>
            Missing fields are not allowed.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.Storage.MissingFieldAction.Null">
            <summary>
            Missing fields will be considered to have the NULL value.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.Storage.MissingFieldAction.First">
            <summary>
            Missing fields will be considered to have the first value allowed, depending on type and sort order.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Files.Storage.MissingFieldAction.Last">
            <summary>
            Missing fields will be considered to have the last value allowed, depending on type and sort order.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.IndexRecords">
            <summary>
            Handles index storage of object references.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.#ctor(System.String,System.Text.Encoding,System.Int32,System.String[])">
            <summary>
            Handles index storage of object references.
            </summary>
            <param name="CollectionName">Name of current collection.</param>
            <param name="Encoding">Encoding to use for text.</param>
            <param name="KeySizeLimit">Upper size limit of index keys.</param>
            <param name="FieldNames">Field names included in the index. By default, sort order is ascending.
            If descending sort order is desired, prefix the corresponding field name by a hyphen (minus) sign.</param>
        </member>
        <member name="P:Waher.Persistence.Files.Storage.IndexRecords.FieldNames">
            <summary>
            Field names included in the index.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Storage.IndexRecords.Ascending">
            <summary>
            If the corresponding field name is sorted in ascending order (true) or descending order (false).
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.Storage.IndexRecords.Index">
            <summary>
            Index file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.Serialize(System.Guid,System.Object,Waher.Persistence.Serialization.IObjectSerializer,Waher.Persistence.Files.Storage.MissingFieldAction)">
            <summary>
            Serializes the index key for a given object and the underlying index fields.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="Object">Object</param>
            <param name="Serializer">Serializer.</param>
            <param name="MissingFields">How missing fields are to be treated.</param>
            <returns>Serialized index, if object can be indexed using the current index, or null otherwise.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.Serialize(Waher.Persistence.Serialization.BinarySerializer,System.Object)">
            <summary>
            Serializes a value.
            </summary>
            <param name="Writer">Serializer.</param>
            <param name="Value">Value to serialize.</param>
            <returns>If the value could be serialized.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            	Value Meaning Less than zero x is less than y.
            	Zero x equals y. 
            	Greater than zero x is greater than y.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            	Value Meaning Less than zero x is less than y.
            	Zero x equals y. 
            	Greater than zero x is greater than y.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.GetFullPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the full payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Full size of the payload.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.GetKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the key of the next record.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Key object.</returns>
        </member>
        <member name="P:Waher.Persistence.Files.Storage.IndexRecords.ObjectId">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.GetPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Payload size.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.GetPayloadSizeEx(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Size of the payload, and if the object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.IsBlob(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Checks if the following object is a BLOB.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If the following object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.GetPayloadType(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload type.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Payload type.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.SkipKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Skips the next key.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If a key was skipped.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.ExportKey(System.Object,System.Xml.XmlWriter)">
            <summary>
            Exports a key to XML.
            </summary>
            <param name="ObjectId">Key to export.</param>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.SameSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering corresponds to a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.ReverseSortOrder(System.String[],System.String[])">
            <summary>
            If the index ordering is a reversion of a given sort order.
            </summary>
            <param name="ConstantFields">Optional array of names of fields that will be constant during the enumeration.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>If the index matches the sort order. (The index ordering is allowed to be more specific.)</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IndexRecords.EncodeBlobReference(System.Byte[],System.Byte[])">
            <summary>
            Encodes a BLOB reference.
            </summary>
            <param name="BlobReference">Binary BLOB reference.</param>
            <param name="BlobData">Original BLOB data.</param>
            <returns>Encoded BLOB reference.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.IRecordHandler">
            <summary>
            Interface for B-tree record handlers.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.GetKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the next record key.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Next key value, or null if no more keys available.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.SkipKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Skips the next record key.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If a key was skipped (true), or if no more keys are available (false).</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.GetFullPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the full payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Full size of the payload.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.GetPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Size of the payload.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.GetPayloadSizeEx(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Size of the payload, and if the object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.IsBlob(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Checks if the following object is a BLOB.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If the following object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.GetPayloadType(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the type of the payload, if any.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Payload type, if any, or null, if not.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.ExportKey(System.Object,System.Xml.XmlWriter)">
            <summary>
            Exports a key to XML.
            </summary>
            <param name="ObjectId">Key to export.</param>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.IRecordHandler.EncodeBlobReference(System.Byte[],System.Byte[])">
            <summary>
            Encodes a BLOB reference.
            </summary>
            <param name="BlobReference">Binary BLOB reference.</param>
            <param name="BlobData">Original BLOB data.</param>
            <returns>Encoded BLOB reference.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.PrimaryRecords">
            <summary>
            Handles primary storage of objects, as pairs of primary keys (GUIDs) and serialized objects.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.#ctor(System.Int32)">
            <summary>
            Handles primary storage of objects, as pairs of primary keys (GUIDs) and serialized objects.
            </summary>
            <param name="InlineObjectSizeLimit">Maximum size of objects that are stored in-line. Larger objects will be stored as BLOBs.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.GetKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the next record key.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Next key value, or null if no more keys available.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.SkipKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Skips the next record key.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If a key was skipped (true), or if no more keys are available (false).</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.GetFullPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the full payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Full size of the payload.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.GetPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Size of the payload.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.GetPayloadSizeEx(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Size of the payload, and if the object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.IsBlob(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Checks if the following object is a BLOB.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If the following object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.GetPayloadType(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the type of the payload, if any.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>Payload type, if any, or null, if not.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            	Value Meaning Less than zero x is less than y.
            	Zero x equals y. 
            	Greater than zero x is greater than y.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.ExportKey(System.Object,System.Xml.XmlWriter)">
            <summary>
            Exports a key to XML.
            </summary>
            <param name="ObjectId">Key to export.</param>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.PrimaryRecords.EncodeBlobReference(System.Byte[],System.Byte[])">
            <summary>
            Encodes a BLOB reference.
            </summary>
            <param name="BlobReference">Binary BLOB reference.</param>
            <param name="BlobData">Original BLOB data.</param>
            <returns>Encoded BLOB reference.</returns>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.SequentialGuidGenerator">
            <summary>
            Class that generates sequential, albeit cyclical, GUIDs for use in databases. They are not guaranteed to be
            globally unique. They are however unique to a very high degree of probability.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.SequentialGuidGenerator.#ctor">
            <summary>
            Class that generates sequential, albeit cyclical, GUIDs for use in databases. They are not guaranteed to be
            globally unique. They are however unique to a very high degree of probability.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.SequentialGuidGenerator.CreateGuid">
            <summary>
            GUIDs are generated by sets of 16 bytes, that are defined as follows:
            
            Bytes 0-3:		Number of seconds, since 2001-01-01. (Will wrap 2136-02-07, 06:28:16)
            Bytes 4-7:		Counter, started at a random number.
            Bytes 8-9:		Process ID.
            Bytes 10-12:	Machine number.
            Bytes 13-15:	Random number.
            </summary>
            <returns>New GUID</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.SequentialGuidGenerator.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Files.Storage.StringDictionaryRecords">
            <summary>
            Handles string dictionary entries.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.#ctor(System.String,System.Text.Encoding,Waher.Persistence.Serialization.GenericObjectSerializer,Waher.Persistence.Files.FilesProvider)">
            <summary>
            Handles string dictionary entries.
            </summary>
            <param name="CollectionName">Name of current collection.</param>
            <param name="Encoding">Encoding to use for text.</param>
            <param name="GenericSerializer">Generic serializer.</param>
            <param name="Provider">Files database provider.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            	Value Meaning Less than zero x is less than y.
            	Zero x equals y. 
            	Greater than zero x is greater than y.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of x and y, as shown in the following table.
            	Value Meaning Less than zero x is less than y.
            	Zero x equals y. 
            	Greater than zero x is greater than y.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the key of the next record.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>Key object.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.SkipKey(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Skips the next key of the next record.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>If a key was skipped.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetFullPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the full payload size of the next objet.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>Full payloa size.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetPayloadSize(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>Payload size.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetPayloadSizeEx(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload size.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>Size of the payload, and if the object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.IsBlob(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Checks if the following object is a BLOB.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <returns>If the following object is a BLOB.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetPayloadType(Waher.Persistence.Serialization.BinaryDeserializer)">
            <summary>
            Gets the payload type.
            </summary>
            <param name="Reader">Binary deserializer.</param>
            <returns>Payload type.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.ExportKey(System.Object,System.Xml.XmlWriter)">
            <summary>
            Exports a key.
            </summary>
            <param name="ObjectId">Key</param>
            <param name="Output">XML Output.</param>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.EncodeBlobReference(System.Byte[],System.Byte[])">
            <summary>
            Encodes a BLOB reference.
            </summary>
            <param name="BlobReference">Binary BLOB reference.</param>
            <param name="BlobData">Original BLOB data.</param>
            <returns>Encoded BLOB reference.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.Storage.StringDictionaryRecords.GetBlobInfo(Waher.Persistence.Serialization.BinaryDeserializer,System.UInt32@,System.UInt32@)">
            <summary>
            Gets BLOB information.
            </summary>
            <param name="Reader">Binary deserializer object.</param>
            <param name="FullPayloadSize">Full payload size.</param>
            <param name="BlobBlockIndex">BLOB block index.</param>
        </member>
        <member name="T:Waher.Persistence.Files.StringDictionary">
            <summary>
            This class manages a string dictionary in a persisted file.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.#ctor(System.String,Waher.Persistence.Files.FilesProvider,System.Boolean)">
            <summary>
            This class manages a string dictionary in a persisted file.
            </summary>
            <param name="CollectionName">Collection Name.</param>
            <param name="Provider">Files provider.</param>
            <param name="RetainInMemory">Retain the dictionary in memory.</param>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Create(System.String,System.String,System.String,Waher.Persistence.Files.FilesProvider,System.Boolean)">
            <summary>
            This class manages a string dictionary in a persisted file.
            </summary>
            <param name="FileName">File name of index file.</param>
            <param name="BlobFileName">Name of file in which BLOBs are stored.</param>
            <param name="CollectionName">Collection Name.</param>
            <param name="Provider">Files provider.</param>
            <param name="RetainInMemory">Retain the dictionary in memory.</param>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the System.Collections.Generic.IDictionary{string,object} contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the System.Collections.Generic.IDictionary{string,object}.</param>
            <returns>true if the System.Collections.Generic.IDictionary{string,object} contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.ContainsKeyAsync(System.String)">
            <summary>
            Determines whether the System.Collections.Generic.IDictionary{string,object} contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the System.Collections.Generic.IDictionary{string,object}.</param>
            <returns>true if the System.Collections.Generic.IDictionary{string,object} contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the System.Collections.Generic.IDictionary{string,object}.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the System.Collections.Generic.IDictionary{string,object}.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.AddAsync(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the System.Collections.Generic.IDictionary{string,object}.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the System.Collections.Generic.IDictionary{string,object}.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.AddAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Adds an element with the provided key and value to the System.Collections.Generic.IDictionary{string,object}.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <param name="ReplaceIfExists">If replacement of any existing value is desired.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the System.Collections.Generic.IDictionary{string,object}.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.SerializeLocked(System.String,System.Object,Waher.Persistence.Serialization.IObjectSerializer)">
            <summary>
            Serializes a (Key,Value) pair.
            </summary>
            <param name="Key">Key</param>
            <param name="Value">Value</param>
            <param name="Serializer">Serializer.</param>
            <returns>Serialized record.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the System.Collections.IDictionary object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.RemoveAsync(System.String)">
            <summary>
            Removes the element with the specified key from the System.Collections.IDictionary object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, 
            the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements System.Collections.Generic.IDictionary{string,object} contains an element with the specified key; 
            otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.TryGetValueAsync(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>Returns a pair of values:
            
            First value is true if the object that implements System.Collections.Generic.IDictionary{string,object} contains an element 
            with the specified key; otherwise, false.
            When this method returns, the second value associated with the specified key, if the key is found; otherwise, 
            the default value for the type of the value parameter. This parameter is passed uninitialized.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.GetValueAsync(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>Returns the value associated with the specified key, if the key is found.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If <paramref name="key"/> was not found.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Clear">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.ClearAsync">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.CopyToAsync(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the contents of the dicitionary to an array.
            </summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Start index</param>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.ToArray">
            <summary>
            Loads the entire table and returns it as an array.
            </summary>
            <returns>Array of key-value pairs.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.ToArrayAsync">
            <summary>
            Loads the entire table and returns it as an array.
            </summary>
            <returns>Array of key-value pairs.</returns>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.GetEnumeratorLocked">
            <summary>
            Gets an enumerator for all entries in the dictionary.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.DictionaryFile">
            <summary>
            Index file.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.CollectionName">
            <summary>
            Name of corresponding collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.Encoding">
            <summary>
            Encoding to use for text properties.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.Keys">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary`2.Keys"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.Values">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary`2.Values"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.Count">
            <summary>
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.IsReadOnly">
            <summary>
            <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Files.StringDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
        </member>
        <member name="M:Waher.Persistence.Files.StringDictionary.DeleteAndDispose">
            <summary>
            Deletes the dictionary and disposes the object.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Files.ValueCollection.CopyToAsync(System.Object[],System.Int32)">
            <summary>
            Copies the values of the dicitionary to an array.
            </summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Start index</param>
        </member>
    </members>
</doc>
