<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Persistence</name>
    </assembly>
    <members>
        <member name="T:Waher.Persistence.Attributes.ArchivingTimeAttribute">
            <summary>
            This attribute defines that objects of this type can be archived, and the time objects can be archived.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ArchivingTimeAttribute.#ctor">
            <summary>
            This attribute defines objects of this type can be archived, and that there is no time limit for how long
            objects of this type can be archived.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ArchivingTimeAttribute.#ctor(System.Int32)">
            <summary>
            This attribute defines that objects of this type can be archived, and that there is a time limit for how long
            objects of this type can be archived.
            </summary>
            <param name="Days">Number of days to archive objects of this type. (Default=<see cref="F:System.Int32.MaxValue"/>, meaning no limit defined.)</param>
        </member>
        <member name="M:Waher.Persistence.Attributes.ArchivingTimeAttribute.#ctor(System.String)">
            <summary>
            This attribute defines that objects of this type can be archived, and that there is a time limit for how long
            objects of this type can be archived.
            </summary>
            <param name="PropertyName">A property on the object with this name defines the number of days to archive the object. (Default=<see cref="F:System.Int32.MaxValue"/>, meaning no limit defined.)</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.ArchivingTimeAttribute.Days">
            <summary>
            Number of days to archive objects of this type. If equal to <see cref="F:System.Int32.MaxValue"/>, no limit is defined.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Attributes.ArchivingTimeAttribute.PropertyName">
            <summary>
            A property on the object with this name defines the number of days to archive the object. (Default=<see cref="F:System.Int32.MaxValue"/>, meaning no limit defined.)
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.ByReferenceAttribute">
            <summary>
            The contents of this field is persisted by reference only. The default behaviour is to persist object fields as embedded
            sub-objects. By adding the <see cref="T:Waher.Persistence.Attributes.ByReferenceAttribute"/> to a field or property declaration, you tell the persistence
            layer that persistence of the value is done separately, and that only a reference to the corresponding object is to be
            persisted.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ByReferenceAttribute.#ctor">
            <summary>
            The contents of this field is persisted by reference only. The default behaviour is to persist object fields as embedded
            sub-objects. By adding the <see cref="T:Waher.Persistence.Attributes.ByReferenceAttribute"/> to a field or property declaration, you tell the persistence
            layer that persistence of the value is done separately, and that only a reference to the corresponding object is to be
            persisted.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.CollectionNameAttribute">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.CollectionNameAttribute.#ctor(System.String)">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
            <param name="Name">Collection name.</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.CollectionNameAttribute.Name">
            <summary>
            Collection name.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueAttribute">
            <summary>
            This attribute informs the persistence layer about the default value of a member (field or property).
            Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            This attribute informs the persistence layer about the default value of a member (field or property).
            Default values are not persisted, which allows for more efficient storage.
            </summary>
            <param name="Value">Default value.</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.DefaultValueAttribute.Value">
            <summary>
            Default value of member.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueDateTimeMaxValueAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.DateTime.MaxValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueDateTimeMaxValueAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.DateTime.MaxValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueDateTimeMinValueAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.DateTime.MinValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueDateTimeMinValueAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.DateTime.MinValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueGuidEmptyAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.Guid.Empty"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueGuidEmptyAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.Guid.Empty"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueNullAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (null) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueNullAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (null) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueStringEmptyAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.String.Empty"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueStringEmptyAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.String.Empty"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueTimeSpanMaxValueAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.TimeSpan.MaxValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueTimeSpanMaxValueAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.TimeSpan.MaxValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.DefaultValueTimeSpanMinValueAttribute">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.TimeSpan.MinValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.DefaultValueTimeSpanMinValueAttribute.#ctor">
            <summary>
            This attribute informs the persistence layer about the default value (<see cref="F:System.TimeSpan.MinValue"/>) of a member 
            (field or property). Default values are not persisted, which allows for more efficient storage.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.IgnoreMemberAttribute">
            <summary>
            This attribute tells the persistence layer that the member (field or property) should be ignored.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.IgnoreMemberAttribute.#ctor">
            <summary>
            This attribute tells the persistence layer that the member (field or property) should be ignored.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.IndexAttribute">
            <summary>
            This attribute defines a compound index for the collection holding objects of the corresponding class.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.IndexAttribute.#ctor(System.String[])">
            <summary>
            This attribute defines a compound index for the collection holding objects of the corresponding class.
            </summary>
            <param name="FieldNames">Names of the fields to build the index on. Prefix field names with a hyphen (-)
            to illustrate descending order.</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.IndexAttribute.FieldNames">
            <summary>
            Names of the fields to build the index on. Prefix field names with a hyphen (-)
            to illustrate descending order.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.ObjectIdAttribute">
            <summary>
            This attribute defines the field as containing the Object ID of the object. When creating a new object, the value of the 
            Object ID field should be equal to null.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ObjectIdAttribute.#ctor">
            <summary>
            This attribute defines the field as containing the Object ID of the object. When creating a new object, the value of the 
            Object ID field should be equal to null.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.ObsoleteMethodAttribute">
            <summary>
            This attribute defines a method for obsolete properties and field values found in serializations of older versions of the class.
            The method should take one parameter, a <see cref="T:System.Collections.Generic.Dictionary`2"/>, that represents property or field values
            with no matching properties or fields in the object.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ObsoleteMethodAttribute.#ctor(System.String)">
            <summary>
            This attribute defines a method for obsolete properties and field values found in serializations of older versions of the class.
            </summary>
            <param name="MethodName">Name of method that will be called if deserializing objects with obsolete property or field values.
            The method should take one parameter, a <see cref="T:System.Collections.Generic.Dictionary`2"/>, that represents property or field values
            with no matching properties or fields in the object.
            </param>
        </member>
        <member name="P:Waher.Persistence.Attributes.ObsoleteMethodAttribute.MethodName">
            <summary>
            Name of method that will be called if deserializing objects with obsolete property or field values.
            The method should take one parameter, a <see cref="T:System.Collections.Generic.Dictionary`2"/>, that represents property or field values
            with no matching properties or fields in the object.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.ShortNameAttribute">
            <summary>
            This attribute defines a short name for a member (field or property). Short names are preferred for serialization.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.ShortNameAttribute.#ctor(System.String)">
            <summary>
            This attribute defines a short name for a member (field or property). Short names are preferred for serialization.
            </summary>
            <param name="Name">Short name.</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.ShortNameAttribute.Name">
            <summary>
            Short name.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.TypeNameSerialization">
            <summary>
            How the type name should be serialized.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Attributes.TypeNameSerialization.None">
            <summary>
            No type name field will be serialized.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Attributes.TypeNameSerialization.LocalName">
            <summary>
            Only the local name of the type will be serialized.
            </summary>
        </member>
        <member name="F:Waher.Persistence.Attributes.TypeNameSerialization.FullName">
            <summary>
            The full type name will be serialized.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Attributes.TypeNameAttribute">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.TypeNameAttribute.#ctor">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Attributes.TypeNameAttribute.#ctor(Waher.Persistence.Attributes.TypeNameSerialization)">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
            <param name="TypeNameSerialization">How the type name should be serialized.</param>
        </member>
        <member name="M:Waher.Persistence.Attributes.TypeNameAttribute.#ctor(Waher.Persistence.Attributes.TypeNameSerialization,System.String)">
            <summary>
            This attribute defines the name of the collection that will house objects of this type.
            </summary>
            <param name="TypeNameSerialization">How the type name should be serialized.</param>
            <param name="FieldName">Type field name.</param>
        </member>
        <member name="P:Waher.Persistence.Attributes.TypeNameAttribute.TypeNameSerialization">
            <summary>
            How the type name should be serialized.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Attributes.TypeNameAttribute.FieldName">
            <summary>
            Type field name.
            </summary>
        </member>
        <member name="T:Waher.Persistence.CaseInsensitiveString">
            <summary>
            Represents a case-insensitive string.
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.#ctor(System.String)">
            <summary>
            Represents a case-insensitive string.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="P:Waher.Persistence.CaseInsensitiveString.Value">
            <summary>
            String-representation of the case-insensitive string. (Representation is case sensitive.)
            </summary>
        </member>
        <member name="P:Waher.Persistence.CaseInsensitiveString.LowerCase">
            <summary>
            Lower-case representation of the case-insensitive string.
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            System.CaseInsensitiveString object, have the same value.
            </summary>
            <param name="obj">The string to compare to this instance.</param>
            <returns>
            true if obj is a System.CaseInsensitiveString and its value is the same as this instance; otherwise,
            false. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.CompareTo(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Compares this instance with a specified System.CaseInsensitiveString object and indicates whether
            this instance precedes, follows, or appears in the same position in the sort
            order as the specified string.
            </summary>
            <param name="other">The string to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows,
            or appears in the same position in the sort order as the strB parameter.Value
            Condition Less than zero This instance precedes strB. Zero This instance has
            the same position in the sort order as strB. Greater than zero This instance
            follows strB.-or- strB is null.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified System.CaseInsensitiveString object and indicates whether
            this instance precedes, follows, or appears in the same position in the sort
            order as the specified string.
            </summary>
            <param name="obj">The string to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows,
            or appears in the same position in the sort order as the strB parameter.Value
            Condition Less than zero This instance precedes strB. Zero This instance has
            the same position in the sort order as strB. Greater than zero This instance
            follows strB.-or- strB is null.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Implicit(Waher.Persistence.CaseInsensitiveString)~System.String">
            <summary>
            Implicitly cases a case-insensitive string to a case-sensitive string.
            </summary>
            <param name="S">Case-insensitive string</param>
            <returns>Case-sensitive string.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Implicit(System.String)~Waher.Persistence.CaseInsensitiveString">
            <summary>
            Implicitly cases a case-sensitive string to a case-insensitive string.
            </summary>
            <param name="S">Case-sensitive string</param>
            <returns>Case-insensitive string.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Equality(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Inequality(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Non-Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThan(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Lesser-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThan(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Greater-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThanOrEqual(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Lesser-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThanOrEqual(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Greater-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Equality(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Inequality(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Non-Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThan(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Lesser-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThan(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Greater-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThanOrEqual(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Lesser-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThanOrEqual(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Greater-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Equality(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Inequality(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Non-Equality operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThan(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Lesser-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThan(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Greater-than operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_LessThanOrEqual(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Lesser-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_GreaterThanOrEqual(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Greater-than-or-equal-to operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Addition(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Addition operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Addition(Waher.Persistence.CaseInsensitiveString,System.String)">
            <summary>
            Addition operator
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.op_Addition(System.String,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Addition operator
            </summary>
        </member>
        <member name="F:Waher.Persistence.CaseInsensitiveString.Empty">
            <summary>
            Empty case-insensitive string
            </summary>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/> class to the value indicated
            by an array of Unicode characters.
            </summary>
            <param name="value">An array of Unicode characters.</param>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.#ctor(System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/> class to the value indicated
            by a specified Unicode character repeated a specified number of times.
            </summary>
            <param name="c">A Unicode character.</param>
            <param name="count">The number of times c occurs.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/> class to the value indicated
            by an array of Unicode characters, a starting character position within that
            array, and a length.
            </summary>
            <param name="value">An array of Unicode characters.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of characters within value to use.</param>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex or length is less than zero.-or- The sum of startIndex and length
            is greater than the number of elements in value.
            </exception>
        </member>
        <member name="P:Waher.Persistence.CaseInsensitiveString.Item(System.Int32)">
            <summary>
            Gets the System.Char object at a specified position in the current <see cref="T:Waher.Persistence.CaseInsensitiveString"/>
            object.
            </summary>
            <param name="index">A position in the current string.</param>
            <returns>
            The object at position index.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            index is greater than or equal to the length of this object or less than zero.
            </exception>
        </member>
        <member name="P:Waher.Persistence.CaseInsensitiveString.Length">
            <summary>
            Gets the number of characters in the current <see cref="T:Waher.Persistence.CaseInsensitiveString"/> object.
            </summary>
            <returns>
            The number of characters in the current string.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Compare(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Compares two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects and returns an integer that indicates
            their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two
            comparands.Value Condition Less than zero strA precedes strB in the sort order.
            Zero strA occurs in the same position as strB in the sort order. Greater than
            zero strA follows strB in the sort order.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Compare(Waher.Persistence.CaseInsensitiveString,System.Int32,Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Compares substrings of two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects using the specified
            rules, and returns an integer that indicates their relative position in the sort
            order.
            </summary>
            <param name="strA">The first string to use in the comparison.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to use in the comparison.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two
            comparands.Value Condition Less than zero The substring in strA precedes the
            substring in strB in the sort order.Zero The substrings occur in the same position
            in the sort order, or the length parameter is zero. Greater than zero The substring
            in strA follllows the substring in strB in the sort order.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            indexA is greater than strA.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- indexB is greater than
            strB.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- indexA, indexB, or length is negative. -or-Either
            indexA or indexB is null, and length is greater than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a StringComparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Compare(Waher.Persistence.CaseInsensitiveString,System.Int32,Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32)">
            <summary>
            Compares substrings of two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects and returns an integer
            that indicates their relative position in the sort order.
            </summary>
            <param name="strA">
            The first string to use in the comparison.
            </param>
            <param name="indexA">
            The position of the substring within strA.
            </param>
            <param name="strB">
            The second string to use in the comparison.
            </param>
            <param name="indexB">
            The position of the substring within strB.
            </param>
            <param name="length">
            The maximum number of characters in the substrings to compare.
            </param>
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value
            Condition Less than zero The substring in strA precedes the substring in strB
            in the sort order. Zero The substrings occur in the same position in the sort
            order, or length is zero. Greater than zero The substring in strA follows the
            substring in strB in the sort order.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            indexA is greater than strA.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- indexB is greater than
            strB.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- indexA, indexB, or length is negative. -or-Either
            indexA or indexB is null, and length is greater than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Compare(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Compares two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects using the specified rules, and returns
            an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">
            The first string to compare.
            </param>
            <param name="strB">
            The second string to compare.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules to use in the comparison.
            </param>
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two
            comparands.Value Condition Less than zero strA precedes strB in the sort order.
            Zero strA is in the same position as strB in the sort order. Greater than zero
            strA follows strB in the sort order.
            </returns>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison is not supported.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.CompareOrdinal(Waher.Persistence.CaseInsensitiveString,System.Int32,Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32)">
            <summary>
            Compares substrings of two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects by evaluating the
            numeric values of the corresponding System.Char objects in each substring.
            </summary>
            <param name="strA">
            The first string to use in the comparison.
            </param>
            <param name="indexA">
            The starting index of the substring in strA.
            </param>
            <param name="strB">
            The second string to use in the comparison.
            </param>
            <param name="indexB">
            The starting index of the substring in strB.
            </param>
            <param name="length">
            The maximum number of characters in the substrings to compare.
            </param>
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two
            comparands.ValueCondition Less than zero The substring in strA is less than the
            substring in strB. Zero The substrings are equal, or length is zero. Greater
            than zero The substring in strA is greater than the substring in strB.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            strA is not null and indexA is greater than strA.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- strB
            is not null andindexB is greater than strB.<see cref="T:Waher.Persistence.CaseInsensitiveString"/>.Length.-or- indexA,
            indexB, or length is negative.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.CompareOrdinal(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Compares two specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> objects by evaluating the numeric values
            of the corresponding System.Char objects in each string.
            </summary>
            <param name="strA">
            The first string to compare.
            </param>
            <param name="strB">
            The second string to compare.
            </param>
            <returns>
            An integer that indicates the lexical relationship between the two comparands.ValueCondition
            Less than zero strA is less than strB. Zero strA and strB are equal. Greater
            than zero strA is greater than strB.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of an System.Collections.Generic.IEnumerable`1 implementation.
            </summary>
            <param name="values">
            A collection object that implements the System.Collections.Generic.IEnumerable`1
            interface.
            </param>
            <typeparam name="T">
            The type of the members of values.
            </typeparam>
            <returns>
            The concatenated members in values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(Waher.Persistence.CaseInsensitiveString[])">
            <summary>
            Concatenates the elements of a specified <see cref="T:Waher.Persistence.CaseInsensitiveString"/> array.
            </summary>
            <param name="values">
            An array of string instances.
            </param>
            <returns>
            The concatenated elements of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            Out of memory.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Concatenates two specified instances of <see cref="T:Waher.Persistence.CaseInsensitiveString"/>.
            </summary>
            <param name="str0">
            The first string to concatenate.
            </param>
            <param name="str1">
            The second string to concatenate.
            </param>
            <returns>
            The concatenation of str0 and str1.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Concatenates four specified instances of <see cref="T:Waher.Persistence.CaseInsensitiveString"/>.
            </summary>
            <param name="str0">
            The first string to concatenate.
            </param>
            <param name="str1">
            The second string to concatenate.
            </param>
            <param name="str2">
            The third string to concatenate.
            </param>
            <param name="str3">
            The fourth string to concatenate.
            </param>
            <returns>
            The concatenation of str0, str1, str2, and str3.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(System.Object,System.Object,System.Object)">
            <summary>
            Concatenates the string representations of three specified objects.
            </summary>
            <param name="arg0">
            The first object to concatenate.
            </param>
            <param name="arg1">
            The second object to concatenate.
            </param>
            <param name="arg2">
            The third object to concatenate.
            </param>
            <returns>
            The concatenated string representations of the values of arg0, arg1, and arg2.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(System.Object,System.Object)">
            <summary>
            Concatenates the string representations of two specified objects.
            </summary>
            <param name="arg0">
            The first object to concatenate.
            </param>
            <param name="arg1">
            The second object to concatenate.
            </param>
            <returns>
            The concatenated string representations of the values of arg0 and arg1.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(System.Object)">
            <summary>
            Creates the string representation of a specified object.
            </summary>
            <param name="arg0">
            The object to represent, or null.
            </param>
            <returns>
            The string representation of the value of arg0, or <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> if arg0
            is null.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(System.Collections.Generic.IEnumerable{Waher.Persistence.CaseInsensitiveString})">
            <summary>
            Concatenates the members of a constructed System.Collections.Generic.IEnumerable`1
            collection of type <see cref="T:Waher.Persistence.CaseInsensitiveString"/>.
            </summary>
            <param name="values">
            A collection object that implements System.Collections.Generic.IEnumerable`1
            and whose generic type argument is <see cref="T:Waher.Persistence.CaseInsensitiveString"/>.
            </param>
            <returns>
            The concatenated strings in values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(System.Object[])">
            <summary>
            Concatenates the string representations of the elements in a specified System.Object
            array.
            </summary>
            <param name="args">
            An object array that contains the elements to concatenate.
            </param>
            <returns>
            The concatenated string representations of the values of the elements in args.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            args is null.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            Out of memory.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Concat(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Concatenates three specified instances of <see cref="T:Waher.Persistence.CaseInsensitiveString"/>.
            </summary>
            <param name="str0">
            The first string to concatenate.
            </param>
            <param name="str1">
            The second string to concatenate.
            </param>
            <param name="str2">
            The third string to concatenate.
            </param>
            <returns>
            The concatenation of str0, str1, and str2.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Equals(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Determines whether two specified System.CaseInsensitiveString objects have the same value. A
            parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">
            The first string to compare, or null.
            </param>
            <param name="b">
            The second string to compare, or null.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the comparison.
            </param>
            <returns>
            true if the value of the a parameter is equal to the value of the b parameter;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Equals(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Determines whether two specified System.CaseInsensitiveString objects have the same value.
            </summary>
            <param name="a">
            The first string to compare, or null.
            </param>
            <param name="b">
            The second string to compare, or null.
            </param>
            <returns>
            true if the value of a is the same as the value of b; otherwise, false. If both
            a and b are null, the method returns true.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(Waher.Persistence.CaseInsensitiveString,System.Object)">
            <summary>
            Replaces one or more format items in a specified string with the string representation
            of a specified object.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The object to format.
            </param>
            <returns>
            A copy of format in which any format items are replaced by the string representation
            of arg0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format is null.
            </exception>
            <exception cref="T:System.FormatException">
            The format item in format is invalid.-or- The index of a format item is not zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(System.IFormatProvider,Waher.Persistence.CaseInsensitiveString,System.Object[])">
            <summary>
            Replaces the format items in a specified string with the string representations
            of corresponding objects in a specified array. A parameter supplies culture-specific
            formatting information.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An object array that contains zero or more objects to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the string representation
            of the corresponding objects in args.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format or args is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than or equal to the length of the args array.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(System.IFormatProvider,Waher.Persistence.CaseInsensitiveString,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation
            of three specified objects. An parameter supplies culture-specific formatting
            information.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The first object to format.
            </param>
            <param name="arg1">
            The second object to format.
            </param>
            <param name="arg2">
            The third object to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the string representations
            of arg0, arg1, and arg2.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format, arg0, arg1, or arg2 is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than or equal to three.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(Waher.Persistence.CaseInsensitiveString,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation
            of two specified objects.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The first object to format.
            </param>
            <param name="arg1">
            The second object to format.
            </param>
            <returns>
            A copy of format in which format items are replaced by the string representations
            of arg0 and arg1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is not zero or one.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(System.IFormatProvider,Waher.Persistence.CaseInsensitiveString,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation
            of two specified objects. A parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The first object to format.
            </param>
            <param name="arg1">
            The second object to format.
            </param>
            <returns>
            A copy of format in which format items are replaced by the string representations
            of arg0 and arg1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format, arg0, or arg1 is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than or equal to two.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(System.IFormatProvider,Waher.Persistence.CaseInsensitiveString,System.Object)">
            <summary>
            Replaces the format item or items in a specified string with the string representation
            of the corresponding object. A parameter supplies culture-specific formatting
            information.
            </summary>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The object to format.
            </param>
            <returns>
            A copy of format in which the format item or items have been replaced by the
            string representation of arg0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format or arg0 is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than or equal to one.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(Waher.Persistence.CaseInsensitiveString,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation
            of a corresponding object in a specified array.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="args">
            An object array that contains zero or more objects to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the string representation
            of the corresponding objects in args.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format or args is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than or equal to the length of the args array.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Format(Waher.Persistence.CaseInsensitiveString,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation
            of three specified objects.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="arg0">
            The first object to format.
            </param>
            <param name="arg1">
            The second object to format.
            </param>
            <param name="arg2">
            The third object to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the string representations
            of arg0, arg1, and arg2.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            format is null.
            </exception>
            <exception cref="T:System.FormatException">
            format is invalid.-or- The index of a format item is less than zero, or greater
            than two.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IsNullOrEmpty(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Indicates whether the specified string is null or an <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> string.
            </summary>
            <param name="value">
            The string to test.
            </param>
            <returns>
            true if the value parameter is null or an empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IsNullOrWhiteSpace(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space
            characters.
            </summary>
            <param name="value">
            The string to test.
            </param>
            <returns>
            true if the value parameter is null or <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, or if value consists
            exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Join(Waher.Persistence.CaseInsensitiveString,System.Object[])">
            <summary>
            Concatenates the elements of an object array, using the specified separator between
            each element.
            </summary>
            <param name="separator">
            The string to use as a separator. separator is included in the returned string
            only if values has more than one element.
            </param>
            <param name="values">
            An array that contains the elements to concatenate.
            </param>
            <returns>
            A string that consists of the elements of values delimited by the separator string.
            If values is an empty array, the method returns <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Join(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString[])">
            <summary>
            Concatenates all the elements of a string array, using the specified separator
            between each element.
            </summary>
            <param name="separator">
            The string to use as a separator. separator is included in the returned string
            only if value has more than one element.
            </param>
            <param name="value">
            An array that contains the elements to concatenate.
            </param>
            <returns>
            A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Join``1(Waher.Persistence.CaseInsensitiveString,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using the specified separator between
            each member.
            </summary>
            <param name="separator">
            The string to use as a separator. separator is included in the returned string
            only if values has more than one element.
            </param>
            <param name="values">
            A collection that contains the objects to concatenate.
            </param>
            <typeparam name="T">
            The type of the members of values.
            </typeparam>
            <returns>
            A string that consists of the members of values delimited by the separator string.
            If values has no members, the method returns <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Join(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator
            between each element.
            </summary>
            <param name="separator">
            The string to use as a separator. separator is included in the returned string
            only if value has more than one element.
            </param>
            <param name="value">
            An array that contains the elements to concatenate.
            </param>
            <param name="startIndex">
            The first element in value to use.
            </param>
            <param name="count">
            The number of elements of value to use.
            </param>
            <returns>
            A string that consists of the strings in value delimited by the separator string.
            -or-<see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> if count is zero, value has no elements, or separator
            and all the elements of value are <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex or count is less than 0.-or- startIndex plus count is greater than
            the number of elements in value.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            Out of memory.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Join(Waher.Persistence.CaseInsensitiveString,System.Collections.Generic.IEnumerable{Waher.Persistence.CaseInsensitiveString})">
            <summary>
            Concatenates the members of a constructed System.Collections.Generic.IEnumerable`1
            collection of type <see cref="T:Waher.Persistence.CaseInsensitiveString"/>, using the specified separator between each
            member.
            </summary>
            <param name="separator">
            The string to use as a separator. separator is included in the returned string
            only if values has more than one element.
            </param>
            <param name="values">
            A collection that contains the strings to concatenate.
            </param>
            <returns>
            A string that consists of the members of values delimited by the separator string.
            If values has no members, the method returns <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            values is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Contains(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <returns>
            true if the value parameter occurs within this string, or if value is the empty
            string (""); otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a specified number of characters from a specified position in this instance
            to a specified position in an array of Unicode characters.
            </summary>
            <param name="sourceIndex">
            The index of the first character in this instance to copy.
            </param>
            <param name="destination">
            An array of Unicode characters to which characters in this instance are copied.
            </param>
            <param name="destinationIndex">
            The index in destination at which the copy operation begins.
            </param>
            <param name="count">
            The number of characters in this instance to copy to destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            destination is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            sourceIndex, destinationIndex, or count is negative -or- sourceIndex does not
            identify a position in the current instance. -or-destinationIndex does not identify
            a valid index in the destination array. -or-count is greater than the length
            of the substring from startIndex to the end of this instance -or- count is greater
            than the length of the subarray from destinationIndex to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.EndsWith(Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Determines whether the end of this string instance matches the specified string
            when compared using the specified comparison option.
            </summary>
            <param name="value">
            The string to compare to the substring at the end of this instance.
            </param>
            <param name="comparisonType">
            One of the enumeration values that determines how this string and value are compared.
            </param>
            <returns>
            true if the value parameter matches the end of this string; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.EndsWith(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Determines whether the end of this string instance matches the specified string.
            </summary>
            <param name="value">
            The string to compare to the substring at the end of this instance.
            </param>
            <returns>
            true if value matches the end of this instance; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Equals(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Determines whether this instance and another specified System.CaseInsensitiveString object have
            the same value.
            </summary>
            <param name="value">
            The string to compare to this instance.
            </param>
            <returns>
            true if the value of the value parameter is the same as the value of this instance;
            otherwise, false. If value is null, the method returns false.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Equals(Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Determines whether this string and a specified System.CaseInsensitiveString object have the
            same value. A parameter specifies the culture, case, and sort rules used in the
            comparison.
            </summary>
            <param name="value">
            The string to compare to this instance.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies how the strings will be compared.
            </param>
            <returns>
            true if the value of the value parameter is the same as this string; otherwise,
            false.
            </returns>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in the current System.CaseInsensitiveString object. A parameter specifies the type of search
            to use for the specified string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The index position of the value parameter if that string is found, or -1 if it
            is not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in the current System.CaseInsensitiveString object. Parameters specify the starting search position
            in the current string, the number of characters in the current string to search,
            and the type of search to use for the specified string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The zero-based index position of the value parameter if that string is found,
            or -1 if it is not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is startIndex.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count or startIndex is negative.-or- startIndex is greater than the length of
            this instance.-or-count is greater than the length of this string minus startIndex.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in this instance. The search starts at a specified character position and examines
            a specified number of character positions.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The zero-based index position of value if that string is found, or -1 if it is
            not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is startIndex.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count or startIndex is negative.-or- startIndex is greater than the length of
            this string.-or-count is greater than the length of this string minus startIndex.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in this instance. The search starts at a specified character position.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <returns>
            The zero-based index position of value if that string is found, or -1 if it is
            not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is startIndex.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than 0 (zero) or greater than the length of this string.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in this instance.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <returns>
            The zero-based index position of value if that string is found, or -1 if it is
            not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character
            in this instance. The search starts at a specified character position and examines
            a specified number of character positions.
            </summary>
            <param name="value">
            A Unicode character to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count or startIndex is negative.-or- startIndex is greater than the length of
            this string.-or-count is greater than the length of this string minus startIndex.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode
            character in this string. The search starts at a specified character position.
            </summary>
            <param name="value">
            A Unicode character to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than 0 (zero) or greater than the length of the string.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string
            in the current System.CaseInsensitiveString object. Parameters specify the starting search position
            in the current string and the type of search to use for the specified string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The zero-based index position of the value parameter if that string is found,
            or -1 if it is not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is startIndex.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than 0 (zero) or greater than the length of this string.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode
            character in this string.
            </summary>
            <param name="value">
            A Unicode character to seek.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any
            character in a specified array of Unicode characters. The search starts at a
            specified character position and examines a specified number of character positions.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The zero-based index position of the first occurrence in this instance where
            any character in anyOf was found; -1 if no character in anyOf was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count or startIndex is negative.-or- count + startIndex is greater than the number
            of characters in this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any
            character in a specified array of Unicode characters. The search starts at a
            specified character position.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <param name="startIndex">
            The search starting position.
            </param>
            <returns>
            The zero-based index position of the first occurrence in this instance where
            any character in anyOf was found; -1 if no character in anyOf was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is negative.-or- startIndex is greater than the number of characters
            in this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any
            character in a specified array of Unicode characters.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <returns>
            The zero-based index position of the first occurrence in this instance where
            any character in anyOf was found; -1 if no character in anyOf was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(Waher.Persistence.CaseInsensitiveString[],System.Int32,System.Int32)">
            <summary>
            Checks for the first occurrence of the case-insensitive strings in <paramref name="anyOf"/>.
            </summary>
            <param name="anyOf">Case-insensitive strings to search for.</param>
            <param name="startIndex">Index where search starts.</param>
            <param name="count">Number of characters to search.</param>
            <returns>First occurrence found.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(Waher.Persistence.CaseInsensitiveString[],System.Int32)">
            <summary>
            Checks for the first occurrence of the case-insensitive strings in <paramref name="anyOf"/>.
            </summary>
            <param name="anyOf">Case-insensitive strings to search for.</param>
            <param name="startIndex">Index where search starts.</param>
            <returns>First occurrence found.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.IndexOfAny(Waher.Persistence.CaseInsensitiveString[])">
            <summary>
            Checks for the first occurrence of the case-insensitive strings in <paramref name="anyOf"/>.
            </summary>
            <param name="anyOf">Case-insensitive strings to search for.</param>
            <returns>First occurrence found.</returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Insert(System.Int32,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Returns a new string in which a specified string is inserted at a specified index
            position in this instance.
            </summary>
            <param name="startIndex">
            The zero-based index position of the insertion.
            </param>
            <param name="value">
            The string to insert.
            </param>
            <returns>
            A new string that is equivalent to this instance, but with value inserted at
            position startIndex.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is negative or greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode
            character within this instance.
            </summary>
            <param name="value">
            The Unicode character to seek.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode
            character within this instance. The search starts at a specified character position
            and proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">
            The Unicode character to seek.
            </param>
            <param name="startIndex">
            The starting position of the search. The search proceeds from startIndex toward
            the beginning of this instance.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less
            than zero or greater than or equal to the length of this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of the specified
            Unicode character in a substring within this instance. The search starts at a
            specified character position and proceeds backward toward the beginning of the
            string for a specified number of character positions.
            </summary>
            <param name="value">
            The Unicode character to seek.
            </param>
            <param name="startIndex">
            The starting position of the search. The search proceeds from startIndex toward
            the beginning of this instance.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The zero-based index position of value if that character is found, or -1 if it
            is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less
            than zero or greater than or equal to the length of this instance.-or-The current
            instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex - count + 1 is less
            than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string
            within this instance.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <returns>
            The zero-based starting index position of value if that string is found, or -1
            if it is not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is the last index
            position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string
            within this instance. The search starts at a specified character position and
            proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <returns>
            The zero-based starting index position of value if that string is found, or -1
            if it is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>. If
            value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is the smaller of startIndex and
            the last index position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less
            than zero or greater than the length of the current instance. -or-The current
            instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less than -1 or greater
            than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string
            within this instance. The search starts at a specified character position and
            proceeds backward toward the beginning of the string for a specified number of
            character positions.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The zero-based starting index position of value if that string is found, or -1
            if it is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>. If
            value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is the smaller of startIndex and
            the last index position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is negative.-or-The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>,
            and startIndex is negative.-or- The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>,
            and startIndex is greater than the length of this instance.-or-The current instance
            does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex - count + 1 specifies a position
            that is not within this instance. -or-The current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>
            and start is less than -1 or greater than zero. -or-The current instance equals
            <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> and count is greater than 1.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string
            within this instance. The search starts at a specified character position and
            proceeds backward toward the beginning of the string for the specified number
            of character positions. A parameter specifies the type of comparison to perform
            when searching for the specified string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The zero-based starting index position of the value parameter if that string
            is found, or -1 if it is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is the smaller of startIndex
            and the last index position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is negative.-or-The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>,
            and startIndex is negative.-or- The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>,
            and startIndex is greater than the length of this instance.-or-The current instance
            does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex + 1 - count specifies a position
            that is not within this instance. -or-The current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>
            and start is less than -1 or greater than zero. -or-The current instance equals
            <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> and count is greater than 1.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of a specified string within
            the current System.CaseInsensitiveString object. The search starts at a specified character
            position and proceeds backward toward the beginning of the string. A parameter
            specifies the type of comparison to perform when searching for the specified
            string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The zero-based starting index position of the value parameter if that string
            is found, or -1 if it is not found or if the current instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value is the smaller of startIndex
            and the last index position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less
            than zero or greater than the length of the current instance. -or-The current
            instance equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex is less than -1 or greater
            than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOf(Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Reports the zero-based index of the last occurrence of a specified string within
            the current System.CaseInsensitiveString object. A parameter specifies the type of search to
            use for the specified string.
            </summary>
            <param name="value">
            The string to seek.
            </param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the search.
            </param>
            <returns>
            The zero-based starting index position of the value parameter if that string
            is found, or -1 if it is not. If value is <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, the return value
            is the last index position in this instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a valid <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance
            of one or more characters specified in a Unicode array.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <returns>
            The index position of the last occurrence in this instance where any character
            in anyOf was found; -1 if no character in anyOf was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance
            of one or more characters specified in a Unicode array. The search starts at
            a specified character position and proceeds backward toward the beginning of
            the string.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <returns>
            The index position of the last occurrence in this instance where any character
            in anyOf was found; -1 if no character in anyOf was found or if the current instance
            equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and startIndex specifies
            a position that is not within this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance
            of one or more characters specified in a Unicode array. The search starts at
            a specified character position and proceeds backward toward the beginning of
            the string for a specified number of character positions.
            </summary>
            <param name="anyOf">
            A Unicode character array containing one or more characters to seek.
            </param>
            <param name="startIndex">
            The search starting position. The search proceeds from startIndex toward the
            beginning of this instance.
            </param>
            <param name="count">
            The number of character positions to examine.
            </param>
            <returns>
            The index position of the last occurrence in this instance where any character
            in anyOf was found; -1 if no character in anyOf was found or if the current instance
            equals <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            anyOf is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and count or startIndex
            is negative.-or- The current instance does not equal <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/>, and
            startIndex minus count + 1 is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.PadLeft(System.Int32)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding
            them with spaces on the left, for a specified total length.
            </summary>
            <param name="totalWidth">
            The number of characters in the resulting string, equal to the number of original
            characters plus any additional padding characters.
            </param>
            <returns>
            A new string that is equivalent to this instance, but right-aligned and padded
            on the left with as many spaces as needed to create a length of totalWidth. However,
            if totalWidth is less than the length of this instance, the method returns a
            reference to the existing instance. If totalWidth is equal to the length of this
            instance, the method returns a new string that is identical to this instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            totalWidth is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.PadLeft(System.Int32,System.Char)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding
            them on the left with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">
            The number of characters in the resulting string, equal to the number of original
            characters plus any additional padding characters.
            </param>
            <param name="paddingChar">
            A Unicode padding character.
            </param>
            <returns>
            A new string that is equivalent to this instance, but right-aligned and padded
            on the left with as many paddingChar characters as needed to create a length
            of totalWidth. However, if totalWidth is less than the length of this instance,
            the method returns a reference to the existing instance. If totalWidth is equal
            to the length of this instance, the method returns a new string that is identical
            to this instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            totalWidth is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.PadRight(System.Int32)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding
            them with spaces on the right, for a specified total length.
            </summary>
            <param name="totalWidth">
            The number of characters in the resulting string, equal to the number of original
            characters plus any additional padding characters.
            </param>
            <returns>
            A new string that is equivalent to this instance, but left-aligned and padded
            on the right with as many spaces as needed to create a length of totalWidth.
            However, if totalWidth is less than the length of this instance, the method returns
            a reference to the existing instance. If totalWidth is equal to the length of
            this instance, the method returns a new string that is identical to this instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            totalWidth is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.PadRight(System.Int32,System.Char)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding
            them on the right with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">
            The number of characters in the resulting string, equal to the number of original
            characters plus any additional padding characters.
            </param>
            <param name="paddingChar">
            A Unicode padding character.
            </param>
            <returns>
            A new string that is equivalent to this instance, but left-aligned and padded
            on the right with as many paddingChar characters as needed to create a length
            of totalWidth. However, if totalWidth is less than the length of this instance,
            the method returns a reference to the existing instance. If totalWidth is equal
            to the length of this instance, the method returns a new string that is identical
            to this instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            totalWidth is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Remove(System.Int32)">
            <summary>
            Returns a new string in which all the characters in the current instance, beginning
            at a specified position and continuing through the last position, have been deleted.
            </summary>
            <param name="startIndex">
            The zero-based position to begin deleting characters.
            </param>
            <returns>
            A new string that is equivalent to this string except for the removed characters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero.-or- startIndex specifies a position that is not
            within this string.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Remove(System.Int32,System.Int32)">
            <summary>
            Returns a new string in which a specified number of characters in the current
            instance beginning at a specified position have been deleted.
            </summary>
            <param name="startIndex">
            The zero-based position to begin deleting characters.
            </param>
            <param name="count">
            The number of characters to delete.
            </param>
            <returns>
            A new string that is equivalent to this instance except for the removed characters.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either startIndex or count is less than zero.-or- startIndex plus count specify
            a position outside this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Replace(Waher.Persistence.CaseInsensitiveString,Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current
            instance are replaced with another specified string.
            </summary>
            <param name="oldValue">
            The string to be replaced.
            </param>
            <param name="newValue">
            The string to replace all occurrences of oldValue.
            </param>
            <returns>
            A string that is equivalent to the current string except that all instances of
            oldValue are replaced with newValue. If oldValue is not found in the current
            instance, the method returns the current instance unchanged.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            oldValue is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            oldValue is the empty string ("").
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Replace(System.Char,System.Char)">
            <summary>
            Returns a new string in which all occurrences of a specified Unicode character
            in this instance are replaced with another specified Unicode character.
            </summary>
            <param name="oldChar">
            The Unicode character to be replaced.
            </param>
            <param name="newChar">
            The Unicode character to replace all occurrences of oldChar.
            </param>
            <returns>
            A string that is equivalent to this instance except that all instances of oldChar
            are replaced with newChar. If oldChar is not found in the current instance, the
            method returns the current instance unchanged.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(System.Char[])">
            <summary>
            Returns a string array that contains the substrings in this instance that are
            delimited by elements of a specified Unicode character array.
            </summary>
            <param name="separator">
            An array of Unicode characters that delimit the substrings in this instance,
            an empty array that contains no delimiters, or null.
            </param>
            <returns>
            An array whose elements contain the substrings in this instance that are delimited
            by one or more characters in separator. For more information, see the Remarks
            section.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(System.Char[],System.Int32)">
            <summary>
            Returns a string array that contains the substrings in this instance that are
            delimited by elements of a specified Unicode character array. A parameter specifies
            the maximum number of substrings to return.
            </summary>
            <param name="separator">
            An array of Unicode characters that delimit the substrings in this instance,
            an empty array that contains no delimiters, or null.
            </param>
            <param name="count">
            The maximum number of substrings to return.
            </param>
            <returns>
            An array whose elements contain the substrings in this instance that are delimited
            by one or more characters in separator. For more information, see the Remarks
            section.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is negative.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited
            by elements of a specified Unicode character array. Parameters specify the maximum
            number of substrings to return and whether to return empty array elements.
            </summary>
            <param name="separator">
            An array of Unicode characters that delimit the substrings in this string, an
            empty array that contains no delimiters, or null.
            </param>
            <param name="count">
            The maximum number of substrings to return.
            </param>
            <param name="options">
            <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.RemoveEmptyEntries to omit empty array elements from
            the array returned; or <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.None to include empty array
            elements in the array returned.
            </param>
            <returns>
            An array whose elements contain the substrings in this string that are delimited
            by one or more characters in separator. For more information, see the Remarks
            section.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            options is not one of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions values.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(System.Char[],System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited
            by elements of a specified Unicode character array. A parameter specifies whether
            to return empty array elements.
            </summary>
            <param name="separator">
            An array of Unicode characters that delimit the substrings in this string, an
            empty array that contains no delimiters, or null.
            </param>
            <param name="options">
            <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.RemoveEmptyEntries to omit empty array elements from
            the array returned; or <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.None to include empty array
            elements in the array returned.
            </param>
            <returns>
            An array whose elements contain the substrings in this string that are delimited
            by one or more characters in separator. For more information, see the Remarks
            section.
            </returns>
            <exception cref="T:System.ArgumentException">
            options is not one of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions values.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(Waher.Persistence.CaseInsensitiveString[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited
            by elements of a specified string array. Parameters specify the maximum number
            of substrings to return and whether to return empty array elements.
            </summary>
            <param name="separator">
            A string array that delimits the substrings in this string, an empty array that
            contains no delimiters, or null.
            </param>
            <param name="count">
            The maximum number of substrings to return.
            </param>
            <param name="options">
            <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.RemoveEmptyEntries to omit empty array elements from
            the array returned; or <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.None to include empty array
            elements in the array returned.
            </param>
            <returns>
            An array whose elements contain the substrings in this string that are delimited
            by one or more strings in separator. For more information, see the Remarks section.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is negative.
            </exception>
            <exception cref="T:System.ArgumentException">
            options is not one of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions values.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Split(Waher.Persistence.CaseInsensitiveString[],System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited
            by elements of a specified string array. A parameter specifies whether to return
            empty array elements.
            </summary>
            <param name="separator">
            A string array that delimits the substrings in this string, an empty array that
            contains no delimiters, or null.
            </param>
            <param name="options">
            <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.RemoveEmptyEntries to omit empty array elements from
            the array returned; or <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions.None to include empty array
            elements in the array returned.
            </param>
            <returns>
            An array whose elements contain the substrings in this string that are delimited
            by one or more strings in separator. For more information, see the Remarks section.
            </returns>
            <exception cref="T:System.ArgumentException">
            options is not one of the <see cref="T:Waher.Persistence.CaseInsensitiveString"/>SplitOptions values.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.StartsWith(Waher.Persistence.CaseInsensitiveString)">
            <summary>
            Determines whether the beginning of this string instance matches the specified
            string.
            </summary>
            <param name="value">
            The string to compare.
            </param>
            <returns>
            true if value matches the beginning of this string; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.StartsWith(Waher.Persistence.CaseInsensitiveString,System.StringComparison)">
            <summary>
            Determines whether the beginning of this string instance matches the specified
            string when compared using the specified comparison option.
            </summary>
            <param name="value">
            The string to compare.
            </param>
            <param name="comparisonType">
            One of the enumeration values that determines how this string and value are compared.
            </param>
            <returns>
            true if this instance begins with value; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            comparisonType is not a <see cref="T:Waher.Persistence.CaseInsensitiveString"/>Comparison value.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and has a specified length.
            </summary>
            <param name="startIndex">
            The zero-based starting character position of a substring in this instance.
            </param>
            <param name="length">
            The number of characters in the substring.
            </param>
            <returns>
            A string that is equivalent to the substring of length length that begins at
            startIndex in this instance, or <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> if startIndex is equal to
            the length of this instance and length is zero.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex plus length indicates a position not within this instance.-or- startIndex
            or length is less than zero.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
            character position and continues to the end of the string.
            </summary>
            <param name="startIndex">
            The zero-based starting character position of a substring in this instance.
            </param>
            <returns>
            A string that is equivalent to the substring that begins at startIndex in this
            instance, or <see cref="F:Waher.Persistence.CaseInsensitiveString.Empty"/> if startIndex is equal to the length of this
            instance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.ToCharArray(System.Int32,System.Int32)">
            <summary>
            Copies the characters in a specified substring in this instance to a Unicode
            character array.
            </summary>
            <param name="startIndex">
            The starting position of a substring in this instance.
            </param>
            <param name="length">
            The length of the substring in this instance.
            </param>
            <returns>
            A Unicode character array whose elements are the length number of characters
            in this instance starting from character position startIndex.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex or length is less than zero.-or- startIndex plus length is greater
            than the length of this instance.
            </exception>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.ToCharArray">
            <summary>
            Copies the characters in this instance to a Unicode character array.
            </summary>
            <returns>
            A Unicode character array whose elements are the individual characters of this
            instance. If this instance is an empty string, the returned array is empty and
            has a zero length.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Trim">
            <summary>
            Removes all leading and trailing white-space characters from the current <see cref="T:Waher.Persistence.CaseInsensitiveString"/>
            object.
            </summary>
            <returns>
            The string that remains after all white-space characters are removed from the
            start and end of the current string. If no characters can be trimmed from the
            current instance, the method returns the current instance unchanged.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.Trim(System.Char[])">
            <summary>
            Removes all leading and trailing occurrences of a set of characters specified
            in an array from the current System.CaseInsensitiveString object.
            </summary>
            <param name="trimChars">
            An array of Unicode characters to remove, or null.
            </param>
            <returns>
            The string that remains after all occurrences of the characters in the trimChars
            parameter are removed from the start and end of the current string. If trimChars
            is null or an empty array, white-space characters are removed instead. If no
            characters can be trimmed from the current instance, the method returns the current
            instance unchanged.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.TrimEnd(System.Char[])">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array
            from the current System.CaseInsensitiveString object.
            </summary>
            <param name="trimChars">
            An array of Unicode characters to remove, or null.
            </param>
            <returns>
            The string that remains after all occurrences of the characters in the trimChars
            parameter are removed from the end of the current string. If trimChars is null
            or an empty array, Unicode white-space characters are removed instead. If no
            characters can be trimmed from the current instance, the method returns the current
            instance unchanged.
            </returns>
        </member>
        <member name="M:Waher.Persistence.CaseInsensitiveString.TrimStart(System.Char[])">
            <summary>
            Removes all leading occurrences of a set of characters specified in an array
            from the current System.CaseInsensitiveString object.
            </summary>
            <param name="trimChars">
            An array of Unicode characters to remove, or null.
            </param>
            <returns>
            The string that remains after all occurrences of characters in the trimChars
            parameter are removed from the start of the current string. If trimChars is null
            or an empty array, white-space characters are removed instead.
            </returns>
        </member>
        <member name="T:Waher.Persistence.CollectionEventHandler">
            <summary>
            Event handler for collection events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Waher.Persistence.CollectionEventArgs">
            <summary>
            Event arguments for database object events.
            </summary>
        </member>
        <member name="M:Waher.Persistence.CollectionEventArgs.#ctor(System.String)">
            <summary>
            Event handler for collection events.
            </summary>
            <param name="Collection">Collection</param>
        </member>
        <member name="P:Waher.Persistence.CollectionEventArgs.Collection">
            <summary>
            Collection
            </summary>
        </member>
        <member name="T:Waher.Persistence.Database">
            <summary>
            Static interface for database persistence. In order to work, a database provider has to be assigned to it. This is
            ideally done as one of the first steps in the startup of an application.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Register(Waher.Persistence.IDatabaseProvider)">
            <summary>
            Registers a database provider for use from the static <see cref="T:Waher.Persistence.Database"/> class, 
            throughout the lifetime of the application.
            
            Note: Only one database provider can be registered.
            </summary>
            <param name="DatabaseProvider">Database provider to use.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Register(Waher.Persistence.IDatabaseProvider,System.Boolean)">
            <summary>
            Registers a database provider for use from the static <see cref="T:Waher.Persistence.Database"/> class, 
            throughout the lifetime of the application.
            
            Note: Only one database provider can be registered.
            </summary>
            <param name="DatabaseProvider">Database provider to use.</param>
            <param name="Lock">If the database provider should be locked for the rest of the running time of the application.</param>
        </member>
        <member name="P:Waher.Persistence.Database.Provider">
            <summary>
            Registered database provider.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Database.HasProvider">
            <summary>
            If a database provider is registered.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Database.Locked">
            <summary>
            If the datbase provider has been locked for the rest of the run-time of the application.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Insert(System.Object)">
            <summary>
            Inserts an object into the default collection of the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="E:Waher.Persistence.Database.ObjectInserted">
            <summary>
            Event raised when an object has been inserted.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Insert(System.Object[])">
            <summary>
            Inserts a set of objects into the default collection of the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Insert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts a set of objects into the default collection of the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Find``1(System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find``1(Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find``1(System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find(System.String,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find(System.String,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Find(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.FindFirstDeleteRest``1(System.String[])">
            <summary>
            Finds the first object of a given class <typeparamref name="T"/> and deletes the rest.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>First Object, if found, null otherwise.</returns>
            <exception cref="T:System.TimeoutException">Thrown if a response is not returned from the database within the given number of milliseconds.</exception>
        </member>
        <member name="M:Waher.Persistence.Database.FindFirstDeleteRest``1(Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds the first object of a given class <typeparamref name="T"/> and deletes the rest.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>First Object, if found, null otherwise.</returns>
            <exception cref="T:System.TimeoutException">Thrown if a response is not returned from the database within the given number of milliseconds.</exception>
        </member>
        <member name="M:Waher.Persistence.Database.FindFirstIgnoreRest``1(System.String[])">
            <summary>
            Finds the first object of a given class <typeparamref name="T"/> and ignores the rest.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
            <exception cref="T:System.TimeoutException">Thrown if a response is not returned from the database within the given number of milliseconds.</exception>
        </member>
        <member name="M:Waher.Persistence.Database.FindFirstIgnoreRest``1(Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds the first object of a given class <typeparamref name="T"/> and ignores the rest.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
            <exception cref="T:System.TimeoutException">Thrown if a response is not returned from the database within the given number of milliseconds.</exception>
        </member>
        <member name="M:Waher.Persistence.Database.Update(System.Object)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="E:Waher.Persistence.Database.ObjectUpdated">
            <summary>
            Event raised when an object has been updated.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Update(System.Object[])">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Delete(System.Object)">
            <summary>
            Deletes an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="E:Waher.Persistence.Database.ObjectDeleted">
            <summary>
            Event raised when an object has been deleted.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Delete(System.Object[])">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.Database.LoadObject``1(System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.LoadObject``1(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its collection name <paramref name="CollectionName"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.LoadObject(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its collection name <paramref name="CollectionName"/>.
            </summary>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Export(Waher.Persistence.Serialization.IDatabaseExport)">
            <summary>
            Performs an export of the entire database.
            </summary>
            <param name="Output">Database will be output to this interface.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Export(Waher.Persistence.Serialization.IDatabaseExport,System.String[])">
            <summary>
            Performs an export of the entire database.
            </summary>
            <param name="Output">Database will be output to this interface.</param>
            <param name="CollectionNames">Optional array of collections to export. If null (default), all collections will be exported.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Clear(System.String)">
            <summary>
            Clears a collection of all objects.
            </summary>
            <param name="CollectionName">Name of collection to clear.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="E:Waher.Persistence.Database.CollectionCleared">
            <summary>
            Event raised when a collection has been cleared.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.Repair(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and repairs it if necessary. Results are exported to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors found and repaired.</returns>
        </member>
        <member name="E:Waher.Persistence.Database.CollectionRepaired">
            <summary>
            Event raised when a collection has been repaired.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <param name="Repair">If files should be repaired if corruptions are detected.</param>
            <returns>Collections with errors found, and repaired if <paramref name="Repair"/>=true.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.AddIndex(System.String,System.String[])">
            <summary>
            Adds an index to a collection, if one does not already exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.Database.RemoveIndex(System.String,System.String[])">
            <summary>
            Removes an index from a collection, if one exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.Database.StartBulk">
            <summary>
            Starts bulk-proccessing of data. Must be followed by a call to <see cref="M:Waher.Persistence.Database.EndBulk"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.EndBulk">
            <summary>
            Ends bulk-processing of data. Must be called once for every call to <see cref="M:Waher.Persistence.Database.StartBulk"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Database.ToStringArray(Waher.Persistence.CaseInsensitiveString[])">
            <summary>
            Converts a case insensitive string array to a normal string array.
            </summary>
            <param name="A">Case insensitive string array-</param>
            <returns>Normal string array.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.ToCaseInsensitiveStringArray(System.String[])">
            <summary>
            Converts a case insensitive string array to a normal string array.
            </summary>
            <param name="A">Case insensitive string array-</param>
            <returns>Normal string array.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.GetDictionary(System.String)">
            <summary>
            Gets a persistent dictionary containing objects in a collection.
            </summary>
            <param name="Collection">Collection Name</param>
            <returns>Persistent dictionary</returns>
        </member>
        <member name="M:Waher.Persistence.Database.GetCollections">
            <summary>
            Gets an array of available collections.
            </summary>
            <returns>Array of collections.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.GetCollection(System.Type)">
            <summary>
            Gets the collection corresponding to a given type.
            </summary>
            <param name="Type">Type</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.GetCollection(System.Object)">
            <summary>
            Gets the collection corresponding to a given object.
            </summary>
            <param name="Object">Object</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.IsLabel(System.String,System.String)">
            <summary>
            Checks if a string is a label in a given collection.
            </summary>
            <param name="Collection">Name of collection.</param>
            <param name="Label">Label to check.</param>
            <returns>If <paramref name="Label"/> is a label in the collection
            defined by <paramref name="Collection"/>.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.GetLabels(System.String)">
            <summary>
            Gets an array of available labels for a collection.
            </summary>
            <returns>Array of labels.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.TryGetObjectId(System.Object,System.Object@)">
            <summary>
            Tries to get the Object ID of an object, if it exists.
            </summary>
            <param name="Object">Object whose Object ID is of interest.</param>
            <param name="ObjectId">Resulting Object ID will be placed in this argument.</param>
            <returns>If an Object ID was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Database.DropCollection(System.String)">
            <summary>
            Drops a collection, if it exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterDelegate">
            <summary>
            Delegate for filter callback methods.
            </summary>
            <param name="Filter">Filter node.</param>
            <param name="State">State object passed to the original request.</param>
            <returns>true if iteration should continue, false if it should be stopped.</returns>
        </member>
        <member name="T:Waher.Persistence.Filters.Filter">
            <summary>
            Base class for all filter classes.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.Filter.#ctor">
            <summary>
            Base class for all filter classes.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Filters.Filter.ParentFilter">
            <summary>
            Parent filter.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Filters.Filter.Tag">
            <summary>
            Tag object that can be attached to the filter by caller.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.Filter.ForAll(Waher.Persistence.Filters.FilterDelegate,System.Object)">
            <summary>
            Iterates through all nodes in the filter.
            </summary>
            <param name="Callback">Callback method that will be called for each node in the filter.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If all nodes were processed (true), or if the process was broken by the callback method (false).</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.Filter.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.Filter.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.Filter.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterAnd">
            <summary>
            This filter selects objects that conform to all child-filters provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterAnd.#ctor(Waher.Persistence.Filters.Filter[])">
            <summary>
            This filter selects objects that conform to all child-filters provided.
            </summary>
            <param name="Filters">Child filters.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterAnd.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterAnd.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterAnd.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterAnd.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterChild">
            <summary>
            Abstract base class for filters having a single child-filters.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterChild.#ctor(Waher.Persistence.Filters.Filter)">
            <summary>
            Abstract base class for filters having a single child-filters.
            </summary>
            <param name="Filter">Child filter.</param>
        </member>
        <member name="P:Waher.Persistence.Filters.FilterChild.ChildFilter">
            <summary>
            Child filter.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterChild.ForAll(Waher.Persistence.Filters.FilterDelegate,System.Object)">
            <summary>
            Iterates through all nodes in the filter.
            </summary>
            <param name="Callback">Callback method that will be called for each node in the filter.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If all nodes were processed (true), or if the process was broken by the callback method (false).</returns>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterChildren">
            <summary>
            Abstract base class for filters having a variable number of child-filters.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterChildren.#ctor(Waher.Persistence.Filters.Filter[])">
            <summary>
            Abstract base class for filters having a variable number of child-filters.
            </summary>
            <param name="Filters">Child filters.</param>
        </member>
        <member name="P:Waher.Persistence.Filters.FilterChildren.ChildFilters">
            <summary>
            Child filters.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterChildren.ForAll(Waher.Persistence.Filters.FilterDelegate,System.Object)">
            <summary>
            Iterates through all nodes in the filter.
            </summary>
            <param name="Callback">Callback method that will be called for each node in the filter.</param>
            <param name="State">State object passed on to the callback method.</param>
            <returns>If all nodes were processed (true), or if the process was broken by the callback method (false).</returns>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterField">
            <summary>
            Abstract base class for all field filters.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterField.#ctor(System.String)">
            <summary>
            Abstract base class for all field filters.
            </summary>
            <param name="FieldName">Field Name.</param>
        </member>
        <member name="P:Waher.Persistence.Filters.FilterField.FieldName">
            <summary>
            FIeld Name.
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldEqualTo">
            <summary>
            This filter selects objects that have a named field equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldEqualTo.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldEqualTo.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldEqualTo.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldGreaterOrEqualTo">
            <summary>
            This filter selects objects that have a named field greater or equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterOrEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field greater or equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterOrEqualTo.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterOrEqualTo.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterOrEqualTo.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldGreaterThan">
            <summary>
            This filter selects objects that have a named field greater than a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterThan.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field greater than a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterThan.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterThan.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldGreaterThan.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldLesserOrEqualTo">
            <summary>
            This filter selects objects that have a named field lesser or equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserOrEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field lesser or equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserOrEqualTo.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserOrEqualTo.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserOrEqualTo.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldLesserThan">
            <summary>
            This filter selects objects that have a named field lesser than a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserThan.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field lesser than a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserThan.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserThan.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLesserThan.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldLikeRegEx">
            <summary>
            This filter selects objects that have a named field matching a given regular expression.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLikeRegEx.#ctor(System.String,System.String)">
            <summary>
            This filter selects objects that have a named field matching a given regular expression.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="RegularExpression">Regular expression.</param>
        </member>
        <member name="P:Waher.Persistence.Filters.FilterFieldLikeRegEx.RegularExpression">
            <summary>
            Regular expression.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLikeRegEx.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLikeRegEx.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLikeRegEx.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldLikeRegEx.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldNotEqualTo">
            <summary>
            This filter selects objects that have a named field not equal to a given value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldNotEqualTo.#ctor(System.String,System.Object)">
            <summary>
            This filter selects objects that have a named field not equal to a given value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldNotEqualTo.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldNotEqualTo.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldNotEqualTo.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterFieldValue">
            <summary>
            Abstract base class for all field filters operating on a constant value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldValue.#ctor(System.String,System.Object)">
            <summary>
            Abstract base class for all field filters operating on a constant value.
            </summary>
            <param name="FieldName">Field Name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="P:Waher.Persistence.Filters.FilterFieldValue.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterFieldValue.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterNot">
            <summary>
            This filter selects objects that does not conform to the child-filter provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterNot.#ctor(Waher.Persistence.Filters.Filter)">
            <summary>
            This filter selects objects that does not conform to the child-filter provided.
            </summary>
            <param name="Filter">Child filter.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterNot.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterNot.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterNot.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterNot.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.Filters.FilterOr">
            <summary>
            This filter selects objects that conform to any of the child-filters provided.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterOr.#ctor(Waher.Persistence.Filters.Filter[])">
            <summary>
            This filter selects objects that conform to any of the child-filters provided.
            </summary>
            <param name="Filters">Child filters.</param>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterOr.Negate">
            <summary>
            Calculates the logical inverse of the filter.
            </summary>
            <returns>Logical inerse of the filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterOr.Copy">
            <summary>
            Creates a copy of the filter.
            </summary>
            <returns>Copy of filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterOr.Normalize">
            <summary>
            Returns a normalized filter.
            </summary>
            <returns>Normalized filter.</returns>
        </member>
        <member name="M:Waher.Persistence.Filters.FilterOr.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Waher.Persistence.IAsyncEnumerator">
            <summary>
            Interface for asynchronous enumerators.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IAsyncEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Waher.Persistence.IDatabaseProvider">
            <summary>
            Interface for database providers that can be plugged into the static <see cref="T:Waher.Persistence.Database"/> class.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Insert(System.Object)">
            <summary>
            Inserts an object into the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Insert(System.Object[])">
            <summary>
            Inserts a collection of objects into the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Insert(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts a collection of objects into the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Find``1(System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Find``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects of a given class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Class defining how to deserialize objects found.</typeparam>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Find(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Find(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])">
            <summary>
            Finds objects in a given collection.
            </summary>
            <param name="Collection">Name of collection to search.</param>
            <param name="Offset">Result offset.</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Optional filter. Can be null.</param>
            <param name="SortOrder">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
            <returns>Objects found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Update(System.Object)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Update(System.Object[])">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Delete(System.Object)">
            <summary>
            Deletes an object in the database.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Delete(System.Object[])">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a collection of objects in the database.
            </summary>
            <param name="Objects">Objects to insert.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.LoadObject``1(System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.LoadObject``1(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its base type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Base type.</typeparam>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.LoadObject(System.String,System.Object)">
            <summary>
            Loads an object given its Object ID <paramref name="ObjectId"/> and its collection name <paramref name="CollectionName"/>.
            </summary>
            <param name="CollectionName">Name of collection in which the object resides.</param>
            <param name="ObjectId">Object ID</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Export(Waher.Persistence.Serialization.IDatabaseExport,System.String[])">
            <summary>
            Performs an export of the entire database.
            </summary>
            <param name="Output">Database will be output to this interface.</param>
            <param name="CollectionNames">Optional array of collections to export. If null, all collections will be exported.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Clear(System.String)">
            <summary>
            Clears a collection of all objects.
            </summary>
            <param name="CollectionName">Name of collection to clear.</param>
            <returns>Task object for synchronization purposes.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Repair(System.Xml.XmlWriter,System.String,System.String,System.Boolean)">
            <summary>
            Analyzes the database and repairs it if necessary. Results are exported to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <returns>Collections with errors found and repaired.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Analyze(System.Xml.XmlWriter,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Analyzes the database and exports findings to XML.
            </summary>
            <param name="Output">XML Output.</param>
            <param name="XsltPath">Optional XSLT to use to view the output.</param>
            <param name="ProgramDataFolder">Program data folder. Can be removed from filenames used, when referencing them in the report.</param>
            <param name="ExportData">If data in database is to be exported in output.</param>
            <param name="Repair">If files should be repaired if corruptions are detected.</param>
            <returns>Collections with errors found, and repaired if <paramref name="Repair"/>=true.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.AddIndex(System.String,System.String[])">
            <summary>
            Adds an index to a collection, if one does not already exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.RemoveIndex(System.String,System.String[])">
            <summary>
            Removes an index from a collection, if one exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
            <param name="FieldNames">Sort order. Each string represents a field name. By default, sort order is ascending.
            If descending sort order is desired, prefix the field name by a hyphen (minus) sign.</param>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.StartBulk">
            <summary>
            Starts bulk-proccessing of data. Must be followed by a call to <see cref="M:Waher.Persistence.IDatabaseProvider.EndBulk"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.EndBulk">
            <summary>
            Ends bulk-processing of data. Must be called once for every call to <see cref="M:Waher.Persistence.IDatabaseProvider.StartBulk"/>.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Start">
            <summary>
            Called when processing starts.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Stop">
            <summary>
            Called when processing ends.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.Flush">
            <summary>
            Persists any pending changes.
            </summary>
        </member>
        <member name="P:Waher.Persistence.IDatabaseProvider.ObjectIdByteCount">
            <summary>
            Number of bytes used by an Object ID.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.GetDictionary(System.String)">
            <summary>
            Gets a persistent dictionary containing objects in a collection.
            </summary>
            <param name="Collection">Collection Name</param>
            <returns>Persistent dictionary</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.GetCollections">
            <summary>
            Gets an array of available collections.
            </summary>
            <returns>Array of collections.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.GetCollection(System.Type)">
            <summary>
            Gets the collection corresponding to a given type.
            </summary>
            <param name="Type">Type</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.GetCollection(System.Object)">
            <summary>
            Gets the collection corresponding to a given object.
            </summary>
            <param name="Object">Object</param>
            <returns>Collection name.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.IsLabel(System.String,System.String)">
            <summary>
            Checks if a string is a label in a given collection.
            </summary>
            <param name="Collection">Name of collection.</param>
            <param name="Label">Label to check.</param>
            <returns>If <paramref name="Label"/> is a label in the collection
            defined by <paramref name="Collection"/>.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.GetLabels(System.String)">
            <summary>
            Gets an array of available labels for a collection.
            </summary>
            <returns>Array of labels.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.TryGetObjectId(System.Object,System.Object@)">
            <summary>
            Tries to get the Object ID of an object, if it exists.
            </summary>
            <param name="Object">Object whose Object ID is of interest.</param>
            <param name="ObjectId">Resulting Object ID will be placed in this argument.</param>
            <returns>If an Object ID was found.</returns>
        </member>
        <member name="M:Waher.Persistence.IDatabaseProvider.DropCollection(System.String)">
            <summary>
            Drops a collection, if it exist.
            </summary>
            <param name="CollectionName">Name of collection.</param>
        </member>
        <member name="T:Waher.Persistence.EntryType">
            <summary>
            Ledger entry type.
            </summary>
        </member>
        <member name="F:Waher.Persistence.EntryType.New">
            <summary>
            New entry
            </summary>
        </member>
        <member name="F:Waher.Persistence.EntryType.Update">
            <summary>
            Update entry
            </summary>
        </member>
        <member name="F:Waher.Persistence.EntryType.Delete">
            <summary>
            Delete entry
            </summary>
        </member>
        <member name="F:Waher.Persistence.EntryType.Clear">
            <summary>
            Collection cleared
            </summary>
        </member>
        <member name="T:Waher.Persistence.ILedgerEntry`1">
            <summary>
            Interface for ledger entries.
            </summary>
            <typeparam name="T">Type of objects being processed.</typeparam>
        </member>
        <member name="P:Waher.Persistence.ILedgerEntry`1.EntryType">
            <summary>
            Type of ledger entry
            </summary>
        </member>
        <member name="P:Waher.Persistence.ILedgerEntry`1.EntryTimestamp">
            <summary>
            Timestamp of entry
            </summary>
        </member>
        <member name="P:Waher.Persistence.ILedgerEntry`1.Object">
            <summary>
            Entry
            </summary>
        </member>
        <member name="T:Waher.Persistence.ILedgerEnumerator`1">
            <summary>
            Enumerator of ledger entries
            </summary>
            <typeparam name="T">Type of objects being processed.</typeparam>
        </member>
        <member name="T:Waher.Persistence.ILedgerProvider">
            <summary>
            Interface for ledger providers that can be plugged into the static <see cref="T:Waher.Persistence.Ledger"/> class.
            </summary>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.NewEntry(System.Object)">
            <summary>
            Adds an entry to the ledger.
            </summary>
            <param name="Object">New object.</param>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.UpdatedEntry(System.Object)">
            <summary>
            Updates an entry in the ledger.
            </summary>
            <param name="Object">Updated object.</param>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.DeletedEntry(System.Object)">
            <summary>
            Deletes an entry in the ledger.
            </summary>
            <param name="Object">Deleted object.</param>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.GetEnumerator``1">
            <summary>
            Gets an eumerator for objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object entries to enumerate.</typeparam>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.GetEnumerator(System.String)">
            <summary>
            Gets an eumerator for objects in a collection.
            </summary>
            <param name="CollectionName">Collection to enumerate.</param>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.Start">
            <summary>
            Called when processing starts.
            </summary>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.Stop">
            <summary>
            Called when processing ends.
            </summary>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.Flush">
            <summary>
            Persists any pending changes.
            </summary>
        </member>
        <member name="M:Waher.Persistence.ILedgerProvider.GetCollections">
            <summary>
            Gets an array of available collections.
            </summary>
            <returns>Array of collections.</returns>
        </member>
        <member name="T:Waher.Persistence.IPersistentDictionary">
            <summary>
            Persistent dictionary that can contain more entries than possible in the internal memory.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.DeleteAndDispose">
            <summary>
            Deletes the dictionary and disposes the object.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.ClearAsync">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.ContainsKeyAsync(System.String)">
            <summary>
            Determines whether the System.Collections.Generic.IDictionary{string,object} contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the System.Collections.Generic.IDictionary{string,object}.</param>
            <returns>true if the System.Collections.Generic.IDictionary{string,object} contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.AddAsync(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the System.Collections.Generic.IDictionary{string,object}.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the System.Collections.Generic.IDictionary{string,object}.</exception>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.RemoveAsync(System.String)">
            <summary>
            Removes the element with the specified key from the System.Collections.IDictionary object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Waher.Persistence.IPersistentDictionary.TryGetValueAsync(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <returns>Returns a pair of values:
            
            First value is true if the object that implements System.Collections.Generic.IDictionary{string,object} contains an element 
            with the specified key; otherwise, false.
            When this method returns, the second value contains the value associated with the key, if the key is found; otherwise, 
            the default value for the type of the value parameter.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="T:Waher.Persistence.Ledger">
            <summary>
            Static interface for ledger persistence. In order to work, a ledger provider has to be assigned to it. This is
            ideally done as one of the first steps in the startup of an application.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Ledger.Register(Waher.Persistence.ILedgerProvider)">
            <summary>
            Registers a ledger provider for use from the static <see cref="T:Waher.Persistence.Ledger"/> class, 
            throughout the lifetime of the application.
            
            Note: Only one ledger provider can be registered.
            </summary>
            <param name="LedgerProvider">Ledger provider to use.</param>
        </member>
        <member name="M:Waher.Persistence.Ledger.Register(Waher.Persistence.ILedgerProvider,System.Boolean)">
            <summary>
            Registers a ledger provider for use from the static <see cref="T:Waher.Persistence.Ledger"/> class, 
            throughout the lifetime of the application.
            
            Note: Only one ledger provider can be registered.
            </summary>
            <param name="LedgerProvider">Ledger provider to use.</param>
            <param name="Lock">If the ledger provider should be locked for the rest of the running time of the application.</param>
        </member>
        <member name="P:Waher.Persistence.Ledger.Provider">
            <summary>
            Registered ledger provider.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Ledger.HasProvider">
            <summary>
            If a ledger provider is registered.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Ledger.Locked">
            <summary>
            If the datbase provider has been locked for the rest of the run-time of the application.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Ledger.NewEntry(System.Object)">
            <summary>
            Adds an entry to the ledger.
            </summary>
            <param name="Object">New object.</param>
        </member>
        <member name="M:Waher.Persistence.Ledger.UpdatedEntry(System.Object)">
            <summary>
            Updates an entry in the ledger.
            </summary>
            <param name="Object">Updated object.</param>
        </member>
        <member name="M:Waher.Persistence.Ledger.DeletedEntry(System.Object)">
            <summary>
            Deletes an entry in the ledger.
            </summary>
            <param name="Object">Deleted object.</param>
        </member>
        <member name="M:Waher.Persistence.Ledger.GetEnumerator``1">
            <summary>
            Gets an eumerator for objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object entries to enumerate.</typeparam>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Persistence.Ledger.GetEnumerator(System.String)">
            <summary>
            Gets an eumerator for objects in a collection.
            </summary>
            <param name="CollectionName">Collection to enumerate.</param>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Persistence.Ledger.GetCollections">
            <summary>
            Gets an array of available collections.
            </summary>
            <returns>Array of collections.</returns>
        </member>
        <member name="T:Waher.Persistence.LifeCycle.DatabaseModule">
            <summary>
            Database module.
            </summary>
        </member>
        <member name="M:Waher.Persistence.LifeCycle.DatabaseModule.#ctor">
            <summary>
            Database module.
            </summary>
        </member>
        <member name="M:Waher.Persistence.LifeCycle.DatabaseModule.Start">
            <summary>
            Starts the module.
            </summary>
            <returns>If an asynchronous start operation has been started, a wait handle is returned. This
            wait handle can be used to wait for the asynchronous process to finish. If no such asynchronous
            operation has been started, null can be returned.</returns>
        </member>
        <member name="M:Waher.Persistence.LifeCycle.DatabaseModule.Stop">
            <summary>
            Stops the module.
            </summary>
        </member>
        <member name="M:Waher.Persistence.LifeCycle.DatabaseModule.Flush">
            <summary>
            Flushes any remaining data to disk.
            </summary>
        </member>
        <member name="T:Waher.Persistence.ObjectEventHandler">
            <summary>
            Event handler for object events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Waher.Persistence.ObjectEventArgs">
            <summary>
            Event arguments for database object events.
            </summary>
        </member>
        <member name="M:Waher.Persistence.ObjectEventArgs.#ctor(System.Object)">
            <summary>
            Event arguments for database object events.
            </summary>
            <param name="Object">Object</param>
        </member>
        <member name="P:Waher.Persistence.ObjectEventArgs.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="T:Waher.Persistence.Serialization.GenericObject">
            <summary>
            Generic object. Contains a sequence of properties.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.#ctor(System.String,System.String,System.Guid,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Generic object. Contains a sequence of properties.
            </summary>
            <param name="CollectionName">Collection name.</param>
            <param name="TypeName">Type name.</param>
            <param name="ObjectId">Object ID</param>
            <param name="Properties">Ordered sequence of properties.</param>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.#ctor(System.String,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Generic object. Contains a sequence of properties.
            </summary>
            <param name="CollectionName">Collection name.</param>
            <param name="TypeName">Type name.</param>
            <param name="ObjectId">Object ID</param>
            <param name="Properties">Ordered sequence of properties.</param>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.CollectionName">
            <summary>
            Collection name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.TypeName">
            <summary>
            Type name.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.ObjectId">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.Item(System.String)">
            <summary>
            Access to property values through the use of their property names.
            </summary>
            <param name="PropertyName">Property name.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.TryGetFieldValue(System.String,System.Object@)">
            <summary>
            Gets the value of a field or property of the object, given its name.
            </summary>
            <param name="PropertyName">Name of field or property.</param>
            <param name="Value">Corresponding field or property value, if found, or null otherwise.</param>
            <returns>If the corresponding field or property was found.</returns>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Remove(System.String)">
            <summary>
            Removes a named property.
            </summary>
            <param name="PropertyName">Name of property to remove.</param>
            <returns>If the property was found and removed.</returns>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.Properties">
            <summary>
            Current set of properties.
            </summary>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.Count">
            <summary>
            <see cref="P:System.Collections.Generic.ICollection`1.Count"/>
            </summary>
        </member>
        <member name="P:Waher.Persistence.Serialization.GenericObject.IsReadOnly">
            <summary>
            <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Clear">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.HasProperty(System.String)">
            <summary>
            If the object has a property with a given name.
            </summary>
            <param name="PropertyName">Property name.</param>
            <returns>If the object has a property with the given name.</returns>
        </member>
        <member name="M:Waher.Persistence.Serialization.GenericObject.GetProperty(System.String)">
            <summary>
            Gets the value of a given property.
            </summary>
            <param name="PropertyName">Property name.</param>
            <returns>Property value, if found, null otherwise.</returns>
        </member>
        <member name="T:Waher.Persistence.Serialization.IDatabaseExport">
            <summary>
            Interface for database exports.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.StartExport">
            <summary>
            Is called when export of database is started.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.EndExport">
            <summary>
            Is called when export of database is finished.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.StartCollection(System.String)">
            <summary>
            Is called when a collection is started.
            </summary>
            <param name="CollectionName">Name of collection</param>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.EndCollection">
            <summary>
            Is called when a collection is finished.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.StartIndex">
            <summary>
            Is called when an index in a collection is started.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.EndIndex">
            <summary>
            Is called when an index in a collection is finished.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.ReportIndexField(System.String,System.Boolean)">
            <summary>
            Is called when a field in an index is reported.
            </summary>
            <param name="FieldName">Name of field.</param>
            <param name="Ascending">If the field is sorted using ascending sort order.</param>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.StartObject(System.String,System.String)">
            <summary>
            Is called when an object is started.
            </summary>
            <param name="ObjectId">ID of object.</param>
            <param name="TypeName">Type name of object.</param>
            <returns>Object ID of object, after optional mapping.</returns>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.EndObject">
            <summary>
            Is called when an object is finished.
            </summary>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.ReportProperty(System.String,System.Object)">
            <summary>
            Is called when a property is reported.
            </summary>
            <param name="PropertyName">Property name.</param>
            <param name="PropertyValue">Property value.</param>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.ReportError(System.String)">
            <summary>
            Is called when an error is reported.
            </summary>
            <param name="Message">Error message.</param>
        </member>
        <member name="M:Waher.Persistence.Serialization.IDatabaseExport.ReportException(System.Exception)">
            <summary>
            Is called when an exception has occurred.
            </summary>
            <param name="Exception">Exception object.</param>
        </member>
    </members>
</doc>
