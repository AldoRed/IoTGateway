<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Runtime.Inventory</name>
    </assembly>
    <members>
        <member name="T:Waher.Runtime.Inventory.DefaultImplementationAttribute">
            <summary>
            Defines a default implementation for an interface. If a request to instantiate an interface is made,
            the default implementation will be instantiated.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.DefaultImplementationAttribute.#ctor(System.Type)">
            <summary>
            Defines a default implementation for an interface. If a request to instantiate an interface is made,
            the default implementation will be instantiated.
            </summary>
            <param name="Type">Type to instantiate.</param>
        </member>
        <member name="P:Waher.Runtime.Inventory.DefaultImplementationAttribute.Type">
            <summary>
            Type to instantiate.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.DefaultImplementationAttribute.RegisterDefaultImplementation(System.Type,System.Type)">
            <summary>
            Registers a default implementation for an interface.
            </summary>
            <param name="From">Type of interface.</param>
            <param name="To">Default implementation.</param>
        </member>
        <member name="M:Waher.Runtime.Inventory.DefaultImplementationAttribute.UnregisterDefaultImplementation(System.Type,System.Type)">
            <summary>
            Unregisters a default implementation for an interface.
            </summary>
            <param name="From">Type of interface.</param>
            <param name="To">Default implementation.</param>
        </member>
        <member name="M:Waher.Runtime.Inventory.DefaultImplementationAttribute.TryGetDefaultImplementation(System.Type,System.Type@)">
            <summary>
            Tries to get the default implementation for an interface.
            </summary>
            <param name="Type">Type of interface.</param>
            <param name="DefaultImplementation">Default implementation to use for interface.</param>
            <returns>If a default implementation was found.</returns>
        </member>
        <member name="T:Waher.Runtime.Inventory.Grade">
            <summary>
            Grade enumeration
            </summary>
        </member>
        <member name="F:Waher.Runtime.Inventory.Grade.Perfect">
            <summary>
            Match is perfect.
            </summary>
        </member>
        <member name="F:Waher.Runtime.Inventory.Grade.Excellent">
            <summary>
            Match is excellent.
            </summary>
        </member>
        <member name="F:Waher.Runtime.Inventory.Grade.Ok">
            <summary>
            Match is ok.
            </summary>
        </member>
        <member name="F:Waher.Runtime.Inventory.Grade.Barely">
            <summary>
            Match is limited
            </summary>
        </member>
        <member name="F:Waher.Runtime.Inventory.Grade.NotAtAll">
            <summary>
            No match.
            </summary>
        </member>
        <member name="T:Waher.Runtime.Inventory.IModule">
            <summary>
            Interface for late-bound modules loaded at runtime.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.IModule.Start">
            <summary>
            Starts the module.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.IModule.Stop">
            <summary>
            Stops the module.
            </summary>
        </member>
        <member name="T:Waher.Runtime.Inventory.IProcessingSupport`1">
            <summary>
            Interface for detecting interfaces supporting objects with predefined features.
            </summary>
            <typeparam name="T">Type defining features to look for.</typeparam>
        </member>
        <member name="M:Waher.Runtime.Inventory.IProcessingSupport`1.Supports(`0)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="T:Waher.Runtime.Inventory.SingletonAttribute">
            <summary>
            Defines a class or struct as singleton. This means that when instantiated, using <see cref="M:Waher.Runtime.Inventory.Types.Instantiate(System.Type,System.Object[])"/>,
            the same instance will be returned. Singleton instances will be disposed by the <see cref="T:Waher.Runtime.Inventory.Types"/> class, when the
            application ends, if they implement <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.#ctor">
            <summary>
            Defines a class or struct as singleton. This means that when instantiated, using <see cref="M:Waher.Runtime.Inventory.Types.Instantiate(System.Type,System.Object[])"/>,
            the same instance will be returned. Singleton instances will be disposed by the <see cref="T:Waher.Runtime.Inventory.Types"/> class, when the
            application ends.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.Instantiate(System.Boolean,System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.Register(System.Object,System.Object[])">
            <summary>
            Registers a singleton instance of a type.
            </summary>
            <param name="Object">Singleton object instance.</param>
            <param name="Arguments">Any constructor arguments associated with the object instance.</param>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.Unregister(System.Object,System.Object[])">
            <summary>
            Unregisters a singleton instance of a type.
            </summary>
            <param name="Object">Singleton object instance.</param>
            <param name="Arguments">Any constructor arguments associated with the object instance.</param>
            <returns>If the instance was found and removed.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.IsRegistered(System.Type,System.Object[])">
            <summary>
            Checks if a singleton type (with optional associated arguments) is registered.
            </summary>
            <param name="Type">Singleton type</param>
            <param name="Arguments">Any constructor arguments associated with the type.</param>
            <returns>If such a singleton type is registered.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonAttribute.GetInstances">
            <summary>
            Gets available singleton instances.
            </summary>
            <returns>Singleton instances.</returns>
        </member>
        <member name="T:Waher.Runtime.Inventory.SingletonKey">
            <summary>
            Represents a type and a set of arguments, for which an object instance is the single instantiation.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonKey.#ctor(System.Type,System.Object[])">
            <summary>
            Represents a type and a set of arguments, for which an object instance is the single instantiation.
            </summary>
            <param name="Type">Singleton type.</param>
            <param name="Arguments">Arguments, for which the instance is unique.</param>
        </member>
        <member name="P:Waher.Runtime.Inventory.SingletonKey.Type">
            <summary>
            Singleton type.
            </summary>
        </member>
        <member name="P:Waher.Runtime.Inventory.SingletonKey.Arguments">
            <summary>
            Arguments, for which the instance is unique.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonKey.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Runtime.Inventory.SingletonRecord">
            <summary>
            A record of a singleton instance in memory.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.SingletonRecord.#ctor(Waher.Runtime.Inventory.SingletonKey,System.Boolean,System.Object)">
            <summary>
            A record of a singleton instance in memory.
            </summary>
            <param name="Key">Singleton key.</param>
            <param name="Instantiated">If the instance was instantiated by the library (true) or externally (by caller).</param>
            <param name="Instance">Object instance.</param>
        </member>
        <member name="P:Waher.Runtime.Inventory.SingletonRecord.Key">
            <summary>
            Singleton key.
            </summary>
        </member>
        <member name="P:Waher.Runtime.Inventory.SingletonRecord.Instantiated">
            <summary>
            If the instance was instantiated by the library (true) or externally (by caller).
            </summary>
        </member>
        <member name="P:Waher.Runtime.Inventory.SingletonRecord.Instance">
            <summary>
            Object instance.
            </summary>
        </member>
        <member name="T:Waher.Runtime.Inventory.Types">
            <summary>
            Static class that dynamically manages types and interfaces available in the runtime environment.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetType(System.String)">
            <summary>
            Gets a type, given its full name.
            </summary>
            <param name="FullName">Full name of type.</param>
            <returns>Type, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.IsType(System.String)">
            <summary>
            Checks if <paramref name="FullName"/> references a type in the inventory.
            </summary>
            <param name="FullName">Full name</param>
            <returns>If <paramref name="FullName"/> references a type.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetTypesImplementingInterface(System.String)">
            <summary>
            Gets all types implementing a given interface.
            </summary>
            <param name="InterfaceFullName">Full name of interface.</param>
            <returns>Types implementing the interface.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetTypesImplementingInterface(System.Type)">
            <summary>
            Gets all types implementing a given interface.
            </summary>
            <param name="Interface">Interface</param>
            <returns>Types implementing the interface.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetTypesInNamespace(System.String)">
            <summary>
            Gets all types in a namespace. (Types in sub-namespaces are not included.)
            </summary>
            <param name="Namespace">Namespace.</param>
            <returns>Types in the namespace.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetFirstAssemblyReferenceInNamespace(System.String)">
            <summary>
            Gets the assembly reference of the first type found in a namespace.
            </summary>
            <param name="Namespace">Namespace.</param>
            <returns>Assembly reference of first type found in a namespace. If no such type was found, null is returned.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetRootNamespaces">
            <summary>
            Gets an array of root namespaces.
            </summary>
            <returns>Array of root namespaces.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.IsRootNamespace(System.String)">
            <summary>
            Checks if a name is a root namespace.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name is a root namespace.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetSubNamespaces(System.String)">
            <summary>
            Gets an array of sub-namespaces to a given namespace.
            </summary>
            <param name="Namespace">Namespace</param>
            <returns>Array of sub-namespaces.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.IsSubNamespace(System.String,System.String)">
            <summary>
            Checks if a local name in <paramref name="LocalName"/> represents a subnamespace from the point of view of the namespace
            in <paramref name="Namespace"/>.
            </summary>
            <param name="Namespace">Namespace.</param>
            <param name="LocalName">Local name.</param>
            <returns>If the local name represents a subnamespace.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.TryGetQualifiedNames(System.String,System.String[]@)">
            <summary>
            Gets an array (possibly null) of qualified names relating to an unqualified name.
            </summary>
            <param name="UnqualifiedName">Unqualified name.</param>
            <param name="QualifiedNames">Array of qualified names (null if none)</param>
            <returns>If the unqualified name was recognized.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Invalidate">
            <summary>
            Invalidates type caches. This method should be called after having loaded assemblies dynamically, to make sure any types,
            interfaces and namespaces in the newly loaded assemblies are included.
            </summary>
        </member>
        <member name="E:Waher.Runtime.Inventory.Types.OnInvalidated">
            <summary>
            Event raised when the type cache has been invalidated. Can be used by code that themselves cache results and need to be updated
            after new types are available.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.StopAllModules">
            <summary>
            Stops all modules.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.StopAllModules(System.Collections.Generic.IComparer{Waher.Runtime.Inventory.IModule})">
            <summary>
            Stops all modules.
            </summary>
            <param name="Order">Order in which modules should be stopped.
            Default order is the reverse starting order, if no other order is provided.</param>
        </member>
        <member name="P:Waher.Runtime.Inventory.Types.Modules">
            <summary>
            Loaded modules.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetLoadedModules">
            <summary>
            Gets an array of loaded modules.
            </summary>
            <returns>Array of loaded modules.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetLoadedModules(System.Collections.Generic.IComparer{Waher.Runtime.Inventory.IModule})">
            <summary>
            Gets an array of loaded modules.
            </summary>
            <param name="Order">Optional sort order of modules.</param>
            <returns>Array of loaded modules.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.StartAllModules(System.Int32)">
            <summary>
            Starts all loaded modules.
            </summary>
            <param name="Timeout">Timeout, in milliseconds.</param>
            <returns>If all modules have been successfully started (true), or if at least one has not been
            started within the time period defined by <paramref name="Timeout"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.StartAllModules(System.Int32,System.Collections.Generic.IComparer{Waher.Runtime.Inventory.IModule})">
            <summary>
            Starts all loaded modules.
            </summary>
            <param name="Timeout">Timeout, in milliseconds.</param>
            <param name="Order">Order in which modules should be started.</param>
            <returns>If all modules have been successfully started (true), or if at least one has not been
            started within the time period defined by <paramref name="Timeout"/>.</returns>
        </member>
        <member name="P:Waher.Runtime.Inventory.Types.NoTypes">
            <summary>
            Contains an empty array of types.
            </summary>
        </member>
        <member name="P:Waher.Runtime.Inventory.Types.NoParameters">
            <summary>
            Contains an empty array of parameter values.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.SetModuleParameter(System.String,System.Object)">
            <summary>
            Sets a module parameter. This parameter value will be accessible to modules when they are loaded.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Value">Parameter value.</param>
            <exception cref="T:System.ArgumentException">If a module parameter with the same name is already defined.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.TryGetModuleParameter(System.String,System.Object@)">
            <summary>
            Tries to get a module parameter value.
            </summary>
            <param name="Name">Name of module parameter.</param>
            <param name="Value">Value of module parameter.</param>
            <returns>If a module parameter with the same name was found.</returns>
        </member>
        <member name="P:Waher.Runtime.Inventory.Types.IsInitialized">
            <summary>
            If the inventory has been initialized.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Initialize(System.Reflection.Assembly[])">
            <summary>
            Initializes the inventory engine, registering types and interfaces available in <paramref name="Assemblies"/>.
            </summary>
        </member>
        <member name="P:Waher.Runtime.Inventory.Types.Assemblies">
            <summary>
            Assemblies in the inventory.
            </summary>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.CreateObject(System.String,System.Object[])">
            <summary>
            Creates an object of a given type, given its full name.
            </summary>
            <param name="TypeName">Full type name.</param>
            <param name="Parameters">Parameters to pass on to the constructor.</param>
            <returns>Created object.</returns>
            <exception cref="T:System.ArgumentException">If no type with the given name exists.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetProperty(System.Object,System.String)">
            <summary>
            Gets a property value (or field value) from an object.
            </summary>
            <param name="Object">Object instance.</param>
            <param name="PropertyName">Name of property (or field).</param>
            <returns>Property (or field) value.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="Object"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If there is no property or field with the given name.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a property value (or field value) in an object.
            </summary>
            <param name="Object">Object instance.</param>
            <param name="PropertyName">Name of property (or field).</param>
            <param name="Value">Value to set.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="Object"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If there is no property or field with the given name.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Call(System.Object,System.String,System.Object[])">
            <summary>
            Calls a method on an object.
            </summary>
            <param name="Object">Object instance.</param>
            <param name="MethodName">Name of method.</param>
            <param name="Arguments">Arguments to pass on to method.</param>
            <returns>Result</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="Object"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If there is no method with the given name and argument types.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.CallStatic(System.String,System.String,System.Object[])">
            <summary>
            Calls a static method on a class.
            </summary>
            <param name="TypeName">Name of class (or type).</param>
            <param name="MethodName">Name of method.</param>
            <param name="Arguments">Arguments to pass on to method.</param>
            <returns>Result</returns>
            <exception cref="T:System.ArgumentException">If there is no method with the given name and argument types.</exception>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.FindBest``2(``1)">
            <summary>
            Finds the best interface for a certain task.
            </summary>
            <typeparam name="InterfaceType">Check interfaces of this type.</typeparam>
            <typeparam name="ObjectType">Return interfaces supporting processing of this type 
            (i.e. implementing <see cref="T:Waher.Runtime.Inventory.IProcessingSupport`1"/>).</typeparam>
            <param name="Object">Object with features to process.</param>
            <returns>Best interface, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.FindBest``2(``1,System.Type[])">
            <summary>
            Finds the best interface for a certain task.
            </summary>
            <typeparam name="InterfaceType">Check interfaces of this type.</typeparam>
            <typeparam name="ObjectType">Return interfaces supporting processing of this type 
            (i.e. implementing <see cref="T:Waher.Runtime.Inventory.IProcessingSupport`1"/>).</typeparam>
            <param name="Object">Object with features to process.</param>
            <param name="Interfaces">Array of types (of <typeparamref name="InterfaceType"/>) to search.</param>
            <returns>Best interface, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.TryParseEnum(System.String,System.String,System.Enum@)">
            <summary>
            Tries to parse an enumeration value in string form, given the full name of the enumeration type.
            </summary>
            <param name="TypeName">Full name of the enumeration type.</param>
            <param name="StringValue">String representation of enumeration value.</param>
            <param name="Value">Value, if parsed.</param>
            <returns>If the string value could be parsed to an enumeration value of the given type.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Create(System.Boolean,System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>. Creates an instance of a type.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Instantiate``1(System.Boolean,System.Object[])">
            <summary>
            Returns an instance of the type <typeparamref name="T"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            </summary>
            <typeparam name="T">Type of objects to return.</typeparam>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Instantiate(System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            </summary>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Instantiate(System.Boolean,System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Instantiate(System.String,System.Object[])">
            <summary>
            Returns an instance of the type defined by the full name <paramref name="TypeName"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            </summary>
            <param name="TypeName">Full name of type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of object.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.Instantiate(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns an instance of the type defined by the full name <paramref name="TypeName"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="TypeName">Full name of type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of object.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.InstantiateDefault``1(System.Boolean,System.Object[])">
            <summary>
            Returns an instance of the type <typeparamref name="T"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            
            If providing arguments when creating a singleton instance, the result will be registered as 
            the default singleton instance, for cases when the type is instantiated without arguments.
            </summary>
            <typeparam name="T">Type of objects to return.</typeparam>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.InstantiateDefault(System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            
            If providing arguments when creating a singleton instance, the result will be registered as 
            the default singleton instance, for cases when the type is instantiated without arguments.
            </summary>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.InstantiateDefault(System.Boolean,System.Type,System.Object[])">
            <summary>
            Returns an instance of the type <paramref name="Type"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            
            If providing arguments when creating a singleton instance, the result will be registered as 
            the default singleton instance, for cases when the type is instantiated without arguments.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="Type">Type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of <paramref name="Type"/>.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.InstantiateDefault(System.String,System.Object[])">
            <summary>
            Returns an instance of the type defined by the full name <paramref name="TypeName"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            
            If providing arguments when creating a singleton instance, the result will be registered as 
            the default singleton instance, for cases when the type is instantiated without arguments.
            </summary>
            <param name="TypeName">Full name of type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of object.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.InstantiateDefault(System.Boolean,System.String,System.Object[])">
            <summary>
            Returns an instance of the type defined by the full name <paramref name="TypeName"/>. If one needs to be created, it is.
            If the constructor requires arguments, these are instantiated as necessary, if not provided
            in <paramref name="Arguments"/>. Attributes <see cref="T:Waher.Runtime.Inventory.SingletonAttribute"/> and
            <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> can be used to control instantiation of
            singleton classes, interfaces or abstract classes.
            
            If providing arguments when creating a singleton instance, the result will be registered as 
            the default singleton instance, for cases when the type is instantiated without arguments.
            </summary>
            <param name="ReturnNullIfFail">If null should be returned instead for throwing exceptions.</param>
            <param name="TypeName">Full name of type of objects to return.</param>
            <param name="Arguments">Constructor arguments.</param>
            <returns>Instance of object.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.RegisterSingleton(System.Object,System.Object[])">
            <summary>
            Registers a singleton instance of a type.
            </summary>
            <param name="Object">Singleton object instance.</param>
            <param name="Arguments">Any constructor arguments associated with the object instance.</param>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.UnregisterSingleton(System.Object,System.Object[])">
            <summary>
            Unregisters a singleton instance of a type.
            </summary>
            <param name="Object">Singleton object instance.</param>
            <param name="Arguments">Any constructor arguments associated with the object instance.</param>
            <returns>If the instance was found and removed.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.IsSingletonRegistered(System.Type,System.Object[])">
            <summary>
            Checks if a singleton type (with optional associated arguments) is registered.
            </summary>
            <param name="Type">Singleton type</param>
            <param name="Arguments">Any constructor arguments associated with the type.</param>
            <returns>If such a singleton type is registered.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.GetSingletonInstances">
            <summary>
            Gets available singleton instances.
            </summary>
            <returns>Singleton instances.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.RegisterDefaultImplementation(System.Type,System.Type)">
            <summary>
            Registers a default implementation for an interface. Such a registration takes presedence of any default implementations
            provided by the <see cref="T:Waher.Runtime.Inventory.DefaultImplementationAttribute"/> associated with the interface definition.
            </summary>
            <param name="From">Type of interface.</param>
            <param name="To">Default implementation.</param>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.TryGetDefaultImplementation(System.Type,System.Type@)">
            <summary>
            Tries to get the default implementation for an interface.
            </summary>
            <param name="Type">Type of interface.</param>
            <param name="DefaultImplementation">Default implementation to use for interface.</param>
            <returns>If a default implementation was found.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.IsDefaultImplementationRegistered(System.Type)">
            <summary>
            Checks if an interface has a default implementation registered.
            </summary>
            <param name="Type">Type of interface.</param>
            <returns>If a default implementation was registered.</returns>
        </member>
        <member name="M:Waher.Runtime.Inventory.Types.UnregisterDefaultImplementation(System.Type,System.Type)">
            <summary>
            Unregisters a default implementation for an interface.
            </summary>
            <param name="From">Type of interface.</param>
            <param name="To">Default implementation.</param>
        </member>
    </members>
</doc>
