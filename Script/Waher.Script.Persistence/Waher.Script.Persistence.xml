<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Script.Persistence</name>
    </assembly>
    <members>
        <member name="T:Waher.Script.Persistence.Functions.DeleteObject">
            <summary>
            Deletes an object from the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.DeleteObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Deletes an object from the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.DeleteObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.DeleteObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.DeleteObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.FindObjects">
            <summary>
            Finds objects in the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.FindObjects.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Finds object in the object database.
            </summary>
            <param name="Type">Type</param>
            <param name="Offset">Offset</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Search filter.</param>
            <param name="SortOrder">Sort order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.FindObjects.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.FindObjects.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.FindObjects.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.SaveNewObject">
            <summary>
            Saves an object to the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SaveNewObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Saves an object to the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SaveNewObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SaveNewObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SaveNewObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.UpdateObject">
            <summary>
            Updates an object in the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.UpdateObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Updates an object in the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.UpdateObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.UpdateObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.UpdateObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.ConditionalEnumerator">
            <summary>
            Enumerator that only returns elements matching a set of conditions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,Waher.Script.Model.ScriptNode)">
            <summary>
            Enumerator that only returns elements matching a set of conditions.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Conditions">Set of conditions that must be fulfilled.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.ConditionalEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.MoveNextAsync">
            <summary>
            <see cref="M:Waher.Persistence.IAsyncEnumerator.MoveNextAsync"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.CustomOrderEnumerator">
            <summary>
            Enumerator that reorders a sequence of items.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.ScriptNode,System.Boolean}[])">
            <summary>
            Enumerator that reorders a sequence of items.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Custom order.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.CustomOrderEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.MoveNextAsync">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Delete">
            <summary>
            Executes a DELETE statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes a DELETE statement against the object database.
            </summary>
            <param name="Source">Source to delete from.</param>
            <param name="Where">Optional where clause</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.DistinctEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Columns">Column definitions. Might be null if objects are to be returned.</param>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.GroupEnumerator">
            <summary>
            Enumerator that groups items into groups, and returns aggregated elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.GroupEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[])">
            <summary>
            Enumerator that groups items into groups, and returns aggregated elements.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables</param>
            <param name="GroupBy">Group on these fields</param>
            <param name="GroupNames">Names given to grouped fields</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.GroupEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.GroupEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.GroupEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.GroupEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.IDataSource">
            <summary>
            Interface for data sources that can be used in SQL statements.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a set of objects.
            </summary>
            <param name="Objects">Objects to delete</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Insert(System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.IDataSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.IDataSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Insert">
            <summary>
            Executes an INSERT statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Operators.ElementList,Waher.Script.Operators.ElementList,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an INSERT statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="Columns">Columns</param>
            <param name="Values">Values</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Insert.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.IResultSetEnumerator">
            <summary>
            Interface for result-set enumerators.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.MaxCountEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,System.Int32)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Count">Maximum number of records to enumerate.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.MaxCountEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.ObjectProperties">
            <summary>
            Object properties.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.#ctor(System.Object,Waher.Script.Variables)">
            <summary>
            Object properties.
            </summary>
            <param name="Object">Object</param>
            <param name="Variables">Variables</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.#ctor(System.Object,Waher.Script.Variables,System.Boolean)">
            <summary>
            Object properties.
            </summary>
            <param name="Object">Object</param>
            <param name="Variables">Variables</param>
            <param name="ReadOnly">If access to object properties is read-only (default=true).</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.ObjectProperties.Object">
            <summary>
            Current object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.Add(System.String,System.Object)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Associated variable object value.</param>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.OffsetEnumerator">
            <summary>
            Enumerator that skips a given number of result records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,System.Int32)">
            <summary>
            Enumerator that skips a given number of result records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Offset">Number of records to skip.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.OffsetEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.DeleteParser">
            <summary>
            Parses a DELETE statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DeleteParser.#ctor">
            <summary>
            Parses a DELETE statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DeleteParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.InsertParser">
            <summary>
            Parses an INSERT statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.InsertParser.#ctor">
            <summary>
            Parses an INSERT statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.InsertParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.ParserExtensions">
            <summary>
            Script Parser extensions
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.ParserExtensions.ParseNoWhiteSpace(Waher.Script.Model.ScriptParser)">
            <summary>
            Parses script until first whitespace character is found.
            </summary>
            <param name="Parser">Parser</param>
            <returns>Script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.SelectParser">
            <summary>
            Parses a SELECT statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.SelectParser.#ctor">
            <summary>
            Parses a SELECT statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.SelectParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.UpdateParser">
            <summary>
            Parses an UPDATE statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.UpdateParser.#ctor">
            <summary>
            Parses an UPDATE statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.UpdateParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.WildcardParser">
            <summary>
            Parses the Wildcard symbol *
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.WildcardParser.#ctor">
            <summary>
            Parses the Wildcard symbol *
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.WildcardParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Record">
            <summary>
            Represents one record.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.#ctor(Waher.Script.Abstraction.Elements.IElement[])">
            <summary>
            Represents one record.
            </summary>
            <param name="Elements">Elements in the record.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Record.Elements">
            <summary>
            Elements in the record.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.RecordEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Columns">Column definitions. Might be null if objects are to be returned.</param>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.RecordEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.RecordEnumerator.CurrentRecord">
            <summary>
            Current record
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Select">
            <summary>
            Executes a SELECT statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.#ctor(Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[],Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode,System.Collections.Generic.KeyValuePair{Waher.Script.Model.ScriptNode,System.Boolean}[],Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes a SELECT statement against the object database.
            </summary>
            <param name="Columns">Columns to select. If null, all columns are selected.</param>
            <param name="ColumnNames">Optional renaming of columns.</param>
            <param name="Source">Source(s) to select from.</param>
            <param name="Where">Optional where clause</param>
            <param name="GroupBy">Optional grouping</param>
            <param name="GroupByNames">Optional renaming of groups</param>
            <param name="Having">Optional Having clause</param>
            <param name="OrderBy">Optional ordering</param>
            <param name="Top">Optional limit on number of records to return</param>
            <param name="Offset">Optional offset into result set where reporting begins</param>
            <param name="Distinct">If only distinct (unique) rows are to be returned.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinition">
            <summary>
            Abstract base class for source definitions
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for source definitions
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.GetName(Waher.Script.Variables)">
            <summary>
            Gets the data source name, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source Name</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin">
            <summary>
            CROSS JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CROSS JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin">
            <summary>
            FULL [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            FULL [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin">
            <summary>
            [INNER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            [INNER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.Join">
            <summary>
            Abstract base class for joins of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for joins of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Left">
            <summary>
            Left source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Right">
            <summary>
            Right source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Conditions">
            <summary>
            Conditions linking the two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.GetName(Waher.Script.Variables)">
            <summary>
            Gets the data source name, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source Name</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin">
            <summary>
            LEFT [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LEFT [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin">
            <summary>
            RIGHT [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            RIGHT [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference">
            <summary>
            Direct reference to a data source.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Direct reference to a data source.
            </summary>
            <param name="Source">Source definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Direct reference to a data source.
            </summary>
            <param name="Source">Source definition.</param>
            <param name="Alias">Alias definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.GetName(Waher.Script.Variables)">
            <summary>
            Gets the data source name, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source Name</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.CollectionSource">
            <summary>
            Data Source defined by a collection name
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.#ctor(System.String,System.String)">
            <summary>
            Data Source defined by a collection name
            </summary>
            <param name="CollectionName">Collection Name</param>
            <param name="Alias">Alias for source.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.FindMethod">
            <summary>
            Generic object database Find method: <see cref="M:Waher.Persistence.Database.Find(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a set of objects.
            </summary>
            <param name="Objects">Objects to delete</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Insert(System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource">
            <summary>
            Data source formed through an INNER JOIN of two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,System.String,Waher.Script.Persistence.SQL.IDataSource,System.String,Waher.Script.Model.ScriptNode)">
            <summary>
            Data source formed through an INNER JOIN of two sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="LeftName">Name (or alias) of left source.</param>
            <param name="Right">Right source</param>
            <param name="RightName">Name (or alias) of right source.</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.JoinedSource">
            <summary>
            Abstract base classes of joined sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,System.String,Waher.Script.Persistence.SQL.IDataSource,System.String,Waher.Script.Model.ScriptNode)">
            <summary>
            Abstract base classes of joined sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="LeftName">Name (or alias) of left source.</param>
            <param name="Right">Right source</param>
            <param name="RightName">Name (or alias) of right source.</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Left">
            <summary>
            Left source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.LeftName">
            <summary>
            Name (or alias) of left source.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Right">
            <summary>
            Right source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.RightName">
            <summary>
            Name (or alias) of right source.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Conditions">
            <summary>
            Conditions for join.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a set of objects.
            </summary>
            <param name="Objects">Objects to delete</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Insert(System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Combine(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Combines one or two restrictions.
            </summary>
            <param name="Where">WHERE clause.</param>
            <param name="On">ON clause.</param>
            <returns>Combined restrictions.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Reduces a where clause to fit the current data source.
            </summary>
            <param name="Source">Data Source to which the expression is to be reduced.</param>
            <param name="Where">Where clause</param>
            <returns>Reduced where clause, fitting the data source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[])">
            <summary>
            Reduces a sort order clause to fit the current data source.
            </summary>
            <param name="Source">Data Source to which the order is to be reduced.</param>
            <param name="Order">Sort order</param>
            <returns>Reduced sort order.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.TypeSource">
            <summary>
            Data Source defined by a type definition
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.#ctor(System.Type,System.String)">
            <summary>
            Data Source defined by a type definition
            </summary>
            <param name="Type">Type definition</param>
            <param name="Alias">Optional alias for source.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.Type">
            <summary>
            Type definition
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.FindMethod">
            <summary>
            Generic object database Find method: <see cref="M:Waher.Persistence.Database.Find``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.WildcardToRegex(System.String,System.String)">
            <summary>
            Converts a wildcard string to a regular expression string.
            </summary>
            <param name="s">String</param>
            <param name="Wildcard">Wildcardd</param>
            <returns>Regular expression</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a set of objects.
            </summary>
            <param name="Objects">Objects to delete</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Insert(System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.VectorSource">
            <summary>
            Data Source defined by a vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.#ctor(System.String,System.String,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Data Source defined by a vector.
            </summary>
            <param name="Name">Name of source.</param>
            <param name="Alias">Alias for source.</param>
            <param name="Vector">Vector</param>
            <param name="Node">Node defining the vector.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.Vector">
            <summary>
            Vector
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Find(System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Update(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Delete(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Deletes a set of objects.
            </summary>
            <param name="Objects">Objects to delete</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Insert(System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Update">
            <summary>
            Executes an UPDATE statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Operators.Assignments.Assignment[],Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an UPDATE statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="SetOperations">Set operations to perform.</param>
            <param name="Where">Optional where clause</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Wildcard">
            <summary>
            Represents the Wildcard symbol *
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents the Wildcard symbol *
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.TypeConversion.CiStringToString">
            <summary>
            Converts case-insensitive strings to normal strings.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.CiStringToString.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.CiStringToString.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.Persistence.TypeConversion.StringToCiString">
            <summary>
            Converts normal strings to case-insensitive strings.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.StringToCiString.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.StringToCiString.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.From"/>.</exception>
        </member>
    </members>
</doc>
