<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Script.Persistence</name>
    </assembly>
    <members>
        <member name="T:Waher.Script.Persistence.Functions.DeleteObject">
            <summary>
            Deletes an object from the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.DeleteObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Deletes an object from the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.DeleteObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.DeleteObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.DeleteObject.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.DeleteObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.DeleteObject.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.FindObjects">
            <summary>
            Finds objects in the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.FindObjects.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Finds object in the object database.
            </summary>
            <param name="Type">Type</param>
            <param name="Offset">Offset</param>
            <param name="MaxCount">Maximum number of objects to return.</param>
            <param name="Filter">Search filter.</param>
            <param name="SortOrder">Sort order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.FindObjects.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.FindObjects.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.FindObjects.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.FindObjects.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.FindObjects.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.Generalize">
            <summary>
            Creates a generalized representation of an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Generalize.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Saves an object to the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.Generalize.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.Generalize.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.Generalize.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Generalize.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Generalize.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Generalize.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Generalizes the object in <paramref name="E"/>.
            </summary>
            <param name="E">Element</param>
            <returns>Generaized object.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Generalize.EvaluateAsync(System.Object)">
            <summary>
            Generalizes the object in <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>Generaized object.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.GetSetting">
            <summary>
            Gets a runtime setting with name `Name`. If one is not found, the `DefaultValue` value is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.GetSetting.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Gets a runtime setting with name `Name`. If one is not found, the `DefaultValue` value is returned.
            </summary>
            <param name="Name">Name of runtime setting parameter.</param>
            <param name="DefaultValue">Default value, if setting not found.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.GetSetting.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.GetSetting.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.GetSetting.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.GetSetting.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.GetSetting.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.GetSetting.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.GetSetting.EvaluateScalarAsync(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.Pivot">
            <summary>
            Pivots a result matrix so columns become rows, and vice versa. It is similar to the matrix transpose operator, except it takes
            column headers into account also.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Pivot.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Pivots a result matrix so columns become rows, and vice versa. It is similar to the matrix transpose operator, except it takes
            column headers into account also.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.Pivot.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.Pivot.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.Pivot.EvaluateMatrix(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.SaveNewObject">
            <summary>
            Saves an object to the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SaveNewObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Saves an object to the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SaveNewObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SaveNewObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SaveNewObject.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SaveNewObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SaveNewObject.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.SetSetting">
            <summary>
            Sets a runtime setting with name `Name` to the value `Value`.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SetSetting.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sets a runtime setting with name `Name` to the value `Value`.
            </summary>
            <param name="Name">Name of runtime setting parameter.</param>
            <param name="Value">Default value, if setting not found.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SetSetting.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SetSetting.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.SetSetting.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SetSetting.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SetSetting.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SetSetting.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.SetSetting.EvaluateScalarAsync(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.UpdateObject">
            <summary>
            Updates an object in the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.UpdateObject.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Updates an object in the object database.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.UpdateObject.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.UpdateObject.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.UpdateObject.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.UpdateObject.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.UpdateObject.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Functions.XPath">
            <summary>
            Node repesenting an XPath expression
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Node repesenting an XPath expression
            </summary>
            <param name="XPath">XPath expression.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Node repesenting an XPath expression
            </summary>
            <param name="XPath">XPath expression.</param>
            <param name="ExtractValue">If the goal of the XPATH is to extract a value.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.XPath.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.XPath.XPathExpression">
            <summary>
            XPATH expression
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.Functions.XPath.ExtractValue">
            <summary>
            If the value should be extracted.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Functions.XPath.ToElement(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Encapsulates an XML Node for use in script.
            </summary>
            <param name="Node">XML Node</param>
            <param name="ExtractValue">If the goal of the XPATH is to extract a value.</param>
            <returns>Script element.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Output.CaseInsensitiveStringOutput">
            <summary>
            Converts values of type <see cref="T:Waher.Persistence.CaseInsensitiveString"/> to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Output.CaseInsensitiveStringOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Output.CaseInsensitiveStringOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Output.GenericObjectOutput">
            <summary>
            Converts values of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Output.GenericObjectOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Output.GenericObjectOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.Output.GenericObjectPropertyEnumerator">
            <summary>
            Enumerates properties in a <see cref="T:Waher.Persistence.Serialization.GenericObject"/> object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Output.GenericObjectPropertyEnumerator.#ctor">
            <summary>
            Enumerates properties in a <see cref="T:Waher.Persistence.Serialization.GenericObject"/> object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.Output.GenericObjectPropertyEnumerator.EnumerateProperties(System.Object)">
            <summary>
            Enumerates the properties of an object (of a type it supports).
            </summary>
            <param name="Object">Object</param>
            <returns>Property enumeration as a script element.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.Output.GenericObjectPropertyEnumerator.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Functions.Asc">
            <summary>
            Orders in ascending order
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Asc.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Ascending argument
            </summary>
            <param name="Argument">Argument to order on.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Functions.Asc.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Asc.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Asc.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Asc.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Functions.Desc">
            <summary>
            Orders in descending order
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Desc.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Descending argument
            </summary>
            <param name="Argument">Argument to order on.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Functions.Desc.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Desc.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Desc.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.Desc.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions">
            <summary>
            Extension of the Like operator, that allows the script to set options.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Extension of the Like operator, that allows the script to set options.
            </summary>
            <param name="Argument1">Left argument</param>
            <param name="Argument2">Right argument</param>
            <param name="Argument3">Options argument</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.CalcIsAsync">
            <summary>
            Recalculates if operator is asynchronous or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.LikeWithOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Functions.ScriptValueNode">
            <summary>
            Makes sure a semantic literal is reduced to its element value.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.ScriptValueNode.#ctor(Waher.Script.Model.ScriptNode)">
            <summary>
            Makes sure a semantic literal is reduced to its element value.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Functions.ScriptValueNode.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.ScriptValueNode.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Functions.ScriptValueNode.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.NamedNode">
            <summary>
            Represents a named node.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.NamedNode.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a named node.
            </summary>
            <param name="Left">Value node</param>
            <param name="Right">Name node</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.NamedNode.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.NamedNode.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.OrderResultSet">
            <summary>
            Comparer for ordering a SPARQL result set.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.OrderResultSet.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Boolean}[])">
            <summary>
            Comparer for ordering a SPARQL result set.
            </summary>
            <param name="OrderBy">Order by-statement, containing a vector
            of variable names, and corresponding ascending (true) or
            descending (false) direction.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.OrderResultSet.Compare(Waher.Content.Semantic.SparqlResultRecord,Waher.Content.Semantic.SparqlResultRecord)">
            <summary>
            Compares two records.
            </summary>
            <param name="x">Record 1</param>
            <param name="y">Record 2</param>
            <returns>
            Negative, if Record 1 is less than Record 2
            Zero, if records are equal
            Positive, if Record 1 is greated than Record 2
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser">
            <summary>
            Parses a SPARQL statement
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.RefInstance">
            <summary>
            Reference instance of SPARQL parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.#ctor(System.String)">
            <summary>
            Parses a SPARQL statement
            </summary>
            <param name="Preamble">Preamble that needs to be re-parsed.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk">
            <summary>
            Parses a SPARQL statement that begins with the ASK keyword.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk.#ctor">
            <summary>
            Parses a SPARQL statement that begins with the ASK keyword.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserAsk.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase">
            <summary>
            Parses a SPARQL statement that begins with the BASE keyword.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase.#ctor">
            <summary>
            Parses a SPARQL statement that begins with the BASE keyword.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserBase.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct">
            <summary>
            Parses a SPARQL statement that begins with the CONSTRUCT keyword.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct.#ctor">
            <summary>
            Parses a SPARQL statement that begins with the CONSTRUCT keyword.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserConstruct.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix">
            <summary>
            Parses a SPARQL statement that begins with the PREFIX keyword.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix.#ctor">
            <summary>
            Parses a SPARQL statement that begins with the PREFIX keyword.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Parsers.SparqlParserPrefix.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.Possibility">
            <summary>
            Represents a possible solution during SPARQL evaluation.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Possibility.#ctor(System.String,Waher.Content.Semantic.ISemanticElement)">
            <summary>
            Represents a possible solution during SPARQL evaluation.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Value">Variable value.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Possibility.#ctor(System.String,Waher.Content.Semantic.ISemanticElement,Waher.Script.Persistence.SPARQL.Possibility)">
            <summary>
            Represents a possible solution during SPARQL evaluation.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Value">Variable value.</param>
            <param name="NextVariable">Previous linked list of variables in possibility.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Possibility.VariableName">
            <summary>
            Name of variable.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Possibility.Value">
            <summary>
            Variable value.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Possibility.NextVariable">
            <summary>
            Previous possiblity
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.Possibility.Item(System.String)">
            <summary>
            Access to possible variable values, given a variable name.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>Value of variable, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Possibility.GetValue(System.String)">
            <summary>
            Access to possible variable values, given a variable name.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>Value of variable, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.Possibility.ToString">
            <summary>
            Shows the collection of possible values as a string.
            </summary>
            <returns>String representation of possibilty.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.QueryTripleType">
            <summary>
            Type of query triple
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.SubjectVariable">
            <summary>
            Subject is a variable
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.PredicateVariable">
            <summary>
            Predicate is a variable
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.SubjectPredicateVariables">
            <summary>
            Subject and predicate are variables
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.ObjectVariable">
            <summary>
            Object is a variable
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.SubjectObjectVariable">
            <summary>
            Subject and object are variables
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.PredicateObjectVariable">
            <summary>
            Predicate and object are variables
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.QueryTripleType.SubjectPredicateObjectVariable">
            <summary>
            Subject, predicate and object are variables
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.SemanticQueryTriple">
            <summary>
            Semantic query triple
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.#ctor(Waher.Content.Semantic.ISemanticTriple)">
            <summary>
            Semantic query triple
            </summary>
            <param name="Triple">Triple</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.#ctor(Waher.Content.Semantic.ISemanticElement,Waher.Content.Semantic.ISemanticElement,Waher.Content.Semantic.ISemanticElement)">
            <summary>
            Semantic query triple
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.Subject">
            <summary>
            Subject element
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.Predicate">
            <summary>
            Predicate element
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.Object">
            <summary>
            Object element
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.SubjectIsVariable">
            <summary>
            If the Subject element is a variable reference.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.PredicateIsVariable">
            <summary>
            If the Predicate element is a variable reference.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.ObjectIsVariable">
            <summary>
            If the Object element is a variable reference.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.SubjectVariable">
            <summary>
            Subject element variable name, if any
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.PredicateVariable">
            <summary>
            Predicate element variable name, if any
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.ObjectVariable">
            <summary>
            Object element variable name, if any
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.Type">
            <summary>
            Type of triple
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.Item(System.Int32)">
            <summary>
            Access to elements: 0=Subject, 1=Predicate, 2=Object.
            </summary>
            <param name="Index">Axis index.</param>
            <returns>Semantic element.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticQueryTriple.VariableName(System.Int32)">
            <summary>
            Gets a variable name, given the axis index: 0=Subject, 1=Predicate, 2=Object.
            </summary>
            <param name="Index">Axis index.</param>
            <returns>Variable name.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.SemanticScriptElement">
            <summary>
            Semantic element based on script.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticScriptElement.#ctor(Waher.Script.Model.ScriptNode)">
            <summary>
            Semantic element based on script.
            </summary>
            <param name="Node">Script definition of semantic element.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticScriptElement.Node">
            <summary>
            Script definition.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticScriptElement.Tag">
            <summary>
            Property used by processor, to tag information to an element.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticScriptElement.IsLiteral">
            <summary>
            If element is a literal.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SemanticScriptElement.ElementValue">
            <summary>
            Underlying element value represented by the semantic element.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticScriptElement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticScriptElement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticScriptElement.CompareTo(System.Object)">
            <summary>
            Compares element to another.
            </summary>
            <param name="obj">Second element.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SemanticScriptElement.ForAll(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.PatternGroupType">
            <summary>
            Type of pattern group
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.PatternGroupType.Regular">
            <summary>
            Regular group
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.PatternGroupType.Optional">
            <summary>
            Optional group
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.PatternGroupType.Union">
            <summary>
            Union group
            </summary>
        </member>
        <member name="F:Waher.Script.Persistence.SPARQL.PatternGroupType.Minus">
            <summary>
            Subtraction group
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.SparqlPattern">
            <summary>
            Represents a pattern in a SPARQL query.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.#ctor(Waher.Script.Persistence.SPARQL.PatternGroupType)">
            <summary>
            Represents a pattern in a SPARQL query.
            </summary>
            <param name="PatternType">Type of group pattern</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.Triples">
            <summary>
            Triples, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.BoundVariables">
            <summary>
            Bound variables, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.Filter">
            <summary>
            Filter, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.SubPatterns">
            <summary>
            Sub-patterns, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.HasTriples">
            <summary>
            If pattern has triples
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.HasBoundVariables">
            <summary>
            If pattern has bound variables
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.HasFilter">
            <summary>
            If pattern has filter
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.HasSubPatterns">
            <summary>
            If pattern has sub-patterns
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlPattern.PatternType">
            <summary>
            Type of group pattern.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.AddTriple(Waher.Script.Persistence.SPARQL.SemanticQueryTriple)">
            <summary>
            Adds a triple to the pattern
            </summary>
            <param name="Triple">Triple</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.AddVariableBinding(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Adds a variable binding to the pattern.
            </summary>
            <param name="Value">Value to bind.</param>
            <param name="Variable">Variable to bind to.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.AddFilter(Waher.Script.Model.ScriptNode)">
            <summary>
            Adds a filter to the pattern.
            </summary>
            <param name="Filter">Filter.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.AddSubPattern(Waher.Script.Persistence.SPARQL.SparqlPattern)">
            <summary>
            Adds a sub-pattern to the pattern.
            </summary>
            <param name="Pattern">Sub-pattern.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.Search(Waher.Content.Semantic.ISemanticCube,Waher.Script.Variables,Waher.Script.Persistence.SPARQL.SparqlQuery)">
            <summary>
            Searches for the pattern on information in a semantic cube.
            </summary>
            <param name="Cube">Semantic cube.</param>
            <param name="Variables">Script variables.</param>
            <param name="Query">SPARQL-query being executed.</param>
            <returns>Matches.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.Search(Waher.Content.Semantic.ISemanticCube,Waher.Script.Variables,System.Collections.Generic.Dictionary{System.String,System.Boolean},Waher.Script.Persistence.SPARQL.SparqlQuery)">
            <summary>
            Searches for the pattern on information in a semantic cube.
            </summary>
            <param name="Cube">Semantic cube.</param>
            <param name="Variables">Script variables.</param>
            <param name="VariablesProcessed">Variables that have been processed</param>
            <param name="Query">SPARQL-query being executed.</param>
            <returns>Matches.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.Search(Waher.Content.Semantic.ISemanticCube,Waher.Script.Variables,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Collections.Generic.IEnumerable{Waher.Script.Persistence.SPARQL.Possibility},Waher.Script.Persistence.SPARQL.SparqlQuery)">
            <summary>
            Searches for the pattern on information in a semantic cube.
            </summary>
            <param name="Cube">Semantic cube.</param>
            <param name="Variables">Script variables.</param>
            <param name="VariablesProcessed">Variables that have been processed</param>
            <param name="ExistingMatches">Existing matches.</param>
            <param name="Query">SPARQL-query being executed.</param>
            <returns>Matches.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.ForAll(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlPattern.SetParent(Waher.Script.Model.ScriptNode)">
            <summary>
            Sets the parent node. Can only be used when expression is being parsed.
            </summary>
            <param name="Parent">Parent Node</param>
        </member>
        <member name="T:Waher.Script.Persistence.SPARQL.SparqlQuery">
            <summary>
            Executes a SELECT statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.#ctor(System.Boolean,Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode,Waher.Script.Persistence.SPARQL.SparqlPattern,System.Collections.Generic.KeyValuePair{Waher.Script.Model.ScriptNode,System.Boolean}[],Waher.Script.Persistence.SPARQL.SparqlPattern,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes a SPARQL SELECT statement.
            </summary>
            <param name="Distinct">If only distinct (unique) rows are to be returned.</param>
            <param name="Columns">Columns to select.</param>
            <param name="ColumnNames">Names of selected columns.</param>
            <param name="From">Data source.</param>
            <param name="Where">Optional where clause</param>
            <param name="OrderBy">Order to present result set.</param>
            <param name="Construct">Triples to construct.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SPARQL.SparqlQuery.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SPARQL.SparqlQuery.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SPARQL.SparqlQuery.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.ConditionalEnumerator">
            <summary>
            Enumerator that only returns elements matching a set of conditions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,Waher.Script.Model.ScriptNode)">
            <summary>
            Enumerator that only returns elements matching a set of conditions.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Conditions">Set of conditions that must be fulfilled.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.ConditionalEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.MoveNextAsync">
            <summary>
            <see cref="M:Waher.Persistence.IAsyncEnumerator.MoveNextAsync"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ConditionalEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.CreateIndex">
            <summary>
            Executes an CREATE INDEX ... ON ... (...) statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode[],System.Boolean[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an CREATE INDEX ... ON ... (...) statement against the object database.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Source">Source to create index in.</param>
            <param name="Columns">Columns</param>
            <param name="Ascending">If columns are escending (true) or descending (false).</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.CreateIndex.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.CreateIndex.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CreateIndex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.CustomOrderEnumerator">
            <summary>
            Enumerator that reorders a sequence of items.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.ScriptNode,System.Boolean}[])">
            <summary>
            Enumerator that reorders a sequence of items.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Custom order.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.CustomOrderEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.MoveNextAsync">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.CustomOrderEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Delete">
            <summary>
            Executes a DELETE statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes a DELETE statement against the object database.
            </summary>
            <param name="Source">Source to delete from.</param>
            <param name="Where">Optional where clause</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Delete.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.Delete.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Delete.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.DistinctEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Columns">Column definitions. Might be null if objects are to be returned.</param>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DistinctEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.DropCollection">
            <summary>
            Executes an DROP INDEX ... ON ... statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an DROP COLLECTION|TABLE ... statement against the object database.
            </summary>
            <param name="Source">Source to create index in.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.DropCollection.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.DropCollection.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropCollection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.DropIndex">
            <summary>
            Executes an DROP INDEX ... ON ... statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Persistence.SQL.SourceDefinition,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an DROP INDEX ... ON ... statement against the object database.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Source">Source to create index in.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.DropIndex.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.DropIndex.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.DropIndex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator">
            <summary>
            Enumerator that adds fields to enumerated items.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{System.String,Waher.Script.Model.ScriptNode}[])">
            <summary>
            Enumerator that adds fields to enumerated items.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables</param>
            <param name="AdditionalFields">Fields to add to enumerated items.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.FieldAggregatorEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Groups.GroupEnumerator">
            <summary>
            Enumerator that groups items into groups, and returns aggregated elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Groups.GroupEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Variables,Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[])">
            <summary>
            Enumerator that groups items into groups, and returns aggregated elements.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Variables">Current set of variables</param>
            <param name="GroupBy">Group on these fields</param>
            <param name="GroupNames">Names given to grouped fields</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Groups.GroupEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Groups.GroupEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Groups.GroupEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Groups.GroupEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Groups.GroupObject">
            <summary>
            Represents a collection of objects grouped together useing a GROUP BY construct.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Groups.GroupObject.#ctor(System.Object[],System.Object[],Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Represents a collection of objects grouped together useing a GROUP BY construct.
            </summary>
            <param name="Objects">Objects</param>
            <param name="GroupByValues">Grouped values that are constant in the group.</param>
            <param name="GroupNames">Names of the grouped values.</param>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Groups.GroupObject.Item(System.String)">
            <summary>
            Access to grouped properties.
            </summary>
            <param name="Name">Named property</param>
            <returns></returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Groups.GroupObject.Count">
            <summary>
            Number of objects in group.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Groups.GroupObject.Objects">
            <summary>
            Objects in group.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.IDataSource">
            <summary>
            Interface for data sources that can be used in SQL statements.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.IDataSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.IDataSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.IDataSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.IDataSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.InsertObjects">
            <summary>
            Executes an INSERT ... OBJECT[S] ... statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Operators.ElementList,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an INSERT ... OBJECT[S] ... statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="Objects">Objects</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.InsertObjects.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.InsertObjects.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertObjects.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.InsertSelect">
            <summary>
            Executes an INSERT SELECT statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.Select,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an INSERT SELECT statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="Select">SELECT statement.</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.InsertSelect.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.InsertSelect.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertSelect.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.InsertValues">
            <summary>
            Executes an INSERT ... VALUES ... statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Operators.ElementList,Waher.Script.Operators.ElementList,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an INSERT ... VALUES ... statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="Columns">Columns</param>
            <param name="Values">Values</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.InsertValues.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.InsertValues.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.GetNameAsync(Waher.Script.Model.ScriptNode,Waher.Script.Variables)">
            <summary>
            Gets a name from a script node, either by using the name of a variable reference, or evaluating the node to a string.
            </summary>
            <param name="Node">Node</param>
            <param name="Variables">Variables</param>
            <returns>Name</returns>
            <exception cref="T:Waher.Script.Exceptions.ScriptRuntimeException">If node is not a variable reference, or does not evaluate to a string value.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.InsertValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.IResultSetEnumerator">
            <summary>
            Interface for result-set enumerators.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.MaxCountEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,System.Int32)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Count">Maximum number of records to enumerate.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.MaxCountEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.MaxCountEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.ObjectProperties">
            <summary>
            Object properties.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.#ctor(System.Object,Waher.Script.Variables)">
            <summary>
            Object properties.
            </summary>
            <param name="Object">Object</param>
            <param name="ContextVariables">Context Variables</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.#ctor(System.Object,Waher.Script.Variables,System.Boolean)">
            <summary>
            Object properties.
            </summary>
            <param name="Object">Object</param>
            <param name="ContextVariables">Context Variables</param>
            <param name="ReadOnly">If access to object properties is read-only (default=true).</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.ObjectProperties.Object">
            <summary>
            Current object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value, given its variable name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Value, if found, or null otherwise.</param>
            <returns>If a property or variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.ObjectProperties.Add(System.String,System.Object)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Associated variable object value.</param>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.OffsetEnumerator">
            <summary>
            Enumerator that skips a given number of result records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,System.Int32)">
            <summary>
            Enumerator that skips a given number of result records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Offset">Number of records to skip.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.OffsetEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.OffsetEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.CreateParser">
            <summary>
            Parses a CREATE statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.CreateParser.#ctor">
            <summary>
            Parses a CREATE statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.CreateParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.CreateParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.CreateParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.CreateParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.DeleteParser">
            <summary>
            Parses a DELETE statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DeleteParser.#ctor">
            <summary>
            Parses a DELETE statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DeleteParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DeleteParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.DropParser">
            <summary>
            Parses a DROP statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DropParser.#ctor">
            <summary>
            Parses a DROP statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DropParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DropParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.DropParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.DropParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.InsertParser">
            <summary>
            Parses an INSERT statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.InsertParser.#ctor">
            <summary>
            Parses an INSERT statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.InsertParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.InsertParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.ParserExtensions">
            <summary>
            Script Parser extensions
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.ParserExtensions.ParseNoWhiteSpace(Waher.Script.Model.ScriptParser)">
            <summary>
            Parses script until first whitespace character is found.
            </summary>
            <param name="Parser">Parser</param>
            <returns>Script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.SelectParser">
            <summary>
            Parses a SELECT statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.SelectParser.#ctor">
            <summary>
            Parses a SELECT statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.SelectParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.SelectParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.UpdateParser">
            <summary>
            Parses an UPDATE statement
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.UpdateParser.#ctor">
            <summary>
            Parses an UPDATE statement
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.UpdateParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.UpdateParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Parsers.WildcardParser">
            <summary>
            Parses the Wildcard symbol *
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.WildcardParser.#ctor">
            <summary>
            Parses the Wildcard symbol *
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Parsers.WildcardParser.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Parsers.WildcardParser.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Record">
            <summary>
            Represents one record.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.#ctor(Waher.Script.Abstraction.Elements.IElement[])">
            <summary>
            Represents one record.
            </summary>
            <param name="Elements">Elements in the record.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Record.Elements">
            <summary>
            Elements in the record.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Record.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.RecordEnumerator">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.#ctor(Waher.Script.Persistence.SQL.IResultSetEnumerator,Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Enumerator that limits the return set to a maximum number of records.
            </summary>
            <param name="ItemEnumerator">Item enumerator</param>
            <param name="Columns">Column definitions. Might be null if objects are to be returned.</param>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.RecordEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.RecordEnumerator.CurrentRecord">
            <summary>
            Current record
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.MoveNextAsync">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.RecordEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Select">
            <summary>
            Executes a SELECT statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.#ctor(Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[],Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNode,System.Collections.Generic.KeyValuePair{Waher.Script.Model.ScriptNode,System.Boolean}[],Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes a SELECT statement against the object database.
            </summary>
            <param name="Columns">Columns to select. If null, all columns are selected.</param>
            <param name="ColumnNames">Optional renaming of columns.</param>
            <param name="Source">Source(s) to select from.</param>
            <param name="Where">Optional where clause</param>
            <param name="GroupBy">Optional grouping</param>
            <param name="GroupByNames">Optional renaming of groups</param>
            <param name="Having">Optional Having clause</param>
            <param name="OrderBy">Optional ordering</param>
            <param name="Top">Optional limit on number of records to return</param>
            <param name="Offset">Optional offset into result set where reporting begins</param>
            <param name="Distinct">If only distinct (unique) rows are to be returned.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Select.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.Select.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Select.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinition">
            <summary>
            Abstract base class for source definitions
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for source definitions
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin">
            <summary>
            CROSS JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CROSS JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.CrossJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin">
            <summary>
            FULL [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            FULL [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.FullOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin">
            <summary>
            [INNER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            [INNER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.InnerJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.Join">
            <summary>
            Abstract base class for joins of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for joins of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Left">
            <summary>
            Left source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Right">
            <summary>
            Right source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Conditions">
            <summary>
            Conditions linking the two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.Join.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin">
            <summary>
            LEFT [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LEFT [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.LeftOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin">
            <summary>
            RIGHT [OUTER] JOIN of two source definitions.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            RIGHT [OUTER] JOIN of two source definitions.
            </summary>
            <param name="Left">Left source definition.</param>
            <param name="Right">Right source definition.</param>
            <param name="Conditions">Join conditions.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.RightOuterJoin.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference">
            <summary>
            Direct reference to a data source.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Direct reference to a data source.
            </summary>
            <param name="Source">Source definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Direct reference to a data source.
            </summary>
            <param name="Source">Source definition.</param>
            <param name="Alias">Alias definition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.GetSource(Waher.Script.Variables)">
            <summary>
            Gets the actual data source, from its definition.
            </summary>
            <param name="Variables">Current set of variables.</param>
            <returns>Data Source</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SourceDefinitions.SourceReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.CollectionSource">
            <summary>
            Data Source defined by a collection name
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.#ctor(System.String,System.String)">
            <summary>
            Data Source defined by a collection name
            </summary>
            <param name="CollectionName">Collection Name</param>
            <param name="Alias">Alias for source.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.CollectionSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
            <returns>If an index was found and dropped.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.CollectionSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.FullOuterJoinedSource">
            <summary>
            Data source formed through an (FULL [OUTER]|OUTER) JOIN of two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.FullOuterJoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Data source formed through an (FULL [OUTER]|OUTER) JOIN of two sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="Right">Right source</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.FullOuterJoinedSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource">
            <summary>
            Data source formed through an INNER JOIN of two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Data source formed through an INNER JOIN of two sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="Right">Right source</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.InnerJoinedSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.JoinedObject">
            <summary>
            Represents a joined object.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedObject.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            Represents a joined object.
            </summary>
            <param name="Left">Left object</param>
            <param name="LeftName">Name of left source.</param>
            <param name="Right">Right object</param>
            <param name="RightName">Name of right source.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedObject.Item(System.String)">
            <summary>
            Gets property of field values from the joined object.
            </summary>
            <param name="Index">Property or field name.</param>
            <returns>Property or field value, if exists; null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedObject.ObjectId">
            <summary>
            Joined Object ID
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.JoinedSource">
            <summary>
            Abstract base classes of joined sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Abstract base classes of joined sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="Right">Right source</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Left">
            <summary>
            Left source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Right">
            <summary>
            Right source
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Conditions">
            <summary>
            Conditions for join.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.JoinedSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Combine(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Combines one or two restrictions.
            </summary>
            <param name="Where">WHERE clause.</param>
            <param name="On">ON clause.</param>
            <returns>Combined restrictions.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Reduces a where clause to fit the current data source.
            </summary>
            <param name="Source">Data Source to which the expression is to be reduced.</param>
            <param name="Where">Where clause</param>
            <returns>Reduced where clause, fitting the data source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Reduces a where clause to fit the current data sources.
            </summary>
            <param name="Source">Data Source to which the expression is to be reduced.</param>
            <param name="Source2">Optional second source.</param>
            <param name="Where">Where clause</param>
            <returns>Reduced where clause, fitting the data sources.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode,System.Int32)">
            <summary>
            Reduces a where clause to fit the current data source.
            </summary>
            <param name="Source">Data Source to which the expression is to be reduced.</param>
            <param name="Source2">Optional second source.</param>
            <param name="Where">Where clause</param>
            <param name="Mask">Source mask.</param>
            <returns>Reduced where clause, fitting the data source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.Reduce(Waher.Script.Persistence.SQL.IDataSource,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[])">
            <summary>
            Reduces a sort order clause to fit the current data source.
            </summary>
            <param name="Source">Data Source to which the order is to be reduced.</param>
            <param name="Order">Sort order</param>
            <returns>Reduced sort order.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
            <returns>If an index was found and dropped.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.JoinedSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.LeftOuterJoinedSource">
            <summary>
            Data source formed through an LEFT [OUTER] JOIN of two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.LeftOuterJoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Data source formed through an LEFT [OUTER] JOIN of two sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="Right">Right source</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.LeftOuterJoinedSource.Flipped">
            <summary>
            If sources should be flipped in the <see cref="T:Waher.Script.Persistence.SQL.Sources.JoinedObject"/> instances created.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.LeftOuterJoinedSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.RightOuterJoinedSource">
            <summary>
            Data source formed through an RIGHT [OUTER] JOIN of two sources.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.RightOuterJoinedSource.#ctor(Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Persistence.SQL.IDataSource,Waher.Script.Model.ScriptNode)">
            <summary>
            Data source formed through an RIGHT [OUTER] JOIN of two sources.
            </summary>
            <param name="Left">Left source</param>
            <param name="Right">Right source</param>
            <param name="Conditions">Conditions for join.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.RightOuterJoinedSource.Flipped">
            <summary>
            If sources should be flipped in the <see cref="T:Waher.Script.Persistence.SQL.Sources.JoinedObject"/> instances created.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.TypeSource">
            <summary>
            Data Source defined by a type definition
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.#ctor(System.Type,System.String)">
            <summary>
            Data Source defined by a type definition
            </summary>
            <param name="Type">Type definition</param>
            <param name="Alias">Optional alias for source.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.Type">
            <summary>
            Type definition
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.FindMethod">
            <summary>
            Generic object database Find method: <see cref="M:Waher.Persistence.Database.Find``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.FindMethodGeneric">
            <summary>
            Generic object database Find method: <see cref="M:Waher.Persistence.Database.Find``1(System.String,System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.FindDeleteMethod">
            <summary>
            Generic object database FindDelete method: <see cref="M:Waher.Persistence.Database.FindDelete``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.DeleteLazyMethod">
            <summary>
            Generic object database DeleteLazy method: <see cref="M:Waher.Persistence.Database.DeleteLazy``1(System.Int32,System.Int32,Waher.Persistence.Filters.Filter,System.String[])"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.TypeSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
            <returns>If an index was found and dropped.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.TypeSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.VectorSource">
            <summary>
            Data Source defined by a vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.#ctor(System.String,System.String,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Data Source defined by a vector.
            </summary>
            <param name="Name">Name of source.</param>
            <param name="Alias">Alias for source.</param>
            <param name="Vector">Vector</param>
            <param name="Node">Node defining the vector.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.Vector">
            <summary>
            Vector
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.VectorSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
            <returns>If an index was found and dropped.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.VectorSource.ToGenericObjectVector(Waher.Script.Objects.Matrices.ObjectMatrix)">
            <summary>
            Converts an object matrix, with named columns, to a vector of
            objects ex nihilo.
            </summary>
            <param name="ResultSet">Result set</param>
            <returns>Object vector.</returns>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Sources.XmlSource">
            <summary>
            Data Source defined by XML.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.#ctor(System.String,System.String,System.Xml.XmlDocument,Waher.Script.Model.ScriptNode)">
            <summary>
            Data Source defined by XML.
            </summary>
            <param name="Name">Name of source.</param>
            <param name="Alias">Alias for source.</param>
            <param name="Xml">XML</param>
            <param name="Node">Node defining the vector.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.#ctor(System.String,System.String,System.Xml.XmlNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Data Source defined by XML.
            </summary>
            <param name="Name">Name of source.</param>
            <param name="Alias">Alias for source.</param>
            <param name="Xml">XML</param>
            <param name="Node">Node defining the vector.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.Find(System.Int32,System.Int32,System.Boolean,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds objects matching filter conditions in <paramref name="Where"/>.
            </summary>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Generic">If objects of type <see cref="T:Waher.Persistence.Serialization.GenericObject"/> should be returned.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.Update(System.Boolean,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Updates a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Objects">Objects to update</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.FindDelete(System.Boolean,System.Int32,System.Int32,Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Collections.Generic.KeyValuePair{Waher.Script.Model.VariableReference,System.Boolean}[],Waher.Script.Model.ScriptNode)">
            <summary>
            Finds and Deletes a set of objects.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Offset">Offset at which to return elements.</param>
            <param name="Top">Maximum number of elements to return.</param>
            <param name="Where">Filter conditions.</param>
            <param name="Variables">Current set of variables.</param>
            <param name="Order">Order at which to order the result set.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Number of objects deleted, if known.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.Insert(System.Boolean,System.Object)">
            <summary>
            Inserts an object.
            </summary>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Object">Object to insert.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.XmlSource.CollectionName">
            <summary>
            Name of corresponding collection.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.XmlSource.TypeName">
            <summary>
            Name of corresponding type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Sources.XmlSource.Name">
            <summary>
            Collection name or alias.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.IsSource(System.String)">
            <summary>
            Checks if the name refers to the source.
            </summary>
            <param name="Name">Name to check.</param>
            <returns>If the name refers to the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.IsLabel(System.String)">
            <summary>
            Checks if the label is a label in the source.
            </summary>
            <param name="Label">Label</param>
            <returns>If the label is a label in the source.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.CreateIndex(System.String,System.String[])">
            <summary>
            Creates an index in the source.
            </summary>
            <param name="Name">Name of index.</param>
            <param name="Fields">Field names. Prefix with hyphen (-) to define descending order.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.DropIndex(System.String)">
            <summary>
            Drops an index from the source.
            </summary>
            <param name="Name">Name of index.</param>
            <returns>If an index was found and dropped.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Sources.XmlSource.DropCollection">
            <summary>
            Drops the collection from the source.
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.SynchEnumerator">
            <summary>
            Synchronous enumerator
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SynchEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Synchronous enumerator
            </summary>
            <param name="e">Underlying enumerator.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.SynchEnumerator.Current">
            <summary>
            Current item.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SynchEnumerator.MoveNext">
            <summary>
            Tries to move to next item.
            </summary>
            <returns>If successful</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SynchEnumerator.MoveNextAsync">
            <summary>
            Tries to move to next item.
            </summary>
            <returns>If successful</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.SynchEnumerator.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Update">
            <summary>
            Executes an UPDATE statement against the object database.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.#ctor(Waher.Script.Persistence.SQL.SourceDefinition,Waher.Script.Operators.Assignments.Assignment[],Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes an UPDATE statement against the object database.
            </summary>
            <param name="Source">Source to update objects from.</param>
            <param name="SetOperations">Set operations to perform.</param>
            <param name="Where">Optional where clause</param>
            <param name="Lazy">If operation can be completed at next opportune time.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Persistence.SQL.Update.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Persistence.SQL.Update.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Update.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.SQL.Wildcard">
            <summary>
            Represents the Wildcard symbol *
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents the Wildcard symbol *
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Persistence.SQL.Wildcard.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Persistence.TypeConversion.CiStringToString">
            <summary>
            Converts case-insensitive strings to normal strings.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.CiStringToString.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.CiStringToString.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.CiStringToString.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.CiStringToString.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.Persistence.TypeConversion.StringToCiString">
            <summary>
            Converts normal strings to case-insensitive strings.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.StringToCiString.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.StringToCiString.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.Persistence.TypeConversion.StringToCiString.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.Persistence.TypeConversion.StringToCiString.From"/>.</exception>
        </member>
    </members>
</doc>
