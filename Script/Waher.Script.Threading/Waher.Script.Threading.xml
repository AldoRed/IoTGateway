<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Script.Threading</name>
    </assembly>
    <members>
        <member name="T:Waher.Script.Threading.Functions.Abort">
            <summary>
            Aborts the background processing of script
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Abort.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Aborts the background processing of script
            </summary>
            <param name="Milliseconds">Number of milliseconds to sleep.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Abort.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Abort.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Abort.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Abort.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Threading.Functions.Background">
            <summary>
            Executes the provided script asynchronously in the background.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes the provided script asynchronously in the background.
            </summary>
            <param name="Script">Script to execute in the background.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Background.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Background.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.EvaluateInBackground(Waher.Script.Expression,Waher.Script.Variables,System.Boolean)">
            <summary>
            Evaluates script in the background.
            </summary>
            <param name="Script">Script to evaluate.</param>
            <param name="Variables">Set of variables.</param>
            <param name="CatchAndLogExceptions">If exceptions should be caught and logged (true), or passed on to the awaiting task (false).</param>
            <returns>ID that can be used to abort process, as well as a Task object that can be awaited, for the result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.EvaluateInBackground(Waher.Script.Model.ScriptNode,Waher.Script.Variables,System.Boolean)">
            <summary>
            Evaluates script in the background.
            </summary>
            <param name="Node">Script to evaluate.</param>
            <param name="Variables">Set of variables.</param>
            <param name="CatchAndLogExceptions">If exceptions should be caught and logged (true), or passed on to the awaiting task (false).</param>
            <returns>ID that can be used to abort process, as well as a Task object that can be awaited, for the result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.AbortBackgroundTask(System.Guid)">
            <summary>
            Aborts a background task, earlier started by calling EvaluateInBackground.
            </summary>
            <param name="TaskId">ID of background task</param>
            <returns>If task was found and aborted.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Background.TerminateTasks(System.Int32)">
            <summary>
            Waits for all background tasks to terminate. Aborts tasks still executing after timeout elapses.
            </summary>
            <param name="Timeout">Timeout, in milliseconds.</param>
        </member>
        <member name="T:Waher.Script.Threading.Functions.Parallel">
            <summary>
            Executes tasks in parallel.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Tasks5">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Tasks5">Tasks to execute in parallel.</param>
            <param name="Tasks6">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Tasks5">Tasks to execute in parallel.</param>
            <param name="Tasks6">Tasks to execute in parallel.</param>
            <param name="Tasks7">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Tasks5">Tasks to execute in parallel.</param>
            <param name="Tasks6">Tasks to execute in parallel.</param>
            <param name="Tasks7">Tasks to execute in parallel.</param>
            <param name="Tasks8">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Executes tasks in parallel.
            </summary>
            <param name="Tasks">Tasks to execute in parallel.</param>
            <param name="Tasks2">Tasks to execute in parallel.</param>
            <param name="Tasks3">Tasks to execute in parallel.</param>
            <param name="Tasks4">Tasks to execute in parallel.</param>
            <param name="Tasks5">Tasks to execute in parallel.</param>
            <param name="Tasks6">Tasks to execute in parallel.</param>
            <param name="Tasks7">Tasks to execute in parallel.</param>
            <param name="Tasks8">Tasks to execute in parallel.</param>
            <param name="Tasks9">Tasks to execute in parallel.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Parallel.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Parallel.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Parallel.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Threading.Functions.Parallel.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Parallel.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Threading.Functions.Semaphore">
            <summary>
            Protects script by using a semaphore to make sure that only one thread evaluates a particular script.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Semaphore.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Protects script by using a semaphore to make sure that only one thread evaluates a particular script.
            </summary>
            <param name="Name">Semaphore name.</param>
            <param name="Node">Node to evaluate when semaphore allows.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Semaphore.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Semaphore.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Semaphore.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Threading.Functions.Semaphore.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Semaphore.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Semaphore.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Semaphore.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Threading.Functions.Sleep">
            <summary>
            Sleeps for a certain number of milliseconds, without consuming processor power.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Sleep.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sleeps for a certain number of milliseconds, without consuming processor power.
            </summary>
            <param name="Milliseconds">Number of milliseconds to sleep.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Sleep.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Sleep.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Threading.Functions.Sleep.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Sleep.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Threading.Functions.Sleep.EvaluateScalarAsync(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
    </members>
</doc>
