<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Script</name>
    </assembly>
    <members>
        <member name="T:Waher.Script.Abstraction.Elements.AbelianGroupElement">
            <summary>
            Base class for all types of abelian group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.AbelianGroupElement.#ctor">
            <summary>
            Base class for all types of abelian group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.AbelianGroupElement.AddLeft(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the left.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.AbelianGroupElement.AddRight(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the right.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.AbelianGroupElement.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.AbelianGroupElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.AbelianGroupElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.AbelianGroupElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.AbelianGroupElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.AbelianGroupElement.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.CommutativeRingElement">
            <summary>
            Base class for all types of commutative ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.CommutativeRingElement.#ctor">
            <summary>
            Base class for all types of commutative ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.CommutativeRingElement.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.CommutativeRingElement.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.CommutativeRingElement.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement">
            <summary>
            Base class for all types of commutative ring with identity elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.#ctor">
            <summary>
            Base class for all types of commutative ring with identity elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.AssociatedCommutativeRingWithIdentity">
            <summary>
            Associated Commutative Ring With Identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.CommutativeRingWithIdentityElement.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.Element">
            <summary>
            Base class for all types of elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.Element.#ctor">
            <summary>
            Base class for all types of elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.Element.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.Element.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.Element.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.Element.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.Element.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.Element.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.Element.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.Element.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.EuclidianDomainElement">
            <summary>
            Base class for all types of Euclidian domain elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.EuclidianDomainElement.#ctor">
            <summary>
            Base class for all types of Euclidian domain elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedCommutativeRingWithIdentity">
            <summary>
            Associated Commutative Ring With Identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedIntegralDomain">
            <summary>
            Associated Integral Domain.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.EuclidianDomainElement.AssociatedEuclidianDomain">
            <summary>
            Associated Euclidian Domain.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.FieldElement">
            <summary>
            Base class for all types of field elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.FieldElement.#ctor">
            <summary>
            Base class for all types of field elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedCommutativeRingWithIdentity">
            <summary>
            Associated Commutative Ring With Identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedIntegralDomain">
            <summary>
            Associated Integral Domain.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedEuclidianDomain">
            <summary>
            Associated Euclidian Domain.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.FieldElement.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.GroupElement">
            <summary>
            Base class for all types of group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.GroupElement.#ctor">
            <summary>
            Base class for all types of group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.GroupElement.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.GroupElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.GroupElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.GroupElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IntegralDomainElement">
            <summary>
            Base class for all types of integral domain elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IntegralDomainElement.#ctor">
            <summary>
            Base class for all types of integral domain elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedCommutativeRingWithIdentity">
            <summary>
            Associated Commutative Ring With Identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IntegralDomainElement.AssociatedIntegralDomain">
            <summary>
            Associated Integral Domain.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IAbelianGroupElement">
            <summary>
            Basic interface for all types of abelian group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IAbelianGroupElement.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IAbelianGroupElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IAbelianGroupElement.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ICommutativeRingElement">
            <summary>
            Basic interface for all types of commutative ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ICommutativeRingElement.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ICommutativeRingElement.AssociatedCommutativeRing">
            <summary>
            Associated Commutative Ring.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ICommutativeRingWithIdentityElement">
            <summary>
            Basic interface for all types of commutative ring with identity elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ICommutativeRingWithIdentityElement.AssociatedCommutativeRingWithIdentity">
            <summary>
            Associated Commutative Ring With Identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ICommutativeRingWithIdentityElement.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.Encapsulation">
            <summary>
            Delegate for encapsulation methods.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IElement">
            <summary>
            Basic interface for all types of elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IElement.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IElement.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IElement.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IElement.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IElement.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IEuclidianDomainElement">
            <summary>
            Basic interface for all types of Euclidian domain elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IEuclidianDomainElement.AssociatedEuclidianDomain">
            <summary>
            Associated Euclidian Domain.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IFieldElement">
            <summary>
            Basic interface for all types of field elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IFieldElement.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IGroupElement">
            <summary>
            Basic interface for all types of group elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IGroupElement.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IGroupElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IIntegralDomainElement">
            <summary>
            Basic interface for all types of integral domain elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IIntegralDomainElement.AssociatedIntegralDomain">
            <summary>
            Associated Integral Domain.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ILeftModuleElement">
            <summary>
            Basic interface for all types of left module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ILeftModuleElement.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the left.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ILeftModuleElement.AssociatedLeftModule">
            <summary>
            Associated Left-Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IMatrix">
            <summary>
            Basic interface for matrices.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IMatrix.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IMatrix.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.Transpose">
            <summary>
            Returns a transposed matrix.
            </summary>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.ConjugateTranspose">
            <summary>
            Returns a conjugate transposed matrix.
            </summary>
            <returns>Conjugate transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets an element of the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Matrix element.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.SetElement(System.Int32,System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Value">Element value.</param>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.GetRow(System.Int32)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.GetColumn(System.Int32)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.SetRow(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Vector">New row vector.</param>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IMatrix.SetColumn(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Vector">New column vector.</param>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IModuleElement">
            <summary>
            Basic interface for all types of module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IModuleElement.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IModuleElement.AssociatedModule">
            <summary>
            Associated Right-Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IRightModuleElement">
            <summary>
            Basic interface for all types of right module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IRightModuleElement.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the right.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IRightModuleElement.AssociatedRightModule">
            <summary>
            Associated Right-Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IRingElement">
            <summary>
            Basic interface for all types of ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IRingElement.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IRingElement.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IRingElement.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IRingElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ISemiGroupElement">
            <summary>
            Basic interface for all types of semigroup elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ISemiGroupElement.AddLeft(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the left.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ISemiGroupElement.AddRight(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the right.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ISemiGroupElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ISemiGroupElementWise">
            <summary>
            Basic interface for all types of element-wise semigroup elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ISemiGroupElementWise.AddLeftElementWise(Waher.Script.Abstraction.Elements.ISemiGroupElementWise)">
            <summary>
            Tries to add an element to the current element, from the left, element-wise.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ISemiGroupElementWise.AddRightElementWise(Waher.Script.Abstraction.Elements.ISemiGroupElementWise)">
            <summary>
            Tries to add an element to the current element, from the right, element-wise.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IVector">
            <summary>
            Basic interface for vectors.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IVector.VectorElements">
            <summary>
            An enumeration of vector elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.IVectorSpaceElement">
            <summary>
            Basic interface for all types of module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.IVectorSpaceElement.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.IVectorSpaceElement.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.LeftModuleElement">
            <summary>
            Base class for all types of left module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.LeftModuleElement.#ctor">
            <summary>
            Base class for all types of left module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.LeftModuleElement.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the left.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.LeftModuleElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.LeftModuleElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.LeftModuleElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.LeftModuleElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.LeftModuleElement.AssociatedLeftModule">
            <summary>
            Associated Left-Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.ModuleElement">
            <summary>
            Base class for all types of module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ModuleElement.#ctor">
            <summary>
            Base class for all types of module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ModuleElement.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the left.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ModuleElement.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the right.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.ModuleElement.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedLeftModule">
            <summary>
            Associated Left-Module.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedRightModule">
            <summary>
            Associated Right-Module.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.ModuleElement.AssociatedModule">
            <summary>
            Associated Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.RightModuleElement">
            <summary>
            Base class for all types of right module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RightModuleElement.#ctor">
            <summary>
            Base class for all types of right module elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RightModuleElement.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the right.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RightModuleElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RightModuleElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RightModuleElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RightModuleElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RightModuleElement.AssociatedRightModule">
            <summary>
            Associated Right-Module.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.RingElement">
            <summary>
            Base class for all types of ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RingElement.#ctor">
            <summary>
            Base class for all types of ring elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RingElement.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RingElement.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.RingElement.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RingElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RingElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RingElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RingElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.RingElement.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.SemiGroupElement">
            <summary>
            Base class for all types of semigroup elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.SemiGroupElement.#ctor">
            <summary>
            Base class for all types of semigroup elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.SemiGroupElement.AddLeft(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the left.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.SemiGroupElement.AddRight(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the right.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.SemiGroupElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.SemiGroupElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Elements.VectorSpaceElement">
            <summary>
            Base class for all types of vector space elements (vectors).
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.#ctor">
            <summary>
            Base class for all types of vector space elements (vectors).
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the left.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element from the right.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedGroup">
            <summary>
            Associated Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedAbelianGroup">
            <summary>
            Associated Abelian Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedLeftModule">
            <summary>
            Associated Left-Module.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedRightModule">
            <summary>
            Associated Right-Module.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedModule">
            <summary>
            Associated Module.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Elements.VectorSpaceElement.VectorElements">
            <summary>
            An enumeration of vector elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Elements.VectorSpaceElement.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.AbelianGroup">
            <summary>
            Base class for all types of abelian groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.AbelianGroup.#ctor">
            <summary>
            Base class for all types of abelian groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.AbelianGroup.RightSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the right group element from the left one: Left+(-Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.AbelianGroup.LeftSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the left group element from the right one: (-Left)+Right.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.AbelianGroup.Subtract(Waher.Script.Abstraction.Elements.IAbelianGroupElement,Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Subtracts the right group element from the left one: Left-Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.AbelianGroup.IsAbelian">
            <summary>
            If the group + operator is commutative or not. (For abelian groups, this is always true.)
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.AbelianGroup.AdditiveIdentity">
            <summary>
            Returns the additive identity of the group. (For abelian groups, this calls <see cref="P:Waher.Script.Abstraction.Sets.AbelianGroup.Zero"/>.)
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.AbelianGroup.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.CommutativeRing">
            <summary>
            Base class for all types of commutative rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.CommutativeRing.#ctor">
            <summary>
            Base class for all types of commutative rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.CommutativeRing.RightDivide(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Divides the right ring element from the left one: Left*(1/Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.CommutativeRing.Divide(Waher.Script.Abstraction.Elements.ICommutativeRingElement,Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.CommutativeRing.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.CommutativeRingWithIdentity">
            <summary>
            Base class for all types of commutative rings with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.CommutativeRingWithIdentity.#ctor">
            <summary>
            Base class for all types of commutative rings with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.CommutativeRingWithIdentity.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.EuclidianDomain">
            <summary>
            Base class for all types of euclidian domains.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.EuclidianDomain.#ctor">
            <summary>
            Base class for all types of euclidian domains.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.EuclidianDomain.Divide(Waher.Script.Abstraction.Elements.ICommutativeRingElement,Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.EuclidianDomain.Divide(Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement@)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <param name="Remainder">Remainder.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.Field">
            <summary>
            Base class for all types of fields.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Field.#ctor">
            <summary>
            Base class for all types of fields.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Field.Divide(Waher.Script.Abstraction.Elements.ICommutativeRingElement,Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Field.Divide(Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement@)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <param name="Remainder">Remainder.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.Group">
            <summary>
            Base class for all types of groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Group.#ctor">
            <summary>
            Base class for all types of groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Group.RightSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the right group element from the left one: Left+(-Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Group.LeftSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the left group element from the right one: (-Left)+Right.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Group.IsAbelian">
            <summary>
            If the group + operator is commutative or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Group.AdditiveIdentity">
            <summary>
            Returns the additive identity of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IntegralDomain">
            <summary>
            Base class for all types of integral domains.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IntegralDomain.#ctor">
            <summary>
            Base class for all types of integral domains.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IAbelianGroup">
            <summary>
            Basic interface for all types of abelian groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IAbelianGroup.Subtract(Waher.Script.Abstraction.Elements.IAbelianGroupElement,Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Subtracts the right group element from the left one: Left-Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IAbelianGroup.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.ICommutativeRing">
            <summary>
            Basic interface for all types of commutative rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.ICommutativeRing.Divide(Waher.Script.Abstraction.Elements.ICommutativeRingElement,Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.ICommutativeRingWithIdentity">
            <summary>
            Basic interface for all types of commutative rings with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.ICommutativeRingWithIdentity.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IEuclidianDomain">
            <summary>
            Basic interface for all types of euclidian domains.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IEuclidianDomain.Divide(Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement@)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <param name="Remainder">Remainder.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IField">
            <summary>
            Basic interface for all types of fields.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IGroup">
            <summary>
            Basic interface for all types of groups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IGroup.RightSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the right group element from the left one: Left+(-Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IGroup.LeftSubtract(Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Abstraction.Elements.IGroupElement)">
            <summary>
            Subtracts the left group element from the right one: (-Left)+Right.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IGroup.IsAbelian">
            <summary>
            If the group + operator is commutative or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IGroup.AdditiveIdentity">
            <summary>
            Returns the additive identity of the group.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IIntegralDomain">
            <summary>
            Basic interface for all types of integral domains.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.ILeftModule">
            <summary>
            Basic interface for all types of left modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.ILeftModule.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.ILeftModule.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.ILeftModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="Scalar">Scalar element.</param>
            <param name="ModuleElement">Module element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IModule">
            <summary>
            Basic interface for all types of modules.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IModule.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IRightModule">
            <summary>
            Basic interface for all types of right modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IRightModule.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IRightModule.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRightModuleElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IRing">
            <summary>
            Basic interface for all types of rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IRing.Multiply(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Multiplies two ring elements, if possible.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IRing.RightDivide(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Divides the right ring element from the left one: Left*(1/Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IRing.LeftDivide(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Divides the left ring element from the right one: (1/Left)*Right.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IRing.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.ISemiGroup">
            <summary>
            Basic interface for all types of semigroups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.ISemiGroup.Add(Waher.Script.Abstraction.Elements.ISemiGroupElement,Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Adds two semigroup elements, if possible.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.ISet">
            <summary>
            Basic interface for all types of sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.ISet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.ISet.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IVectorSpace">
            <summary>
            Basic interface for all types of modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.IVectorSpace.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.IVectorSpace.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement,Waher.Script.Abstraction.Elements.IVectorSpaceElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="VectorSpaceElement">Vector Space element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.IOrderedSet">
            <summary>
            Basic interface for ordered sets.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.LeftModule">
            <summary>
            Base class for all types of left modules.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.LeftModule.#ctor">
            <summary>
            Base class for all types of left modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.LeftModule.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.LeftModule.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.ILeftModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="Scalar">Scalar element.</param>
            <param name="ModuleElement">Module element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.Module">
            <summary>
            Base class for all types of modules.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Module.#ctor">
            <summary>
            Base class for all types of left modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Module.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Module.MultiplyScalarLeft(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.ILeftModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="Scalar">Scalar element.</param>
            <param name="ModuleElement">Module element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Module.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRightModuleElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Module.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.RightModule">
            <summary>
            Base class for all types of right modules.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.RightModule.#ctor">
            <summary>
            Base class for all types of right modules.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.RightModule.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.RightModule.MultiplyScalarRight(Waher.Script.Abstraction.Elements.IRightModuleElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.Ring">
            <summary>
            Base class for all types of rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Ring.#ctor">
            <summary>
            Base class for all types of rings.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Ring.Multiply(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Multiplies two ring elements, if possible.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Ring.RightDivide(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Divides the right ring element from the left one: Left*(1/Right)
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Ring.LeftDivide(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Divides the left ring element from the right one: (1/Left)*Right.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Ring.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.SemiGroup">
            <summary>
            Base class for all types of semigroups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.SemiGroup.#ctor">
            <summary>
            Base class for all types of semigroups.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.SemiGroup.Add(Waher.Script.Abstraction.Elements.ISemiGroupElement,Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Adds two semigroup elements, if possible.
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.Set">
            <summary>
            Base class for all types of sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.#ctor">
            <summary>
            Base class for all types of sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Set.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Set.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Set.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Set.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.Set.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.Set.ToSet(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Converts (if necessary) the element <paramref name="E"/> into a set.
            </summary>
            <param name="E">Element</param>
            <returns>Set, or null if not possible to convert.</returns>
        </member>
        <member name="T:Waher.Script.Abstraction.Sets.VectorSpace">
            <summary>
            Base class for all types of vector spaces.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.VectorSpace.#ctor">
            <summary>
            Base class for all types of vector spaces.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.VectorSpace.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Abstraction.Sets.VectorSpace.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.VectorSpace.MultiplyScalar(Waher.Script.Abstraction.Elements.IRingElement,Waher.Script.Abstraction.Elements.IModuleElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="ModuleElement">Module element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Abstraction.Sets.VectorSpace.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement,Waher.Script.Abstraction.Elements.IVectorSpaceElement)">
            <summary>
            Performs a scalar multiplication, if possible.
            </summary>
            <param name="VectorSpaceElement">Vector Space element.</param>
            <param name="Scalar">Scalar element.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Constants.C">
            <summary>
            Complex numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.C.#ctor">
            <summary>
            Complex numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.C.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.C.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.C.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.E">
            <summary>
            Euler's number.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.E.#ctor">
            <summary>
            Euler's number.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.E.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.E.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.E.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.EmptySet">
            <summary>
            The empty set.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.EmptySet.#ctor">
            <summary>
            The empty set.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.EmptySet.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.EmptySet.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.EmptySet.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Eps">
            <summary>
            Represents the smallest positive System.Double value that is greater than zero.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Eps.#ctor">
            <summary>
            Represents the smallest positive System.Double value that is greater than zero.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Eps.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Eps.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Eps.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.ImaginaryUnit">
            <summary>
            Imaginary unit.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.ImaginaryUnit.#ctor">
            <summary>
            Imaginary unit.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.ImaginaryUnit.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.ImaginaryUnit.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.ImaginaryUnit.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Infinity">
            <summary>
            Represents the smallest positive System.Double value that is greater than zero.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Infinity.#ctor">
            <summary>
            Represents the smallest positive System.Double value that is greater than zero.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Infinity.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Infinity.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Infinity.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Now">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Now.#ctor">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Now.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Now.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Now.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.NowUtc">
            <summary>
            Current date and time, UTC Coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.NowUtc.#ctor">
            <summary>
            Current date and time, UTC Coordinates.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.NowUtc.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.NowUtc.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.NowUtc.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Pi">
            <summary>
            π
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Pi.#ctor">
            <summary>
            π
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Pi.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Pi.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Pi.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Q">
            <summary>
            Rational Numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Q.#ctor">
            <summary>
            Rational Numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Q.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Q.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Q.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.R">
            <summary>
            Real numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.R.#ctor">
            <summary>
            Real numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.R.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.R.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.R.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Time">
            <summary>
            Current time.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Time.#ctor">
            <summary>
            Current time.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Time.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Time.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Time.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.TimeUtc">
            <summary>
            Current time, UTC Coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.TimeUtc.#ctor">
            <summary>
            Current time, UTC Coordinates.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.TimeUtc.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.TimeUtc.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.TimeUtc.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Today">
            <summary>
            Current date.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Today.#ctor">
            <summary>
            Current date.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Today.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Today.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Today.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.TodayUtc">
            <summary>
            Current date, UTC Coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.TodayUtc.#ctor">
            <summary>
            Current date, UTC Coordinates.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.TodayUtc.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.TodayUtc.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.TodayUtc.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Constants.Z">
            <summary>
            Integers.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Z.#ctor">
            <summary>
            Integers.
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Z.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Constants.Z.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Constants.Z.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Exceptions.ScriptAbortedException">
            <summary>
            Exception thrown when a script has been aborted.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptAbortedException.#ctor">
            <summary>
            Exception thrown when a script has been aborted.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptAbortedException.#ctor(System.String)">
            <summary>
            Exception thrown when a script has been aborted.
            </summary>
            <param name="Message">Message text.</param>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when a script has been aborted.
            </summary>
            <param name="Message">Message text.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="T:Waher.Script.Exceptions.ScriptException">
            <summary>
            Base class for script exceptions.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptException.#ctor(System.String)">
            <summary>
            Base class for script exceptions.
            </summary>
            <param name="Message">Message text.</param>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptException.#ctor(System.String,System.Exception)">
            <summary>
            Base class for script exceptions.
            </summary>
            <param name="Message">Message text.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="T:Waher.Script.Exceptions.ScriptReturnValueException">
            <summary>
            Script runtime exception.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptReturnValueException.#ctor(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Script runtime exception.
            </summary>
            <param name="ReturnValue">Return value.</param>
        </member>
        <member name="P:Waher.Script.Exceptions.ScriptReturnValueException.ReturnValue">
            <summary>
            Return value.
            </summary>
        </member>
        <member name="T:Waher.Script.Exceptions.ScriptRuntimeException">
            <summary>
            Script runtime exception.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptRuntimeException.#ctor(System.String,Waher.Script.Model.ScriptNode)">
            <summary>
            Script runtime exception.
            </summary>
            <param name="Message">Message text.</param>
            <param name="Node">Script node where syntax error was detected.</param>
        </member>
        <member name="M:Waher.Script.Exceptions.ScriptRuntimeException.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Exception)">
            <summary>
            Script runtime exception.
            </summary>
            <param name="Message">Message text.</param>
            <param name="Node">Script node where syntax error was detected.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="P:Waher.Script.Exceptions.ScriptRuntimeException.Node">
            <summary>
            Node where error occurred.
            </summary>
        </member>
        <member name="T:Waher.Script.Exceptions.SyntaxException">
            <summary>
            Syntax error exception.
            </summary>
        </member>
        <member name="M:Waher.Script.Exceptions.SyntaxException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Syntax error exception.
            </summary>
            <param name="Message">Message text.</param>
            <param name="Position">Position into script where the syntax error was detected.</param>
            <param name="Script">Script expression where syntax error was detected.</param>
        </member>
        <member name="M:Waher.Script.Exceptions.SyntaxException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary>
            Base class for script exceptions.
            </summary>
            <param name="Message">Message text.</param>
            <param name="Position">Position into script where the syntax error was detected.</param>
            <param name="Script">Script expression where syntax error was detected.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="P:Waher.Script.Exceptions.SyntaxException.Position">
            <summary>
            Position into script where the syntax error was detected.
            </summary>
        </member>
        <member name="P:Waher.Script.Exceptions.SyntaxException.Script">
            <summary>
            Script expression where syntax error was detected.
            </summary>
        </member>
        <member name="T:Waher.Script.Expression">
            <summary>
            Class managing a script expression.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.#ctor(System.String,System.String)">
            <summary>
            Class managing a script expression.
            </summary>
            <param name="Script">Script expression.</param>
            <param name="Source">Source of script.</param>
        </member>
        <member name="M:Waher.Script.Expression.#ctor(System.String)">
            <summary>
            Class managing a script expression.
            </summary>
            <param name="Script">Script expression.</param>
        </member>
        <member name="P:Waher.Script.Expression.Script">
            <summary>
            Original script string.
            </summary>
        </member>
        <member name="P:Waher.Script.Expression.Source">
            <summary>
            Source of script, or null if not defined.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.TryGetConstant(System.String,Waher.Script.Variables,Waher.Script.Abstraction.Elements.IElement@)">
            <summary>
            Tries to get a constant value, given its name.
            </summary>
            <param name="Name">Name</param>
            <param name="Variables">Current set of cariables.</param>
            <param name="ValueElement">If found, constant value will be placed here.</param>
            <returns>If a constant with the given name was found.</returns>
        </member>
        <member name="P:Waher.Script.Expression.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Expression.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the expression, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for evaluating expressions in a synchronous (blocking) context.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Expression.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the expression, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for evaluating expressions in an asynchronous (non-blocking) context.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:Waher.Script.Expression.Root">
            <summary>
            Root script node.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Expression.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Expression.ContainsImplicitPrint">
            <summary>
            If the expression contains implicit print operations.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.Transform(System.String,System.String,System.String,Waher.Script.Variables)">
            <summary>
            Transforms a string by executing embedded script.
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiter.</param>
            <param name="StopDelimiter">Stop delimiter.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Transformed string.</returns>
        </member>
        <member name="M:Waher.Script.Expression.Transform(System.String,System.String,System.String,Waher.Script.Variables,System.String)">
            <summary>
            Transforms a string by executing embedded script.
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiter.</param>
            <param name="StopDelimiter">Stop delimiter.</param>
            <param name="Variables">Collection of variables.</param>
            <param name="Source">Optional source of <paramref name="s"/>.</param>
            <returns>Transformed string.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TransformAsync(System.String,System.String,System.String,Waher.Script.Variables)">
            <summary>
            Transforms a string by executing embedded script.
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiter.</param>
            <param name="StopDelimiter">Stop delimiter.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Transformed string.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TransformAsync(System.String,System.String,System.String,Waher.Script.Variables,System.String)">
            <summary>
            Transforms a string by executing embedded script.
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiter.</param>
            <param name="StopDelimiter">Stop delimiter.</param>
            <param name="Variables">Collection of variables.</param>
            <param name="Source">Optional source of <paramref name="s"/>.</param>
            <returns>Transformed string.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Double)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Decimal)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryParse(System.String,System.Double@)">
            <summary>
            Tries to parse a double-precision floating-point value.
            </summary>
            <param name="s">String-representation</param>
            <param name="Value">Parsed value.</param>
            <returns>If parsing was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryParse(System.String,System.Single@)">
            <summary>
            Tries to parse a single-precision floating-point value.
            </summary>
            <param name="s">String-representation</param>
            <param name="Value">Parsed value.</param>
            <returns>If parsing was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryParse(System.String,System.Decimal@)">
            <summary>
            Tries to parse a decimal-precision floating-point value.
            </summary>
            <param name="s">String-representation</param>
            <param name="Value">Parsed value.</param>
            <returns>If parsing was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Numerics.Complex)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Numerics.BigInteger)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Boolean)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Double[])">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Numerics.Complex[])">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.DateTime)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.TimeSpan)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Enum)">
            <summary>
            Converts a value to a string, that can be parsed as part of an expression.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.String)">
            <summary>
            Converts a string value to a parsable expression string.
            </summary>
            <param name="s">Value</param>
            <returns>Expression representation of string.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToString(System.Object)">
            <summary>
            Converts an object to a string.
            </summary>
            <param name="Value">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToDouble(System.Object)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToDecimal(System.Object)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ToComplex(System.Object)">
            <summary>
            Converts an object to a complex value.
            </summary>
            <param name="Object">Object.</param>
            <returns>Complex value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.Encapsulate(System.Object)">
            <summary>
            Encapsulates an object.
            </summary>
            <param name="Value">Object</param>
            <returns>Encapsulated object.</returns>
        </member>
        <member name="M:Waher.Script.Expression.UpgradeSemiGroup(Waher.Script.Abstraction.Elements.IElement@,Waher.Script.Abstraction.Sets.ISet@,Waher.Script.Abstraction.Elements.IElement@,Waher.Script.Abstraction.Sets.ISet@)">
            <summary>
            Upgrades elements if necessary, to a common semi-field, trying to make them compatible.
            </summary>
            <param name="E1">Element 1.</param>
            <param name="Set1">Set containing element 1.</param>
            <param name="E2">Element 2.</param>
            <param name="Set2">Set containing element 2.</param>
            <returns>If elements have been upgraded to become compatible.</returns>
        </member>
        <member name="M:Waher.Script.Expression.UpgradeField(Waher.Script.Abstraction.Elements.IElement@,Waher.Script.Abstraction.Sets.ISet@,Waher.Script.Abstraction.Elements.IElement@,Waher.Script.Abstraction.Sets.ISet@)">
            <summary>
            Upgrades elements if necessary, to a common field extension, trying to make them compatible.
            </summary>
            <param name="E1">Element 1.</param>
            <param name="Set1">Set containing element 1.</param>
            <param name="E2">Element 2.</param>
            <param name="Set2">Set containing element 2.</param>
            <returns>If elements have been upgraded to become compatible.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ConvertTo(Waher.Script.Abstraction.Elements.IElement,System.Type,Waher.Script.Model.ScriptNode)">
            <summary>
            Tries to conevert an element value to a desired type.
            </summary>
            <param name="Value">Element value.</param>
            <param name="DesiredType">Desired type.</param>
            <param name="Node">Script node making the request.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ConvertTo(System.Object,System.Type,Waher.Script.Model.ScriptNode)">
            <summary>
            Tries to conevert an object to a desired type.
            </summary>
            <param name="Obj">Object to convert.</param>
            <param name="DesiredType">Desired type.</param>
            <param name="Node">Script node making the request.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="P:Waher.Script.Expression.Tag">
            <summary>
            This property allows the caller to tag the expression with an arbitrary object.
            </summary>
        </member>
        <member name="M:Waher.Script.Expression.ForAll(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all script nodes defined for the expression.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Expression.ForAll(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all script nodes defined for the expression.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryConvert``1(System.Object,``0@)">
            <summary>
            Tries to convert an object <paramref name="Value"/> to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Desired type.</typeparam>
            <param name="Value">Value to convert.</param>
            <param name="Result">Conversion result.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to convert an object <paramref name="Value"/> to an object of type <paramref name="DesiredType"/>.
            </summary>
            <param name="Value">Value to convert.</param>
            <param name="DesiredType">Desired type.</param>
            <param name="Result">Conversion result.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryConvert(Waher.Script.Abstraction.Elements.IElement,System.Type,Waher.Script.Abstraction.Elements.IElement@)">
            <summary>
            Tries to convert an element <paramref name="Value"/> to an element whose associated object is of type 
            <paramref name="DesiredType"/>.
            </summary>
            <param name="Value">Element to convert.</param>
            <param name="DesiredType">Desired type of associated object.</param>
            <param name="Result">Conversion result.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="M:Waher.Script.Expression.TryGetTypeConverter(System.Type,System.Type,Waher.Script.TypeConversion.ITypeConverter@)">
            <summary>
            Tries to get a type converter, converting objects from type <paramref name="From"/> to objects of type
            <paramref name="To"/>.
            </summary>
            <param name="From">Start type.</param>
            <param name="To">Desired type.</param>
            <param name="Converter">Type Converter found, or null if not found.</param>
            <returns>If a type converter could be found, or constructed from existing converters.</returns>
        </member>
        <member name="M:Waher.Script.Expression.Eval(System.String)">
            <summary>
            Evaluates script, in string format.
            </summary>
            <param name="Script">Script to parse and evaluate.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Expression.Eval(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates script, in string format.
            </summary>
            <param name="Script">Script to parse and evaluate.</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Expression.EvalAsync(System.String)">
            <summary>
            Evaluates script, in string format.
            </summary>
            <param name="Script">Script to parse and evaluate.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Expression.EvalAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates script, in string format.
            </summary>
            <param name="Script">Script to parse and evaluate.</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCos">
            <summary>
            ArcCos(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCos.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCos(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCos.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCos.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCos.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCos.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCos.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCosH">
            <summary>
            ArcCosH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCosH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCosH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCosH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCosH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCosH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCosH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCosH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCot">
            <summary>
            ArcCot(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCot.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCot(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCot.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCot.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCot.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCot.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCot.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCotH">
            <summary>
            ArcCotH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCotH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCotH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCotH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCotH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCotH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCotH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCotH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCsc">
            <summary>
            ArcCsc(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCsc.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCsc(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCsc.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCsc.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCsc.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCsc.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCsc.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcCscH">
            <summary>
            ArcCscH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCscH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcCscH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCscH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcCscH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCscH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCscH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcCscH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcSec">
            <summary>
            ArcSec(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSec.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcSec(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSec.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSec.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSec.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSec.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSec.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcSecH">
            <summary>
            ArcSecH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSecH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcSecH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSecH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSecH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSecH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSecH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSecH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcSin">
            <summary>
            ArcSin(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSin.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcSin(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSin.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSin.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSin.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSin.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSin.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcSinH">
            <summary>
            ArcSinH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSinH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcSinH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSinH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcSinH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSinH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSinH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcSinH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcTan">
            <summary>
            ArcTan(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcTan(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTan.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTan.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcTan2">
            <summary>
            ArcTan(x,y)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan2.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcTan(x,y)
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTan2.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTan2.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTan2.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.ArcTanH">
            <summary>
            ArcTanH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTanH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            ArcTanH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTanH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.ArcTanH.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTanH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTanH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.ArcTanH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Cos">
            <summary>
            Cos(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cos.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Cos(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Cos.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cos.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cos.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cos.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.CosH">
            <summary>
            CosH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CosH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.CosH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.CosSin">
            <summary>
            CosSin(x), calculates both Cos(x) and Sin(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosSin.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CosSin(x), calculates both Cos(x) and Sin(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.CosSin.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosSin.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CosSin.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Cot">
            <summary>
            Cot(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cot.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Cot(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Cot.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cot.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cot.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Cot.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.CotH">
            <summary>
            CotH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CotH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CotH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.CotH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CotH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CotH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CotH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Csc">
            <summary>
            Csc(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Csc.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Csc(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Csc.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Csc.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Csc.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Csc.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.CscH">
            <summary>
            CscH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CscH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            CscH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.CscH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CscH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CscH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.CscH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Exp">
            <summary>
            Exp(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Exp.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Exp(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Exp.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Exp.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Exp.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Exp.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Ln">
            <summary>
            Ln(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Ln.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Ln(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Ln.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Ln.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Ln.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Ln.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Log10">
            <summary>
            Log10(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log10.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Log10(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Log10.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Log10.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log10.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log10.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log10.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Log2">
            <summary>
            Log2(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log2.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Log2(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Log2.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log2.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log2.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Log2.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Sec">
            <summary>
            Sec(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sec.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sec(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Sec.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sec.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sec.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sec.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.SecH">
            <summary>
            SecH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SecH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            SecH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.SecH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SecH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SecH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SecH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Sin">
            <summary>
            Sin(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sin.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sin(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Sin.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sin.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sin.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sin.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.SinCos">
            <summary>
            SinCos(x), calculates both Sin(x) and Cos(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinCos.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            SinCos(x), calculates both Sin(x) and Cos(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.SinCos.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinCos.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinCos.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.SinH">
            <summary>
            SinH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            SinH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.SinH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.SinH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Sqrt">
            <summary>
            Sqrt(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sqrt.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sqrt(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Sqrt.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Sqrt.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sqrt.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sqrt.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Sqrt.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.Tan">
            <summary>
            Tan(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Tan.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Tan(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.Tan.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Tan.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Tan.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.Tan.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Analytic.TanH">
            <summary>
            TanH(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.TanH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            TanH(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Analytic.TanH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.TanH.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.TanH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Analytic.TanH.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.ComplexNumbers.Arg">
            <summary>
            Arg(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Arg.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Arg(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Arg.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Arg.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Arg.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.ComplexNumbers.Conjugate">
            <summary>
            Conjugate(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Conjugate.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Conjugate(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Conjugate.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Conjugate.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Conjugate.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Conjugate.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.ComplexNumbers.Im">
            <summary>
            Im(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Im.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Im(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Im.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Im.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Im.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.ComplexNumbers.Polar">
            <summary>
            Polar(x,y)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Polar.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Polar(x,y)
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Polar.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Polar.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.ComplexNumbers.Re">
            <summary>
            Re(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Re.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Re(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.ComplexNumbers.Re.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Re.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.ComplexNumbers.Re.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.DateTime">
            <summary>
            Creates a DateTime value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="String">String representation to be parsed.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="MSecond">Millisecond</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTime.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTime.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.FromInteger(System.Int64,System.DateTimeKind)">
            <summary>
            Converts an integer to a <see cref="T:System.DateTime"/>.
            If integer is a 32-bit integer, it is considered a UNIX time,
            representing the number of seconds after the <see cref="F:Waher.Script.Functions.DateAndTime.DateTime.UnixEpoch"/>.
            64-bit integers are considered <see cref="T:System.DateTime"/> ticks.
            </summary>
            <param name="Nr">Integer</param>
            <param name="Kind">Kind</param>
            <returns>DateTime value.</returns>
        </member>
        <member name="F:Waher.Script.Functions.DateAndTime.DateTime.UnixEpoch">
            <summary>
            Unix Date and Time epoch, starting at 1970-01-01T00:00:00Z
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.TryParse(System.String,System.DateTime@)">
            <summary>
            Parses DateTime values from short forms of strings.
            </summary>
            <param name="s">String</param>
            <param name="TP">Parsed DateTime value.</param>
            <returns>If successful or not.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTime.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.DateTimeLocal">
            <summary>
            Creates a Local DateTime value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Local DateTime value.
            </summary>
            <param name="String">String representation to be parsed.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="MSecond">Millisecond</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeLocal.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeLocal.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeLocal.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.DateTimeOffset">
            <summary>
            Creates a DateTimeOffset value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTimeOffset value.
            </summary>
            <param name="String">String representation to be parsed.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTimeOffset value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="TimeZone">Time-zone</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTimeOffset value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="TimeZone">Time-zone</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTimeOffset value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="MSecond">Millisecond</param>
            <param name="TimeZone">Time-zone</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeOffset.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeOffset.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
            <summary>
            Parses DateTimeOffset values from short forms of strings.
            </summary>
            <param name="s">String</param>
            <param name="TP">Parsed DateTimeOffset value.</param>
            <returns>If successful or not.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeOffset.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.DateTimeUtc">
            <summary>
            Creates a UTC DateTime value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a UTC DateTime value.
            </summary>
            <param name="String">String representation to be parsed.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a DateTime value.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Hour">Hour</param>
            <param name="Minute">Minute</param>
            <param name="Second">Second</param>
            <param name="MSecond">Millisecond</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeUtc.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.DateTimeUtc.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.DateTimeUtc.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Day">
            <summary>
            Day(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Day.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Day(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Day">Day of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Day.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Day.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Hours">
            <summary>
            Hours(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Hours.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Hours(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Hours">Hours of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Hours.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Hours.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Minutes">
            <summary>
            Minutes(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Minutes.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Minutes(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Minutes">Minutes of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Minutes.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Minutes.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Month">
            <summary>
            Month(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Month.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Month(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Month">Month of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Month.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Month.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Seconds">
            <summary>
            Seconds(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Seconds.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Seconds(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Seconds">Seconds of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Seconds.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Seconds.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.TimeSpan">
            <summary>
            Creates a TimeSpan value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a TimeSpan value.
            </summary>
            <param name="String">String representation to be parsed.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a TimeSpan value.
            </summary>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a TimeSpan value.
            </summary>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a TimeSpan value.
            </summary>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
            <param name="MSeconds">Milliseconds</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.TimeSpan.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.TimeSpan.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.TryParse(System.String,System.TimeSpan@)">
            <summary>
            Parses TimeSpan values from short forms of strings.
            </summary>
            <param name="s">String</param>
            <param name="TS">Parsed TimeSpan value.</param>
            <returns>If successful or not.</returns>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.TimeSpan.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.DateAndTime.Year">
            <summary>
            Year(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Year.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Year(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Year">Year of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.DateAndTime.Year.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.DateAndTime.Year.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogAlert">
            <summary>
            Logs an alert event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogAlert.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an alert event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogAlert.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an alert event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogAlert.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogAlert.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogAlert.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogCritical">
            <summary>
            Logs a critical event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogCritical.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a critical event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogCritical.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a critical event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogCritical.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogCritical.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogCritical.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogDebug">
            <summary>
            Logs a debug event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogDebug.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a debug event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogDebug.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a debug event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogDebug.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogDebug.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogDebug.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogEmergency">
            <summary>
            Logs an emergency event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogEmergency.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an emergency event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogEmergency.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an emergency event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogEmergency.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogEmergency.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogEmergency.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogError">
            <summary>
            Logs an error event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogError.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an error event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogError.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an error event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogError.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogError.DoLog(System.String)">
            <summary>
            Logs error to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogError.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs error to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific error.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogFunction">
            <summary>
            Abstract base class for log functions
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogFunction.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for log functions
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogFunction.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abstract base class for log functions
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogFunction.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogFunction.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogFunction.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogFunction.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogInformational">
            <summary>
            Logs an informational event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogInformational.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an informational event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogInformational.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs an informational event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogInformational.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogInformational.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogInformational.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogInformational.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogNotice">
            <summary>
            Logs a notice event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogNotice.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a notice event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogNotice.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a notice event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogNotice.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogNotice.DoLog(System.String)">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogNotice.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs information to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific information.</param>
        </member>
        <member name="T:Waher.Script.Functions.Logging.LogWarning">
            <summary>
            Logs a warning event to the event log.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogWarning.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a warning event to the event log.
            </summary>
            <param name="Message">Message</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogWarning.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logs a warning event to the event log.
            </summary>
            <param name="Message">Argument.</param>
            <param name="Tags">Tags</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Logging.LogWarning.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogWarning.DoLog(System.String)">
            <summary>
            Logs warning to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
        </member>
        <member name="M:Waher.Script.Functions.Logging.LogWarning.DoLog(System.String,System.String,System.String,System.String,Waher.Events.EventLevel,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Logs warning to the event log.
            </summary>
            <param name="Message">Free-text event message.</param>
            <param name="Object">Object related to the event.</param>
            <param name="Actor">Actor responsible for the action causing the event.</param>
            <param name="EventId">Computer-readable Event ID identifying type of even.</param>
            <param name="Level">Event Level.</param>
            <param name="Facility">Facility can be either a facility in the network sense or in the system sense.</param>
            <param name="Module">Module where the event is reported.</param>
            <param name="StackTrace">Stack Trace of event.</param>
            <param name="Tags">Variable set of tags providing event-specific warning.</param>
        </member>
        <member name="T:Waher.Script.Functions.Matrices.FindElements">
            <summary>
            Finds elements in matrices or vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.FindElements.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Finds elements in matrices or vectors.
            </summary>
            <param name="SearchFor">What to search for.</param>
            <param name="In">Object to search in.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.FindElements.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.FindElements.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.FindElements.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Matrices.Inverse">
            <summary>
            Inverse(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Inverse.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Inverse(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Inverse.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Inverse.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Inverse.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Inverse.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Inverse.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Matrices.Ones">
            <summary>
            Creates a matrix containing only ones.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Ones.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix containing only ones.
            </summary>
            <param name="Rows">Rows of the resulting matrix.</param>
            <param name="Columns">Columns of the resulting matrix.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Ones.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Ones.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Ones.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Matrices.Zeroes">
            <summary>
            Creates a matrix containing only zeroes.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Zeroes.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix containing only zeroes.
            </summary>
            <param name="Rows">Rows of the resulting matrix.</param>
            <param name="Columns">Columns of the resulting matrix.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Zeroes.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Matrices.Zeroes.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matrices.Zeroes.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Matries.Identity">
            <summary>
            Creates an identity matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matries.Identity.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="Dimension">Dimension of matrix.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Matries.Identity.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Matries.Identity.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Create">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Parameters">Constructor parameters.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Argument6">Constructor argument 6.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Argument6">Constructor argument 6.</param>
            <param name="Argument7">Constructor argument 7.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Argument6">Constructor argument 6.</param>
            <param name="Argument7">Constructor argument 7.</param>
            <param name="Argument8">Constructor argument 8.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Argument6">Constructor argument 6.</param>
            <param name="Argument7">Constructor argument 7.</param>
            <param name="Argument8">Constructor argument 8.</param>
            <param name="Argument9">Constructor argument 9.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object of a specific class. The first argument must evaluate to the type that is to be created.
            </summary>
            <param name="Type">Type.</param>
            <param name="Argument1">Constructor argument 1.</param>
            <param name="Argument2">Constructor argument 2.</param>
            <param name="Argument3">Constructor argument 3.</param>
            <param name="Argument4">Constructor argument 4.</param>
            <param name="Argument5">Constructor argument 5.</param>
            <param name="Argument6">Constructor argument 6.</param>
            <param name="Argument7">Constructor argument 7.</param>
            <param name="Argument8">Constructor argument 8.</param>
            <param name="Argument9">Constructor argument 9.</param>
            <param name="Argument10">Constructor argument 10.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Create.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Create.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Create.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Create.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Functions.Runtime.Create.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Create.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Destroy">
            <summary>
            Destroys a value. If the function references a variable, the variable is also removed.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Destroy.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Destroys a value. If the function references a variable, the variable is also removed.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Destroy.VariableName">
            <summary>
            Name of variable.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Destroy.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Destroy.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Destroy.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Destroy.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Destroy.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Error">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Error.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Throws an exception.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Error.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Error.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Error.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Exists">
            <summary>
            Checks if an expression exists, or has a valid value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Exists.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Checks if an expression exists, or has a valid value.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Exists.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Exists.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Exists.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Exists.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Fields">
            <summary>
            Extract the fields of a type or an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Fields.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Extract the fields of a type or an object.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Fields.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Fields.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Fields.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Fields.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Fields.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.MethodLambda">
            <summary>
            Lambda expression executing object methods.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.MethodLambda.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Lambda expression executing object methods.
            </summary>
            <param name="Object">Object</param>
            <param name="Method">Method</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.MethodLambda.NrArguments">
            <summary>
            Number of arguments.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.MethodLambda.ArgumentNames">
            <summary>
            Argument Names.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.MethodLambda.ArgumentTypes">
            <summary>
            Argument types.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.MethodLambda.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.MethodLambda.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.MethodLambda.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.MethodLambda.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Methods">
            <summary>
            Extract the methods of a type or an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Methods.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Extract the methods of a type or an object.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Methods.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Methods.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Methods.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Methods.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Names">
            <summary>
            Extract the names of an enumeration type or an enumeration object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Names.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Extract the names of an enumeration type or an enumeration object.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Names.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Names.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Optional">
            <summary>
            Makes sure an expression is defined. Otherwise, an exception is thrown.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Optional.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Makes sure an expression is defined. Otherwise, an exception is thrown.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Optional.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Optional.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Optional.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Optional.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Optional.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Preview">
            <summary>
            Returns a preview to the caller, if subscribed to.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Preview.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Returns a preview to the caller, if subscribed to.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Preview.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Preview.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Preview.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Preview.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Print">
            <summary>
            Prints to the console.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Print.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Prints to the console.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Print.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Print.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Print.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Print.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.PrintLine">
            <summary>
            Prints to the console, ending with a new line.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PrintLine.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Prints to the console, ending with a new line.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.PrintLine.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.PrintLine.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PrintLine.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PrintLine.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PrintLine.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Properties">
            <summary>
            Extract the properties of a type or an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Properties.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Extract the properties of a type or an object.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Properties.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Properties.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Properties.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Properties.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Properties.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.PropertyEnumerators.DefaultPropertyEnumerator">
            <summary>
            Enumerates any type of object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.DefaultPropertyEnumerator.#ctor">
            <summary>
            Enumerates any type of object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.DefaultPropertyEnumerator.EnumerateProperties(System.Object)">
            <summary>
            Enumerates the properties of an object (of a type it supports).
            </summary>
            <param name="Object">Object</param>
            <returns>Property enumeration as a script element.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.DefaultPropertyEnumerator.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.PropertyEnumerators.IPropertyEnumerator">
            <summary>
            Interface for property enumerators.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.IPropertyEnumerator.EnumerateProperties(System.Object)">
            <summary>
            Enumerates the properties of an object (of a type it supports).
            </summary>
            <param name="Object">Object</param>
            <returns>Property enumeration as a script element.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.PropertyEnumerators.TypePropertyEnumerator">
            <summary>
            Enumerates properties in a <see cref="T:System.Type"/> object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.TypePropertyEnumerator.#ctor">
            <summary>
            Enumerates properties in a <see cref="T:System.Type"/> object.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.TypePropertyEnumerator.EnumerateProperties(System.Object)">
            <summary>
            Enumerates the properties of an object (of a type it supports).
            </summary>
            <param name="Object">Object</param>
            <returns>Property enumeration as a script element.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.PropertyEnumerators.TypePropertyEnumerator.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Remove">
            <summary>
            Removes a variable from the variables collection, without destroying its value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Removes a variable from the variables collection, without destroying its value.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Remove.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Remove.VariableName">
            <summary>
            Name of variable.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Remove.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Remove.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Required">
            <summary>
            Makes sure an expression is defined. Otherwise, an exception is thrown.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Required.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Makes sure an expression is defined. Otherwise, an exception is thrown.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Required.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Required.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Required.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Required.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Required.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Runtime.Return">
            <summary>
            Returns from a function with a given result value.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Return.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Returns from a function with a given result value.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Runtime.Return.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Return.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Return.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Runtime.Return.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Abs">
            <summary>
            Abs(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Abs.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Abs(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Abs.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Abs.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Abs.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Abs.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Boolean">
            <summary>
            Boolean(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Boolean(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Boolean.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Boolean.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.ToBoolean(System.String)">
            <summary>
            Converts a string to a boolean value, if possible.
            </summary>
            <param name="Value">String value.</param>
            <returns>Boolean value, if converted, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Boolean.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Ceiling">
            <summary>
            Ceiling(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Ceiling.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Ceiling(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Ceiling.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Ceiling.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Ceiling.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Ceiling.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Ceiling.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Double">
            <summary>
            Double(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Double(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Double.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Double.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Double.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Floor">
            <summary>
            Floor(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Floor.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Floor(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Floor.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Floor.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Floor.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Floor.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Guid">
            <summary>
            Guid(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Guid.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Guid(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Guid.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Guid.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Guid.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Guid.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Guid.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Integer">
            <summary>
            Integer(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Integer(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Integer.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Integer.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Integer.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Max">
            <summary>
            Max(x,y)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Max.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Max(x,y)
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Max.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Max.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Max.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Max.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Max.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Min">
            <summary>
            Min(x,y)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Min.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Min(x,y)
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Min.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Min.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Min.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Min.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Min.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.NewGuid">
            <summary>
            NewGuid()
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.NewGuid.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            NewGuid()
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.NewGuid.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.NewGuid.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Number">
            <summary>
            Number(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Number(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Number.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Number.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Number.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Round">
            <summary>
            Round(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Round.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Round(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Round.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Round.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Round.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Round.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Sign">
            <summary>
            Sign(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Sign.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sign(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Sign.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Sign.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Sign.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Sign.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.String">
            <summary>
            String(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            String(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.String.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.String.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.String.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Scalar.Uri">
            <summary>
            Uri(x)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Uri.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Uri(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Scalar.Uri.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Uri.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Uri.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Uri.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Scalar.Uri.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.After">
            <summary>
            After(s,Delimiter)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.After.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            After(s,Delimiter)
            </summary>
            <param name="String">String.</param>
            <param name="Delimiter">Delimiter</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.After.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.After.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.After.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Before">
            <summary>
            Before(s,Delimiter)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Before.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Before(s,Delimiter)
            </summary>
            <param name="String">String.</param>
            <param name="Delimiter">Delimiter</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Before.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Before.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Before.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Concat">
            <summary>
            Concatenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Concat.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Concatenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
            <param name="Vector">Vector of elements to concatenate.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Concat.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Concatenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
            <param name="Vector">Vector of elements to concatenate.</param>
            <param name="Delimiter">Optional delimiter.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Concat.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Concat.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Concat.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.EndsWith">
            <summary>
            EndsWith(String,Substring)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.EndsWith.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            EndsWith(String,Substring)
            </summary>
            <param name="String">String.</param>
            <param name="Substring">Delimiter</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.EndsWith.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.EndsWith.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.EndsWith.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Evaluate">
            <summary>
            Evaluate(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Evaluate.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Evaluate(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Evaluate.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Evaluate.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Evaluate.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Evaluate.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Evaluate.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.IsEmpty">
            <summary>
            IsEmpty(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            IsEmpty(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.IsEmpty.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.IsEmpty.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsEmpty.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.IsNotEmpty">
            <summary>
            IsNotEmpty(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsNotEmpty.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            IsNotEmpty(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.IsNotEmpty.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.IsNotEmpty.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.IsNotEmpty.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Length">
            <summary>
            Length(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Length.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Length(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Length.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Length.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Length.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.LowerCase">
            <summary>
            LowerCase(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.LowerCase.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LowerCase(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.LowerCase.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.LowerCase.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.PadLeft">
            <summary>
            PadLeft(s,N)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.PadLeft.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            PadLeft(s,N)
            </summary>
            <param name="String">String.</param>
            <param name="N">Expected width.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.PadLeft.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.PadLeft.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.PadLeft.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.PadRight">
            <summary>
            PadRight(s,N)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.PadRight.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            PadRight(s,N)
            </summary>
            <param name="String">String.</param>
            <param name="N">Expected width.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.PadRight.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.PadRight.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.PadRight.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Parse">
            <summary>
            Parse(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Parse.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Parse(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Parse.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Parse.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Replace">
            <summary>
            Replace(String,From,To)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Replace.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Replaceenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
            <param name="String">String to operate on.</param>
            <param name="From">Substring to replace.</param>
            <param name="To">Substrings will be replaced with this.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Replace.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Replaceenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
            <param name="String">String to operate on.</param>
            <param name="From">Substring to replace.</param>
            <param name="To">Substrings will be replaced with this.</param>
            <param name="UseRegex">If <paramref name="From"/> is a regular expression.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Replace.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Replaceenates the elements of a vector, optionally delimiting the elements with a Delimiter.
            </summary>
            <param name="String">String to operate on.</param>
            <param name="From">Substring to replace.</param>
            <param name="To">Substrings will be replaced with this.</param>
            <param name="Options">Regex options</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Replace.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Replace.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Replace.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Replace.GetOptions(System.String,Waher.Script.Model.ScriptNode)">
            <summary>
            Converts a string-representation of regex options into an
            enumeration value.
            </summary>
            <param name="Options">String-representation of options.</param>
            <param name="Node">Node performing the calcaultion.</param>
            <returns>Options.</returns>
            <exception cref="T:Waher.Script.Exceptions.ScriptRuntimeException">If options are not recognized.</exception>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Split">
            <summary>
            Split(String,Substring)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Split.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Split(String,Substring)
            </summary>
            <param name="String">String.</param>
            <param name="Substring">Delimiter</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Split.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Split.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Split.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.StartsWith">
            <summary>
            StartsWith(String,Substring)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.StartsWith.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            StartsWith(String,Substring)
            </summary>
            <param name="String">String.</param>
            <param name="Substring">Delimiter</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.StartsWith.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Strings.StartsWith.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.StartsWith.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">String.</param>
            <param name="Argument2">Delimiter</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.Trim">
            <summary>
            Trim(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Trim.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Trim(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.Trim.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.Trim.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.TrimEnd">
            <summary>
            TrimEnd(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.TrimEnd.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            TrimEnd(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.TrimEnd.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.TrimEnd.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.TrimStart">
            <summary>
            TrimStart(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.TrimStart.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            TrimStart(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.TrimStart.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.TrimStart.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Strings.UpperCase">
            <summary>
            UpperCase(s)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.UpperCase.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            UpperCase(x)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Strings.UpperCase.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Strings.UpperCase.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Transforms.Rotate2D">
            <summary>
            Creates a rotation matrix in 2-dimentional space.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Rotate2D.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a rotation matrix in 2-dimentional space.
            </summary>
            <param name="Angle">Angle of rotation.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Rotate2D.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Rotate2D.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Rotate2D.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Transforms.Rotate2DH">
            <summary>
            Creates a rotation matrix in 2-dimentional homogenous coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Rotate2DH.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a rotation matrix in 2-dimentional homogenous coordinates.
            </summary>
            <param name="Angle">Angle of rotation.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Rotate2DH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Rotate2DH.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Rotate2DH.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Transforms.Scale2D">
            <summary>
            Creates a scaling matrix in 2-dimentional space.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2D.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a scaling matrix in 2-dimentional space.
            </summary>
            <param name="Sx">Scaling factor along x-axis.</param>
            <param name="Sy">Scaling factor along y-axis.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Scale2D.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Scale2D.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2D.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2D.EvaluateScalar(System.Numerics.Complex,System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Transforms.Scale2DH">
            <summary>
            Creates a scaling matrix in 2-dimentional homogenous coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2DH.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a scaling matrix in 2-dimentional homogenous coordinates.
            </summary>
            <param name="Sx">Scaling factor along x-axis.</param>
            <param name="Sy">Scaling factor along y-axis.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Scale2DH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Scale2DH.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2DH.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Scale2DH.EvaluateScalar(System.Numerics.Complex,System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Transforms.Translate2DH">
            <summary>
            Creates a translation matrix for 2-dimentional homogenous coordinates.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Translate2DH.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a translation matrix for 2-dimentional homogenous coordinates.
            </summary>
            <param name="Dx">Translation along x-axis.</param>
            <param name="Dy">Translation along y-axis.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Translate2DH.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Transforms.Translate2DH.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Translate2DH.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Transforms.Translate2DH.EvaluateScalar(System.Numerics.Complex,System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.And">
            <summary>
            And(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            And(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.And.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.CalcAnd(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary AND of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>And(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.And.CalcAnd(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical AND of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>And(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Average">
            <summary>
            Average(v), Avg(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Average(v), Avg(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Average.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Average.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.CalcAverage(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the average of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Average.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.CalcAverage(System.Numerics.Complex[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the average of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Average.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Average.EvaluateAverage(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the average of the elements of a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Node">Node performing evaluation.</param>
            <returns>Average of elements.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Contains">
            <summary>
            Contains(Vector,Item)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Contains.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Contains(Vector,Item)
            </summary>
            <param name="Vector">Vector.</param>
            <param name="Item">Item</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Contains.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Contains.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Contains.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Count">
            <summary>
            Count(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Count.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Count(v)
            </summary>
            <param name="Vector">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Count.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Count(v,item)
            </summary>
            <param name="Vector">Argument.</param>
            <param name="Item">Item</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Count.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Count.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Count.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.IndexOf">
            <summary>
            IndexOf(Vector,Item[,From])
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.IndexOf.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            IndexOf(Vector,Item)
            </summary>
            <param name="Vector">Vector.</param>
            <param name="Item">Item</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.IndexOf.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            IndexOf(Vector,Item,From)
            </summary>
            <param name="Vector">Vector.</param>
            <param name="Item">Item</param>
            <param name="From">From which element to start search.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.IndexOf.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.IndexOf.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.IndexOf.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Join">
            <summary>
            Joins vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors in a vector of vectors.
            </summary>
            <param name="v">Vector of vectors</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="v5">Vector 5</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="v5">Vector 5</param>
            <param name="v6">Vector 6</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="v5">Vector 5</param>
            <param name="v6">Vector 6</param>
            <param name="v7">Vector 7</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="v5">Vector 5</param>
            <param name="v6">Vector 6</param>
            <param name="v7">Vector 7</param>
            <param name="v8">Vector 8</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Joins vectors.
            </summary>
            <param name="v1">Vector 1</param>
            <param name="v2">Vector 2</param>
            <param name="v3">Vector 3</param>
            <param name="v4">Vector 4</param>
            <param name="v5">Vector 5</param>
            <param name="v6">Vector 6</param>
            <param name="v7">Vector 7</param>
            <param name="v8">Vector 8</param>
            <param name="v9">Vector 9</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Join.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Join.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Join.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.LastIndexOf">
            <summary>
            LastIndexOf(Vector,Item[,From])
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.LastIndexOf.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LastIndexOf(Vector,Item)
            </summary>
            <param name="Vector">Vector.</param>
            <param name="Item">Item</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.LastIndexOf.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            LastIndexOf(Vector,Item,From)
            </summary>
            <param name="Vector">Vector.</param>
            <param name="Item">Item</param>
            <param name="From">From which element to start search.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.LastIndexOf.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.LastIndexOf.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.LastIndexOf.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Left">
            <summary>
            Left(x,N)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Left.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Left(x,N)
            </summary>
            <param name="X">Argument.</param>
            <param name="N">Number of elements</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Left.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Left.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Left.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Max">
            <summary>
            Max(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Max(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Max.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.CalcMax(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the largest value.
            </summary>
            <param name="Values">Set of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Largest value.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.CalcMax(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the largest value.
            </summary>
            <param name="Values">Set of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Largest value.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Max.CalcMax(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the largest value.
            </summary>
            <param name="Matrix">Matrix of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Largest value.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Median">
            <summary>
            Median(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Median.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Median(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Median.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Median.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Median.CalcMedian(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the median value.
            </summary>
            <param name="Values">Set of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Median value.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Median.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Mid">
            <summary>
            Mid(x,Pos,Len)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Mid.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Mid(x,Pos,Len)
            </summary>
            <param name="X">Argument.</param>
            <param name="Pos">Starting position</param>
            <param name="Len">Number of elements</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Mid.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Mid.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Mid.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Min">
            <summary>
            Min(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Min(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Min.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.CalcMin(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the smallest value.
            </summary>
            <param name="Values">Set of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Smallest value.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.CalcMin(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the smallest value.
            </summary>
            <param name="Values">Set of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Smallest value.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Min.CalcMin(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Model.ScriptNode)">
            <summary>
            Returns the smallest value.
            </summary>
            <param name="Matrix">Matrix of values. Must not be empty.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Smallest value.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Nand">
            <summary>
            Nand(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Nand(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Nand.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.CalcNand(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary NAND of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Nand(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nand.CalcNand(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical NAND of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Nand(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Nor">
            <summary>
            Nor(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Nor(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Nor.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.CalcNor(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary NOR of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Nor(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Nor.CalcNor(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical NOR of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Nor(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Ones">
            <summary>
            Creates a vector containing only ones.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Ones.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector containing only ones.
            </summary>
            <param name="Dimension">Vector dimension.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Ones.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Ones.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Or">
            <summary>
            Or(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Or(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Or.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.CalcOr(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary OR of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Or(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Or.CalcOr(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical OR of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Or(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Product">
            <summary>
            Product(v), Prod(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Product(v), Prod(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Product.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Product.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.CalcProduct(System.Double[])">
            <summary>
            Calculates the product of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.CalcProduct(System.Numerics.Complex[])">
            <summary>
            Calculates the product of a set of complex values.
            </summary>
            <param name="Values">Values</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Product.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Reverse">
            <summary>
            Reverse(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Reverse(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Reverse.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.EvaluateNonVector(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a non-vector. By default, the non-vector argument is converted to a vector of length 1.
            </summary>
            <param name="Argument">Non-vector argument.</param>
            <param name="Variables">Variables.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Reverse.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Right">
            <summary>
            Right(x,N)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Right.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Right(x,N)
            </summary>
            <param name="X">Argument.</param>
            <param name="N">Number of elements</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Right.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Right.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Right.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Sample">
            <summary>
            Sample(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sample.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sample(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Sample.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sample.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sample.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sample.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Sort">
            <summary>
            Sort(v[,x1[,x2[,x3[,x4[,x5[,x6[,x7[,x8[,x9]]]]]]]]])
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4,x5)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Order5">Fifth order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4,x5,x6)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Order5">Fifth order.</param>
            <param name="Order6">Sixth order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4,x5,x6,x7)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Order5">Fifth order.</param>
            <param name="Order6">Sixth order.</param>
            <param name="Order7">Seventh order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4,x5,x6,x7,x8)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Order5">Fifth order.</param>
            <param name="Order6">Sixth order.</param>
            <param name="Order7">Seventh order.</param>
            <param name="Order8">Eights order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sort(v,x1,x2,x3,x4,x5,x6,x7,x8,x9)
            </summary>
            <param name="Vector">Vector to sort.</param>
            <param name="Order1">First order.</param>
            <param name="Order2">Second order.</param>
            <param name="Order3">Third order.</param>
            <param name="Order4">Fourth order.</param>
            <param name="Order5">Fifth order.</param>
            <param name="Order6">Sixth order.</param>
            <param name="Order7">Seventh order.</param>
            <param name="Order8">Eights order.</param>
            <param name="Order9">Ninth order.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Sort.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Sort.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sort.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.StandardDeviation">
            <summary>
            StandardDeviation(v), StdDev(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            StandardDeviation(v), StdDev(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.StandardDeviation.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.StandardDeviation.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.CalcStandardDeviation(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the standard deviation of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Standard deviation.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.CalcStandardDeviation(System.Numerics.Complex[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the standard deviation of a set of complex values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Standard deviation.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.StandardDeviation.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Sum">
            <summary>
            Sum(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sum(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Sum.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Sum.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.CalcSum(System.Double[])">
            <summary>
            Calculates the sum of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.CalcSum(System.Numerics.Complex[])">
            <summary>
            Calculates the sum of a set of complex values.
            </summary>
            <param name="Values">Values</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Sum.EvaluateSum(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Model.ScriptNode)">
            <summary>
            Sums the elements of a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Node">Node performing evaluation.</param>
            <returns>Sum of elements.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Variance">
            <summary>
            Variance(v), Var(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Variance(v), Var(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Variance.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Variance.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.CalcVariance(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the variance of a set of double values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Variance.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.CalcVariance(System.Numerics.Complex[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the variance of a set of complex values.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Variance.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Variance.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Xnor">
            <summary>
            Xnor(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Xnor(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Xnor.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.CalcXnor(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary XNOR of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Xnor(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xnor.CalcXnor(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical XNOR of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Xnor(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Xor">
            <summary>
            Xor(v)
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Xor(v)
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Xor.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.CalcXor(System.Double[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the binary XOR of all double-valued elements. Values must be integers.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Xor(Values)</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Xor.CalcXor(System.Boolean[],Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates the logical XOR of all boolean-valued elements.
            </summary>
            <param name="Values">Values</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Xor(Values)</returns>
        </member>
        <member name="T:Waher.Script.Functions.Vectors.Zeroes">
            <summary>
            Creates a vector containing only ones.
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Zeroes.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector containing only ones.
            </summary>
            <param name="Dimension">Dimension of vector.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Functions.Vectors.Zeroes.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="M:Waher.Script.Functions.Vectors.Zeroes.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.IContextVariables">
            <summary>
            Variables available in a specific context.
            </summary>
        </member>
        <member name="M:Waher.Script.IContextVariables.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Script.IContextVariables.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="M:Waher.Script.IContextVariables.Add(System.String,System.Object)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Associated variable object value.</param>
        </member>
        <member name="T:Waher.Script.Model.BinaryBooleanOperator">
            <summary>
            Base class for binary boolean operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary boolean operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.Evaluate(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.Evaluate(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.Evaluate(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateOptimizedResultAsync(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateAsync(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateAsync(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateAsync(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryBooleanOperator.EvaluateAsync(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.BinaryDoubleOperator">
            <summary>
            Base class for binary double operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary double operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDoubleOperator.EvaluateAsync(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.BinaryDualBoolDoubleOperator">
            <summary>
            Base class for binary dual double/bool operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary dual double/bool operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateOptimizedResultAsync(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateAsync(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryDualBoolDoubleOperator.EvaluateAsync(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.BinaryElementWiseDoubleOperator">
            <summary>
            Base class for binary element-wise double operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseDoubleOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary element-wise double operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseDoubleOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseDoubleOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseDoubleOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.BinaryElementWiseOperator">
            <summary>
            Base class for binary element-wise operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary element-wise operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryElementWiseOperator.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.BinaryOperator">
            <summary>
            Base class for all binary operators.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.BinaryOperator.left">
            <summary>
            Left operand.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.BinaryOperator.right">
            <summary>
            Right operand.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.BinaryOperator.isAsync">
            <summary>
            If subtree is asynchroneous.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all binary operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.CalcIsAsync">
            <summary>
            Recalculates if operator is asynchronous or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.BinaryOperator.LeftOperand">
            <summary>
            Left operand.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.BinaryOperator.RightOperand">
            <summary>
            Right operand.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.BinaryOperator.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.BinaryOperator.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.BinaryOperator.EvaluateNamedOperator(System.String,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates a named operator available in code-behind.
            </summary>
            <param name="Name">Name of operator.
            
            Reference: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads</param>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operad.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.UpgradeBehaviour">
            <summary>
            How operands are to be handled if not of the same type.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.UpgradeBehaviour.DifferentTypesOk">
            <summary>
            Different types are OK.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.UpgradeBehaviour.UpgradeIfPossble">
            <summary>
            Try to upgrade. But if not possible, it's OK.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.UpgradeBehaviour.SameTypeRequired">
            <summary>
            All operands need to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.BinaryScalarOperator">
            <summary>
            Base class for binary scalar operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary scalar operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryScalarOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Model.BinaryScalarOperator.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.BinaryVectorOperator">
            <summary>
            Base class for binary vector operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary vector operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on vector operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.BinaryVectorOperator.EvaluateVectorAsync(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on vector operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Model.BinaryVectorOperator.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.ConstantElement">
            <summary>
            Represents a constant element value.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.#ctor(Waher.Script.Abstraction.Elements.IElement,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a constant element value.
            </summary>
            <param name="Constant">Constant.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.ConstantElement.Constant">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ConstantElement.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ConstantElement.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ConstantElement.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ConstantElement.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="P:Waher.Script.Model.ConstantElement.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.ConstantElement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.Extensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.Extensions.SetParent(System.Collections.Generic.IEnumerable{Waher.Script.Model.ScriptNode},Waher.Script.Model.ScriptNode)">
            <summary>
            Sets the parent node on a set of nodes.
            </summary>
            <param name="Nodes">Set of nodes, possibly null or empty.</param>
            <param name="Parent">Parent Node</param>
            <exception cref="T:Waher.Script.Exceptions.ScriptException">If the parent is already set, and you try to set it to another parent node.</exception>
        </member>
        <member name="M:Waher.Script.Model.Extensions.ForAllChildNodes(Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the <see cref="M:Waher.Script.Model.ScriptNode.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)"/> method for all nodes in an array.
            </summary>
            <param name="Nodes">Script node array</param>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.Extensions.ForAll(Waher.Script.Model.ScriptNode[],Waher.Script.Model.ScriptNodeEventHandler,Waher.Script.Model.ScriptNode,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all nodes in an array.
            </summary>
            <param name="Nodes">Script node array</param>
            <param name="Callback">Callback method to call.</param>
            <param name="Parent">Parent node.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="IncludeChildren">If children should also be included. Corresponds to 
            <see cref="F:Waher.Script.Model.SearchMethod.TreeOrder"/>.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="T:Waher.Script.Model.Function">
            <summary>
            Base class for all funcions.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.Function.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all funcions.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.Function.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Model.Function.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.Function.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Model.Function.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.FunctionMultiVariate">
            <summary>
            Base class for multivariate funcions.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes0">
            <summary>
            Zero parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes1Normal">
            <summary>
            One scalar parameter.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes2Normal">
            <summary>
            Two normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes3Normal">
            <summary>
            Three normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes4Normal">
            <summary>
            Four normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes5Normal">
            <summary>
            Five normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes6Normal">
            <summary>
            Six normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes7Normal">
            <summary>
            Seven normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes8Normal">
            <summary>
            Eight normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes9Normal">
            <summary>
            Nine normal parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes1Scalar">
            <summary>
            One scalar parameter.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes2Scalar">
            <summary>
            Two scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes3Scalar">
            <summary>
            Three scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes4Scalar">
            <summary>
            Four scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes5Scalar">
            <summary>
            Five scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes6Scalar">
            <summary>
            Six scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes7Scalar">
            <summary>
            Seven scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes8Scalar">
            <summary>
            Eight scalar parameters.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.FunctionMultiVariate.argumentTypes9Scalar">
            <summary>
            Nine scalar parameters.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.#ctor(Waher.Script.Model.ScriptNode[],Waher.Script.Model.ArgumentType[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one variable.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="ArgumentTypes">Argument Types.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionMultiVariate.Arguments">
            <summary>
            Function arguments.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionMultiVariate.ArgumentTypes">
            <summary>
            Function argument types.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionMultiVariate.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.FunctionMultiVariate.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.FunctionMultiVariate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.FunctionOneMatrixVariable">
            <summary>
            Base class for funcions of one matrix variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one matrix variable.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionOneMatrixVariable.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrix(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrix(Waher.Script.Objects.Matrices.DoubleMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrix(Waher.Script.Objects.Matrices.ComplexMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrix(Waher.Script.Objects.Matrices.BooleanMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrixAsync(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrixAsync(Waher.Script.Objects.Matrices.DoubleMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrixAsync(Waher.Script.Objects.Matrices.ComplexMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneMatrixVariable.EvaluateMatrixAsync(Waher.Script.Objects.Matrices.BooleanMatrix,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a matrix argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Model.FunctionOneScalarVariable">
            <summary>
            Base class for funcions of one scalar variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one scalar variable.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalar(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalar(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalar(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalar(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalarAsync(System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalarAsync(System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalarAsync(System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneScalarVariable.EvaluateScalarAsync(System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a scalar argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Model.FunctionOneVariable">
            <summary>
            Base class for funcions of one variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one variable.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionOneVariable.Argument">
            <summary>
            Function argument.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionOneVariable.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionOneVariable.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.FunctionOneVariable.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVariable.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.FunctionOneVectorVariable">
            <summary>
            Base class for funcions of one vector variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one vector variable.
            </summary>
            <param name="Argument">Argument.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionOneVectorVariable.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateNonVector(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a non-vector. By default, the non-vector argument is converted to a vector of length 1.
            </summary>
            <param name="Argument">Non-vector argument.</param>
            <param name="Variables">Variables.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateNonVectorAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a non-vector. By default, the non-vector argument is converted to a vector of length 1.
            </summary>
            <param name="Argument">Non-vector argument.</param>
            <param name="Variables">Variables.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVector(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVector(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVector(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVectorAsync(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVectorAsync(Waher.Script.Objects.VectorSpaces.DoubleVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVectorAsync(Waher.Script.Objects.VectorSpaces.ComplexVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionOneVectorVariable.EvaluateVectorAsync(Waher.Script.Objects.VectorSpaces.BooleanVector,Waher.Script.Variables)">
            <summary>
            Evaluates the function on a vector argument.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Model.FunctionTwoScalarVariables">
            <summary>
            Base class for funcions of two scalar variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one scalar variable.
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalar(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalar(System.Numerics.Complex,System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalar(System.Boolean,System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalar(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalarAsync(System.Double,System.Double,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalarAsync(System.Numerics.Complex,System.Numerics.Complex,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalarAsync(System.Boolean,System.Boolean,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoScalarVariables.EvaluateScalarAsync(System.String,System.String,Waher.Script.Variables)">
            <summary>
            Evaluates the function on two scalar arguments.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Script.Model.FunctionTwoVariables">
            <summary>
            Base class for funcions of one variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one variable.
            </summary>
            <param name="Argument1">Argument 1.</param>
            <param name="Argument2">Argument 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionTwoVariables.Argument1">
            <summary>
            Function argument 1.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionTwoVariables.Argument2">
            <summary>
            Function argument 2.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionTwoVariables.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="P:Waher.Script.Model.FunctionTwoVariables.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.FunctionTwoVariables.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument1">Function argument 1.</param>
            <param name="Argument2">Function argument 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.FunctionTwoVariables.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.FunctionZeroVariables">
            <summary>
            Base class for funcions of zero variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionZeroVariables.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for funcions of one variable.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.FunctionZeroVariables.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Script.Model.FunctionZeroVariables.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="T:Waher.Script.Model.IConstant">
            <summary>
            Base interface for constants that integrate into the script engine.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IConstant.ConstantName">
            <summary>
            Name of the constant
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IConstant.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the constant, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.IConstant.GetValueElement(Waher.Script.Variables)">
            <summary>
            Gets the constant value element.
            </summary>
            <param name="Variables">Current set of variables.</param>
        </member>
        <member name="T:Waher.Script.Model.IDifferentiable">
            <summary>
            Base interface for lambda expressions.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.IDifferentiable.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="P:Waher.Script.Model.IDifferentiable.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.IEvaluateAsync">
            <summary>
            Interface for script nodes with asynchronous evaluation
            </summary>
        </member>
        <member name="M:Waher.Script.Model.IEvaluateAsync.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node asynchronously, using the variables provided in 
            the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Model.ArgumentType">
            <summary>
            Type of parameter used in a function definition or a lambda definition.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ArgumentType.Normal">
            <summary>
            Normal argument. Passed as-is.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ArgumentType.Scalar">
            <summary>
            Scalar argument. If a non-scalar is passed to a scalar argument, the function is canonically extended by repeatedly 
            calling it for each scalar member.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ArgumentType.Vector">
            <summary>
            Vector argument. If a scalar is passed as an argument, it is converted to a vector. If a matrix is passed, the function is 
            canonically extended by repeatedly calling it for each row vector of the matrix.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ArgumentType.Set">
            <summary>
            Set argument. If a scalar is passed as an argument, it is converted to a set. If a matrix is passed, the function is 
            canonically extended by repeatedly calling it for each row vector of the matrix.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ArgumentType.Matrix">
            <summary>
            Matrix argument. If a scalar or a vector is passed as an argument, is is converted to a matrix first.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.IFunction">
            <summary>
            Base interface for functions that integrate into the script engine.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IFunction.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IFunction.Aliases">
            <summary>
            Optional aliases. If there are no aliases for the function, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IFunction.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="T:Waher.Script.Model.IKeyWord">
            <summary>
            Interface for keywords with custom parsing.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IKeyWord.KeyWord">
            <summary>
            Keyword associated with custom parser.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IKeyWord.Aliases">
            <summary>
            Keyword aliases, if available, null if none.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.IKeyWord.InternalKeywords">
            <summary>
            Any keywords used internally by the custom parser.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.IKeyWord.TryParse(Waher.Script.Model.ScriptParser,Waher.Script.Model.ScriptNode@)">
            <summary>
            Tries to parse a script node.
            </summary>
            <param name="Parser">Custom parser.</param>
            <param name="Result">Parsed Script Node.</param>
            <returns>If successful in parsing a script node.</returns>
        </member>
        <member name="T:Waher.Script.Model.ILambdaExpression">
            <summary>
            Base interface for lambda expressions.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ILambdaExpression.NrArguments">
            <summary>
            Number of arguments.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ILambdaExpression.ArgumentNames">
            <summary>
            Argument Names.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ILambdaExpression.ArgumentTypes">
            <summary>
            Argument types.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ILambdaExpression.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ILambdaExpression.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.ILambdaExpression.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Model.NullCheckBinaryOperator">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.NullCheckBinaryOperator.nullCheck">
            <summary>
            If null should be returned if operand is null.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.NullCheckBinaryOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.NullCheckBinaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.NullCheckBinaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.NullCheckTernaryOperator">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.NullCheckTernaryOperator.nullCheck">
            <summary>
            If null should be returned if operand is null.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.NullCheckTernaryOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Middle">Middle operand.</param>
            <param name="Right">Right operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.NullCheckTernaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.NullCheckTernaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.NullCheckUnaryOperator">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.NullCheckUnaryOperator.nullCheck">
            <summary>
            If null should be returned if operand is null.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryOperator.#ctor(Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all unary operators performing operand null checks.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.NullCheckUnaryScalarOperator">
            <summary>
            Base class for all unary scalar operators performing operand null checks.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.NullCheckUnaryScalarOperator.nullCheck">
            <summary>
            If null should be returned if operand is null.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryScalarOperator.#ctor(Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all unary scalar operators performing operand null checks.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryScalarOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.NullCheckUnaryScalarOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.QuaternaryOperator">
            <summary>
            Base class for all quaternary operators.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.QuaternaryOperator.middle2">
            <summary>
            Second Middle operand.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.QuaternaryOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all quaternary operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Middle1">First Middle operand.</param>
            <param name="Middle2">Second Middle operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.QuaternaryOperator.CalcIsAsync">
            <summary>
            Recalculates if operator is asynchronous or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.QuaternaryOperator.Middle2Operand">
            <summary>
            Second middle operand.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.QuaternaryOperator.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.QuaternaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.QuaternaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.ScriptLeafNode">
            <summary>
            Base class for leaf nodes in a parsed script tree.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptLeafNode.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for leaf nodes in a parsed script tree.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.ScriptLeafNode.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="T:Waher.Script.Model.ScriptLeafNodeVariableReference">
            <summary>
            Represents a variable reference.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.ScriptLeafNodeVariableReference.variableName">
            <summary>
            Name of variable being referenced by the node.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptLeafNodeVariableReference.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a variable reference.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.ScriptLeafNodeVariableReference.VariableName">
            <summary>
            Variable Name.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptLeafNodeVariableReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.ScriptLeafNodeVariableReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.PatternMatchResult">
            <summary>
            Status result of a pattern matching operation.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.PatternMatchResult.Match">
            <summary>
            Script branch matches pattern
            </summary>
        </member>
        <member name="F:Waher.Script.Model.PatternMatchResult.NoMatch">
            <summary>
            Script branch does not match pattern
            </summary>
        </member>
        <member name="F:Waher.Script.Model.PatternMatchResult.Unknown">
            <summary>
            Pattern match could not be evaluated.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.SearchMethod">
            <summary>
            Method to traverse the expression structure
            </summary>
        </member>
        <member name="F:Waher.Script.Model.SearchMethod.DepthFirst">
            <summary>
            Children are processed before their corresponding parents.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.SearchMethod.BreadthFirst">
            <summary>
            Siblings are processed before their corresponding children.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.SearchMethod.TreeOrder">
            <summary>
            After each node is processed, their children are recursively processed,
            before going on to the next sibling.
            </summary>
        </member>
        <member name="T:Waher.Script.Model.ScriptNodeEventHandler">
            <summary>
            Delegate for ScriptNode callback methods.
            </summary>
            <param name="Node">Node being processed. Change the reference to change the structure of the expression.</param>
            <param name="NewNode">A new node to replace the old node, or null if no replacement necessary.</param>
            <param name="State">State object.</param>
            <returns>true if process is to continue, false if it is completed.</returns>
        </member>
        <member name="T:Waher.Script.Model.ScriptNode">
            <summary>
            Base class for all nodes in a parsed script tree.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all nodes in a parsed script tree.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.Start">
            <summary>
            Start position in script expression.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.Length">
            <summary>
            Length of expression covered by node.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.SetSubExpression(System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="P:Waher.Script.Model.ScriptNode.Start"/> and <see cref="P:Waher.Script.Model.ScriptNode.Length"/> properties of the node.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.SetParent(Waher.Script.Model.ScriptNode)">
            <summary>
            Sets the parent node. Can only be used when expression is being parsed.
            </summary>
            <param name="Parent">Parent Node</param>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is false.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            This method should be used for nodes whose <see cref="P:Waher.Script.Model.ScriptNode.IsAsynchronous"/> is true.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.Expression">
            <summary>
            Expression of which the node is a part.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptNode.SubExpression">
            <summary>
            Sub-expression defining the node.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.DifferentiationChainRule(System.String,Waher.Script.Variables,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Implements the differentiation chain rule, by differentiating the argument and multiplying it to the differentiation of the main node.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <param name="Argument">Inner argument</param>
            <param name="Differentiation">Differentiation of main node.</param>
            <returns><paramref name="Differentiation"/>*D(<paramref name="Argument"/>)</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,System.Boolean)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="DepthFirst">If calls are made depth first (true) or on each node and then its leaves (false).</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.AreEqual(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode)">
            <summary>
            Compares if two script nodes are equal.
            </summary>
            <param name="S1">Node 1. Can be null.</param>
            <param name="S2">Node 2. Can be null.</param>
            <returns>If the size and contents of the arrays are equal</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compares if the contents of two enumerable sets are equal
            </summary>
            <param name="A1">Array 1</param>
            <param name="A2">Array 2</param>
            <returns>If the size and contents of the arrays are equal</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.GetHashCode(Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates a hash code for the contents of an array.
            </summary>
            <param name="Node">Node. Can be null.</param>
            <returns>Hash code</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.GetHashCode(System.Collections.IEnumerable)">
            <summary>
            Calculates a hash code for the contents of an array.
            </summary>
            <param name="Set">Enumerable set.</param>
            <returns>Hash code</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.ToBoolean(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Tries to convert an element to a boolean value.
            </summary>
            <param name="Value">Element value.</param>
            <returns>Boolean, if successful.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.ToEnum``1(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Tries to convert an element to an enumeration value.
            </summary>
            <param name="Value">Element value.</param>
            <returns>Enumeration value, if successful.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.WaitPossibleTask(System.Object)">
            <summary>
            Waits for any asynchronous process to terminate.
            </summary>
            <param name="Result">Result, possibly asynchronous result.</param>
            <returns>Finished result</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptNode.UnnestPossibleTaskSync(System.Object)">
            <summary>
            Checks if <paramref name="Result"/> is an asynchronous results. If so, blocks the current thread until the result
            is completed, and returns the completed result instead.
            </summary>
            <param name="Result">Result</param>
            <returns>Finished result.</returns>
        </member>
        <member name="F:Waher.Script.Model.ScriptNode.EmptyNode">
            <summary>
            Empty Script Node
            </summary>
        </member>
        <member name="T:Waher.Script.Model.ScriptParser">
            <summary>
            Script parser, for custom parsers.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.#ctor(Waher.Script.Expression,System.Int32)">
            <summary>
            Script parser, for custom parsers.
            </summary>
            <param name="Expression">Expression being parsed.</param>
            <param name="Start">Start position of subexpression</param>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.Start">
            <summary>
            Start position in expression
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.Length">
            <summary>
            Length of script parsed
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.Position">
            <summary>
            Current parsing position.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.Expression">
            <summary>
            Expression being parsed.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.CanSkipWhitespace">
            <summary>
            If whitespace can be skipped (true), or if it has semantic meaning to the custom parser (false).
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.NextChar">
            <summary>
            Returns the next character to be parsed, and moves the position forward one character.
            If no character is available, 0 is returned.
            </summary>
            <returns>Character</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.NextNonWhitespaceChar">
            <summary>
            Returns the next non-whitespace character to be parsed, and moves the 
            position forward accordingly. If no character is available, 0 is returned.
            </summary>
            <returns>Character</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.UndoChar">
            <summary>
            Undoes a character in the parsing of an expression.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.PeekNextChars(System.Int32)">
            <summary>
            Returns the next given number of characters to be parsed, without moving the position 
            forward one character. If no character is available, the string is truncated.
            </summary>
            <returns>Characters</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.IsNextChars(System.String)">
            <summary>
            If the next characters to be parsed is a given token.
            </summary>
            <param name="Token">Token</param>
            <returns>If the token is the next to be parsed.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.IsNextChars(System.Char,System.Int32)">
            <summary>
            If the next characters to be parsed is a given token consisting of
            a character being repeated a given amount of times.
            </summary>
            <param name="ch">Character</param>
            <param name="Count">Number of times character is repeated.</param>
            <returns>If the token is the next to be parsed.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.SkipChars(System.Int32)">
            <summary>
            Skips a predefined number of characters.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.PeekNextChar">
            <summary>
            Returns the next character to be parsed, without moving the position forward one character.
            If no character is available, 0 is returned.
            </summary>
            <returns>Character</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.NextToken">
            <summary>
            Returns the next token to be parsed, and moves the position forward correspondingly.
            If at the end of the expression, <see cref="F:System.String.Empty"/> is returned.
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.PeekNextToken">
            <summary>
            Returns the next token to be parsed, without moving the position forward.
            If at the end of the expression, <see cref="F:System.String.Empty"/> is returned.
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.SkipWhiteSpace">
            <summary>
            If current position is whitespace, moves the current position forward to the first non-whitespace character,
            or the end of the expression.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.AssertOperandNotNull(Waher.Script.Model.ScriptNode)">
            <summary>
            Throws an exception if an operand is not null.
            </summary>
            <param name="Node">Operand node.</param>
            <returns><paramref name="Node"/></returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.AssertRightOperandNotNull(Waher.Script.Model.ScriptNode)">
            <summary>
            Throws an exception if a right-hand side operand is not null.
            </summary>
            <param name="Node">Operand node.</param>
            <returns><paramref name="Node"/></returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseSequence">
            <summary>
            Parses a sequence of statements.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseStatement">
            <summary>
            Parses a statement.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseList">
            <summary>
            Parses an element list.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseIf">
            <summary>
            Parses a conditional statement.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseAssignments">
            <summary>
            Parses an assignment.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseLambdaExpression">
            <summary>
            Parses a lambda expression.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseEquivalence">
            <summary>
            Parses an equivalence.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseOrs">
            <summary>
            Parses ORs.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseAnds">
            <summary>
            Parses ANDs.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseMembership">
            <summary>
            Parses a membership operator.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseComparison">
            <summary>
            Parses a comparison.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseShifts">
            <summary>
            Parses a shift operator.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseUnions">
            <summary>
            Parses unions.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseIntersections">
            <summary>
            Parses intersections.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseInterval">
            <summary>
            Parses an interval.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseTerms">
            <summary>
            Parses terms.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseBinomialCoefficients">
            <summary>
            Parses binomial coefficients.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseFactors">
            <summary>
            Parses factors.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParsePowers">
            <summary>
            Parses powers.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseUnaryPrefixOperator">
            <summary>
            Parses unary prefix operatorrs.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseSuffixOperator">
            <summary>
            Parses suffix operators.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseUnit(System.Boolean)">
            <summary>
            Parses a unit.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.ParseObject">
            <summary>
            Parses an object ex nihilo.
            </summary>
            <returns>Script node.</returns>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.EndOfScript">
            <summary>
            If position is at end of script.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.ScriptParser.InScript">
            <summary>
            If position is in script.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.HasCharacters(System.Int32)">
            <summary>
            If there are a given number of characters left to parse.
            </summary>
            <param name="NrCharacters">Number of characters to check.</param>
            <returns>If the number of characeters are available.</returns>
        </member>
        <member name="M:Waher.Script.Model.ScriptParser.SyntaxError(System.String)">
            <summary>
            Returns a Syntax Error Exception object.
            </summary>
            <param name="Message">Exception message.</param>
            <returns>Exception object.</returns>
        </member>
        <member name="T:Waher.Script.Model.TernaryOperator">
            <summary>
            Base class for all ternary operators.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.TernaryOperator.middle">
            <summary>
            Middle operand.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.TernaryOperator.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all ternary operators.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Middle">Middle operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.TernaryOperator.CalcIsAsync">
            <summary>
            Recalculates if operator is asynchronous or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.TernaryOperator.MiddleOperand">
            <summary>
            Middle operand.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.TernaryOperator.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.TernaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.TernaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.UnaryBooleanOperator">
            <summary>
            Base class for unary boolean operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary boolean operators.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.Evaluate(System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryBooleanOperator.EvaluateAsync(System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.UnaryDoubleOperator">
            <summary>
            Base class for unary double operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for binary double operators.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryDoubleOperator.EvaluateAsync(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.UnaryOperator">
            <summary>
            Base class for all unary operators.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.UnaryOperator.op">
            <summary>
            Operand.
            </summary>
        </member>
        <member name="F:Waher.Script.Model.UnaryOperator.isAsync">
            <summary>
            If subtree is asynchroneous.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for all unary operators.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.UnaryOperator.Operand">
            <summary>
            Operand.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.UnaryOperator.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="P:Waher.Script.Model.UnaryOperator.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.UnaryOperator.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.UnaryOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Model.UnaryScalarOperator">
            <summary>
            Base class for unary scalar operators.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.UnaryScalarOperator.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Base class for unary scalar operators.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.UnaryScalarOperator.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryScalarOperator.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryScalarOperator.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Model.UnaryScalarOperator.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Model.VariableReference">
            <summary>
            Represents a variable reference.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a variable reference.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.#ctor(System.String,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a variable reference.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="OnlyVariables">If only values of variables should be returned (true), or if constants and namespaces should
            also be included in the scope of the reference (false).</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Model.VariableReference.OnlyVariables">
            <summary>
            If only values of variables should be returned (true), or if constants and namespaces should
            also be included in the scope of the reference (false).
            </summary>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="P:Waher.Script.Model.VariableReference.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Model.VariableReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.BooleanValue">
            <summary>
            Boolean-valued number.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Boolean-valued number.
            </summary>
            <param name="Value">Boolean value.</param>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValue.Value">
            <summary>
            Boolean value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValue.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValue.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="F:Waher.Script.Objects.BooleanValue.True">
            <summary>
            Constant true value.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.BooleanValue.False">
            <summary>
            Constant false value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValue.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValue.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValue.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.BooleanValues">
            <summary>
            The field Z_2 of boolean numbers ([0]_2, 0 or false, and [1]_2, 1 or true).
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValues.#ctor">
            <summary>
            The field Z_2 of boolean numbers ([0]_2, 0 or false, and [1]_2, 1 or true).
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValues.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.BooleanValues.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.BooleanValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two double values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.CaseInsensitiveStringValues">
            <summary>
            Semi-group of case-insensitive string values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.CaseInsensitiveStringValues.#ctor">
            <summary>
            Semi-group of case-insensitive string values.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.CaseInsensitiveStringValues.Instance">
            <summary>
            Instance of the set of case-insensitive string values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.CaseInsensitiveStringValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.CaseInsensitiveStringValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.CaseInsensitiveStringValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.CaseInsensitiveStringValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two string values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.ComplexNumber">
            <summary>
            Complex-valued number.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.#ctor(System.Numerics.Complex)">
            <summary>
            Complex-valued number.
            </summary>
            <param name="Value">Complex value.</param>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.#ctor(System.Double,System.Double)">
            <summary>
            Complex-valued number.
            </summary>
            <param name="Re">Real part.</param>
            <param name="Im">Imaginary part.</param>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumber.Value">
            <summary>
            Complex value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumber.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumber.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumber.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumber.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumber.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.ComplexNumbers">
            <summary>
            Pseudo-field of Complex numbers, as an approximation of the field of real numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumbers.#ctor">
            <summary>
            Pseudo-field of Complex numbers, as an approximation of the field of real numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumbers.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.ComplexNumbers.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumbers.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumbers.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumbers.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="F:Waher.Script.Objects.ComplexNumbers.Instance">
            <summary>
            Instance of the set of complex numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ComplexNumbers.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.DateTimeValue">
            <summary>
            DateTime-valued number.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValue.#ctor(System.DateTime)">
            <summary>
            DateTime-valued number.
            </summary>
            <param name="Value">DateTime value.</param>
        </member>
        <member name="P:Waher.Script.Objects.DateTimeValue.Value">
            <summary>
            DateTime value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValue.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.DateTimeValue.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.DateTimeValue.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValue.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.DateTimeValues">
            <summary>
            The set of Date &amp; Time values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValues.#ctor">
            <summary>
            The set of Date &amp; Time values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DateTimeValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two DateTime values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.DoubleNumber">
            <summary>
            Double-valued number.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.DoubleNumber.ZeroElement">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.DoubleNumber.OneElement">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.DoubleNumber.TwoElement">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.DoubleNumber.ThreeElement">
            <summary>
            3
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.#ctor(System.Double)">
            <summary>
            Double-valued number.
            </summary>
            <param name="Value">Double value.</param>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumber.Value">
            <summary>
            Double value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumber.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumber.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumber.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumber.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumber.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.DoubleNumbers">
            <summary>
            Pseudo-field of double numbers, as an approximation of the field of real numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumbers.#ctor">
            <summary>
            Pseudo-field of double numbers, as an approximation of the field of real numbers.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.DoubleNumbers.Instance">
            <summary>
            Instance of the set of complex numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumbers.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.DoubleNumbers.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumbers.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumbers.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumbers.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.DoubleNumbers.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two double values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.Integer">
            <summary>
            Integer-valued number.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integer.#ctor(System.Numerics.BigInteger)">
            <summary>
            Integer-valued number.
            </summary>
            <param name="Value">Integer value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Integer.#ctor(System.Int32)">
            <summary>
            BigInteger-valued number.
            </summary>
            <param name="Value">Integer value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Integer.#ctor(System.UInt32)">
            <summary>
            BigInteger-valued number.
            </summary>
            <param name="Value">Integer value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Integer.#ctor(System.Int64)">
            <summary>
            BigInteger-valued number.
            </summary>
            <param name="Value">Integer value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Integer.#ctor(System.UInt64)">
            <summary>
            BigInteger-valued number.
            </summary>
            <param name="Value">Integer value.</param>
        </member>
        <member name="P:Waher.Script.Objects.Integer.Value">
            <summary>
            BigInteger value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integer.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Integer.AssociatedEuclidianDomain">
            <summary>
            Associated Euclidian Domain.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Integer.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Integer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Integer.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Integer.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integer.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integer.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two rational numbers.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.Integers">
            <summary>
            Euclidian domain of integers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integers.#ctor">
            <summary>
            Euclidian domain of integers.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Integers.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Integers.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integers.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Integers.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Integers.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="F:Waher.Script.Objects.Integers.Instance">
            <summary>
            Instance of the set of integers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Integers.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Integers.Divide(Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement,Waher.Script.Abstraction.Elements.IEuclidianDomainElement@)">
            <summary>
            Divides the right ring element from the left one: Left/Right
            </summary>
            <param name="Left">Left element.</param>
            <param name="Right">Right element.</param>
            <param name="Remainder">Remainder.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.BooleanMatrices">
            <summary>
            Pseudo-ring of Boolean-valued matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrices.#ctor(System.Int32,System.Int32)">
            <summary>
            Pseudo-ring of Boolean-valued matrices.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrices.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrices.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrices.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrices.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrices.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrices.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrices.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.BooleanMatrix">
            <summary>
            Boolean-valued matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.#ctor(System.Boolean[0:,0:])">
            <summary>
            Boolean-valued matrix.
            </summary>
            <param name="Values">Boolean value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Boolean-valued vector.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Values">
            <summary>
            Matrix element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Elements">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.Dimension">
            <summary>
            Dimension of matrix, if seen as a vector of row vectors.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.BooleanMatrix.VectorElements">
            <summary>
            Vector of row vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.Transpose">
            <summary>
            Returns a transposed matrix.
            </summary>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.ConjugateTranspose">
            <summary>
            Returns a conjugate transposed matrix.
            </summary>
            <returns>Conjugate transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets an element of the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.SetElement(System.Int32,System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Value">Element value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.GetRow(System.Int32)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.GetColumn(System.Int32)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.SetRow(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Vector">New row vector.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.BooleanMatrix.SetColumn(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Vector">New column vector.</param>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.ComplexMatrices">
            <summary>
            Pseudo-ring of Complex-valued matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrices.#ctor(System.Int32,System.Int32)">
            <summary>
            Pseudo-ring of Complex-valued matrices.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrices.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrices.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrices.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrices.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrices.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrices.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrices.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.ComplexMatrix">
            <summary>
            Complex-valued matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.#ctor(System.Numerics.Complex[0:,0:])">
            <summary>
            Complex-valued matrix.
            </summary>
            <param name="Values">Complex value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Complex-valued vector.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Values">
            <summary>
            Matrix element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Elements">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.Dimension">
            <summary>
            Dimension of matrix, if seen as a vector of row vectors.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ComplexMatrix.VectorElements">
            <summary>
            Vector of row vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.Transpose">
            <summary>
            Returns a transposed matrix.
            </summary>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.ConjugateTranspose">
            <summary>
            Returns a conjugate transposed matrix.
            </summary>
            <returns>Conjugate transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets an element of the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.SetElement(System.Int32,System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Value">Element value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.GetRow(System.Int32)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.GetColumn(System.Int32)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.SetRow(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Vector">New row vector.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ComplexMatrix.SetColumn(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Vector">New column vector.</param>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.DoubleMatrices">
            <summary>
            Pseudo-ring of Double-valued matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrices.#ctor(System.Int32,System.Int32)">
            <summary>
            Pseudo-ring of Double-valued matrices.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrices.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrices.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrices.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrices.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrices.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrices.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrices.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.DoubleMatrix">
            <summary>
            Double-valued matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Double-valued matrix.
            </summary>
            <param name="Values">Double value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Double-valued vector.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Values">
            <summary>
            Matrix element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Elements">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.Dimension">
            <summary>
            Dimension of matrix, if seen as a vector of row vectors.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.DoubleMatrix.VectorElements">
            <summary>
            Vector of row vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.Transpose">
            <summary>
            Returns a transposed matrix.
            </summary>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.ConjugateTranspose">
            <summary>
            Returns a conjugate transposed matrix.
            </summary>
            <returns>Conjugate transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets an element of the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.SetElement(System.Int32,System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Value">Element value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.GetRow(System.Int32)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.GetColumn(System.Int32)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.SetRow(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Vector">New row vector.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.DoubleMatrix.SetColumn(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Vector">New column vector.</param>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.ObjectMatrices">
            <summary>
            Pseudo-ring of Object-valued matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrices.#ctor(System.Int32,System.Int32)">
            <summary>
            Pseudo-ring of Object-valued matrices.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrices.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrices.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrices.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrices.IsCommutative">
            <summary>
            If the ring * operator is commutative or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrices.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrices.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrices.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Matrices.ObjectMatrix">
            <summary>
            Object-valued matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.#ctor(Waher.Script.Abstraction.Elements.IElement[0:,0:])">
            <summary>
            Object-valued matrix.
            </summary>
            <param name="Values">Object value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.#ctor(System.Object[0:,0:])">
            <summary>
            Object-valued matrix.
            </summary>
            <param name="Values">Object value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Rows">Number of rows.</param>
            <param name="Columns">Number of columns.</param>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Values">
            <summary>
            Matrix element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Elements">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.ColumnNames">
            <summary>
            Contains optional column names.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.HasColumnNames">
            <summary>
            If the matrix has column names defined.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Item(System.String)">
            <summary>
            Returns a named column vector.
            </summary>
            <param name="ColumnName">Name of column. Comparison is case insensitive.</param>
            <returns>Column vector.</returns>
            <exception cref="T:System.ArgumentException">If no named column with the same name was found.</exception>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.AssociatedRing">
            <summary>
            Associated Ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.MultiplyLeft(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the left.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.MultiplyRight(Waher.Script.Abstraction.Elements.IRingElement)">
            <summary>
            Tries to multiply an element to the current element, from the right.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.Dimension">
            <summary>
            Dimension of matrix, if seen as a vector of row vectors.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Matrices.ObjectMatrix.VectorElements">
            <summary>
            Vector of row vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.Transpose">
            <summary>
            Returns a transposed matrix.
            </summary>
            <returns>Transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.ConjugateTranspose">
            <summary>
            Returns a conjugate transposed matrix.
            </summary>
            <returns>Conjugate transposed matrix.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets an element of the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.SetElement(System.Int32,System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Value">Element value.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.GetRow(System.Int32)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.GetColumn(System.Int32)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.SetRow(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a row vector from the matrix.
            </summary>
            <param name="Row">Zero-based row index into the matrix.</param>
            <param name="Vector">New row vector.</param>
        </member>
        <member name="M:Waher.Script.Objects.Matrices.ObjectMatrix.SetColumn(System.Int32,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Gets a column vector from the matrix.
            </summary>
            <param name="Column">Zero-based column index into the matrix.</param>
            <param name="Vector">New column vector.</param>
        </member>
        <member name="T:Waher.Script.Objects.Measurement">
            <summary>
            Physical measurement
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Measurement.ZeroElement">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Measurement.OneElement">
            <summary>
            1
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.#ctor(System.Double,Waher.Script.Units.Unit,System.Double)">
            <summary>
            Physical quantity.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="Unit">Unit</param>
            <param name="Error">Error</param>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Magnitude">
            <summary>
            Magnitude
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Error">
            <summary>
            Magnitude
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Estimate">
            <summary>
            Estimate of measurement
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Max">
            <summary>
            Estimate of measurement
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Min">
            <summary>
            Estimate of measurement
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurement.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurement.TryParse(System.String,Waher.Script.Objects.Measurement@)">
            <summary>
            Tries to parse a string to a physical quantity.
            </summary>
            <param name="s">String</param>
            <param name="Value">Parsed Value</param>
            <returns>If the string could be parsed into a physical quantity.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Measurements">
            <summary>
            Pseudo-field of physical measurements.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurements.#ctor">
            <summary>
            Pseudo-field of physical quantities.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurements.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Measurements.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Measurements.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Measurements.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Measurements.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Measurements.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two double values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.Namespace">
            <summary>
            Namespace.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Namespace.#ctor(System.String)">
            <summary>
            Namespace value.
            </summary>
            <param name="Value">Namespace value.</param>
        </member>
        <member name="P:Waher.Script.Objects.Namespace.Value">
            <summary>
            Namespace.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Namespace.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Namespace.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Namespace.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Namespace.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Namespace.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Namespace.Item(System.String)">
            <summary>
            Access to types and subnamespaces in the current namespace.
            </summary>
            <param name="Name">Name of local element.</param>
            <returns>Local element reference.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Namespaces">
            <summary>
            Set of namespaces.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Namespaces.#ctor">
            <summary>
            Set of namespaces.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Namespaces.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Namespaces.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Namespaces.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.ObjectValue">
            <summary>
            Object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.#ctor(System.Object)">
            <summary>
            Object value.
            </summary>
            <param name="Value">Object value.</param>
        </member>
        <member name="P:Waher.Script.Objects.ObjectValue.Value">
            <summary>
            Object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.ObjectValue.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.ObjectValue.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="F:Waher.Script.Objects.ObjectValue.Null">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValue.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.ObjectValues">
            <summary>
            Set of object values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValues.#ctor">
            <summary>
            Set of object values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.ObjectValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two object values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.PhysicalQuantities">
            <summary>
            Pseudo-field of physical quantities.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantities.#ctor">
            <summary>
            Pseudo-field of physical quantities.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantities.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantities.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantities.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantities.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantities.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantities.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two double values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.PhysicalQuantity">
            <summary>
            Physical quantity.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.PhysicalQuantity.ZeroElement">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.PhysicalQuantity.OneElement">
            <summary>
            1
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.#ctor(System.Double,Waher.Script.Units.Unit)">
            <summary>
            Physical quantity.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="Unit">Unit</param>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.Magnitude">
            <summary>
            Magnitude
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.PhysicalQuantity.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.PhysicalQuantity.TryParse(System.String,Waher.Script.Objects.PhysicalQuantity@)">
            <summary>
            Tries to parse a string to a physical quantity.
            </summary>
            <param name="s">String</param>
            <param name="Value">Parsed Value</param>
            <returns>If the string could be parsed into a physical quantity.</returns>
        </member>
        <member name="T:Waher.Script.Objects.RationalNumber">
            <summary>
            Rational Number.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Rational Number.
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Denominator">Denominator</param>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.#ctor(System.Numerics.BigInteger)">
            <summary>
            RationalNumber-valued number.
            </summary>
            <param name="Number">Integer value.</param>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.Numerator">
            <summary>
            Numerator.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.Denominator">
            <summary>
            Denominator
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.AssociatedField">
            <summary>
            Associated Field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.Multiply(Waher.Script.Abstraction.Elements.ICommutativeRingElement)">
            <summary>
            Tries to multiply an element to the current element.
            </summary>
            <param name="Element">Element to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.ToDouble">
            <summary>
            Converts rational number to a double-precision floating-point number.
            </summary>
            <returns>Double-precision floating-point number.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Multiply(Waher.Script.Objects.RationalNumber,Waher.Script.Objects.RationalNumber)">
            <summary>
            Multiplies a rational number with another rational number.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Multiply(Waher.Script.Objects.RationalNumber,System.Numerics.BigInteger)">
            <summary>
            Multiplies a rational number with a big integer.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Multiply(System.Numerics.BigInteger,Waher.Script.Objects.RationalNumber)">
            <summary>
            Multiplies a big integer with a rational number.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.Invert">
            <summary>
            Inverts the element, if possible.
            </summary>
            <returns>Inverted element, or null if not possible.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Addition(Waher.Script.Objects.RationalNumber,Waher.Script.Objects.RationalNumber)">
            <summary>
            Adds a rational number with another rational number.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Addition(Waher.Script.Objects.RationalNumber,System.Numerics.BigInteger)">
            <summary>
            Adds a rational number with a big integer.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.op_Addition(System.Numerics.BigInteger,Waher.Script.Objects.RationalNumber)">
            <summary>
            Adds a big integer with a rational number.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <returns>Sum.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumber.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumber.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.RationalNumbers">
            <summary>
            Field of rational numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.#ctor">
            <summary>
            Field of rational numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumbers.One">
            <summary>
            Returns the identity element of the commutative ring with identity.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.RationalNumbers.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="F:Waher.Script.Objects.RationalNumbers.Instance">
            <summary>
            Instance of the set of integers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.CompareNumbers(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two rational numbers.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Objects.RationalNumbers.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two rational numbers.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.Sets.EmptySet">
            <summary>
            The empty set.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.EmptySet.#ctor">
            <summary>
            The empty set.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Sets.EmptySet.Instance">
            <summary>
            Instance of the empty set.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.EmptySet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.EmptySet.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.EmptySet.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.EmptySet.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.EmptySet.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.EmptySet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.Sets.FiniteSet">
            <summary>
            Represents a finite set.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.FiniteSet.#ctor(System.Collections.Generic.IEnumerable{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Represents a finite set.
            </summary>
            <param name="Elements">Elements of set.</param>
        </member>
        <member name="M:Waher.Script.Objects.Sets.FiniteSet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.FiniteSet.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.FiniteSet.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.FiniteSet.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.FiniteSet.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Sets.FiniteSet.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.FiniteSet.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.Sets.ImplicitSet">
            <summary>
            Represents an implicitly defined set
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Abstraction.Sets.ISet,Waher.Script.Operators.Membership.In[],Waher.Script.Model.ScriptNode[],Waher.Script.Variables,System.Boolean)">
            <summary>
            Represents an implicitly defined set
            </summary>
            <param name="Pattern">Pattern of elements.</param>
            <param name="SuperSet">Optional superset.</param>
            <param name="SetConditions">Set membership conditions that must be fulfulled.</param>
            <param name="OtherConditions">Other condition subset members must fulfill.</param>
            <param name="Variables">Refernce to variables.</param>
            <param name="DoubleColon">If double-colon was used to create subset.</param>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.ImplicitSet.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.ImplicitSet.Size">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.CalculateElements(Waher.Script.Model.ScriptNode,System.Collections.Generic.IEnumerable{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Operators.Membership.In[],Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Calculates elements specified using implicit notation.
            </summary>
            <param name="Pattern">Pattern forming elements.</param>
            <param name="SuperSetElements">Optional super-set of elements. Can be null.</param>
            <param name="SetConditions">Set membership conditions that need to be fulfilled.</param>
            <param name="OtherConditions">Other conditions that need to be fulfilled.</param>
            <param name="Variables">Current set of variables.</param>
            <returns>Enumerable set of elements, or null if not able to calculate element set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.CalculateElementsAsync(Waher.Script.Model.ScriptNode,System.Collections.Generic.IEnumerable{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Operators.Membership.In[],Waher.Script.Model.ScriptNode[],Waher.Script.Variables)">
            <summary>
            Calculates elements specified using implicit notation.
            </summary>
            <param name="Pattern">Pattern forming elements.</param>
            <param name="SuperSetElements">Optional super-set of elements. Can be null.</param>
            <param name="SetConditions">Set membership conditions that need to be fulfilled.</param>
            <param name="OtherConditions">Other conditions that need to be fulfilled.</param>
            <param name="Variables">Current set of variables.</param>
            <returns>Enumerable set of elements, or null if not able to calculate element set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.GetSetMembers(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Gets the elements of a (supposed) set.
            </summary>
            <param name="E">Element</param>
            <returns>Elements, or null if not possible to get elements.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.Sets.ImplicitSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.Sets.IntersectionSet">
            <summary>
            Represents a Intersection of two sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.IntersectionSet.#ctor(Waher.Script.Abstraction.Sets.ISet,Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Represents a Intersection of two sets.
            </summary>
            <param name="Set1">Set 1.</param>
            <param name="Set2">Set 2.</param>
        </member>
        <member name="M:Waher.Script.Objects.Sets.IntersectionSet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.IntersectionSet.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.IntersectionSet.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.IntersectionSet.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.IntersectionSet.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Sets.IntersectionSet.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.IntersectionSet.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.Sets.Interval">
            <summary>
            Represents an interval.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.#ctor(System.Double,System.Double,System.Boolean,System.Boolean,System.Nullable{System.Double})">
            <summary>
            Interval
            </summary>
            <param name="From">Start value.</param>
            <param name="To">Stop value.</param>
            <param name="IncludesFrom">If the start value is included in the interval.</param>
            <param name="IncludesTo">If the stop value is included in the interval.</param>
            <param name="StepSize">Optional step size, if the interval is to be enumerated.</param>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.From">
            <summary>
            Start of interval.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.To">
            <summary>
            End of interval.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.StepSize">
            <summary>
            Optional step size, if enumeration of values from the interval is important.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.IncludesFrom">
            <summary>
            If the <see cref="P:Waher.Script.Objects.Sets.Interval.From"/> value is included in the interval or not.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.IncludesTo">
            <summary>
            If the <see cref="P:Waher.Script.Objects.Sets.Interval.To"/> value is included in the interval or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.GetArray">
            <summary>
            Gets a double-valued array of all elements enumerable in the interval.
            </summary>
            <returns>Double-valued array</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.Interval.VectorElements">
            <summary>
            An enumeration of vector elements.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.Interval.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="T:Waher.Script.Objects.Sets.RealNumbers">
            <summary>
            Set containing all real numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.RealNumbers.#ctor">
            <summary>
            Set containing all real numbers.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Sets.RealNumbers.Instance">
            <summary>
            Instance of the set of real numbers.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.RealNumbers.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.RealNumbers.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.RealNumbers.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.RealNumbers.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Objects.Sets.SetDifference">
            <summary>
            Represents a set difference A\B.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetDifference.#ctor(Waher.Script.Abstraction.Sets.ISet,Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Represents a Intersection of two sets.
            </summary>
            <param name="Set1">Set 1.</param>
            <param name="Set2">Set 2.</param>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetDifference.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetDifference.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetDifference.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.SetDifference.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetDifference.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Sets.SetDifference.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.SetDifference.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.Sets.SetOfFunctions">
            <summary>
            Set containing all functions.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfFunctions.#ctor">
            <summary>
            Set containing all functions.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Sets.SetOfFunctions.Instance">
            <summary>
            Instance of the set of all functions.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfFunctions.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfFunctions.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfFunctions.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Sets.SetOfSets">
            <summary>
            Set containing all sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfSets.#ctor">
            <summary>
            Set containing all sets.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.Sets.SetOfSets.Instance">
            <summary>
            Instance of the set of all sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfSets.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfSets.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.SetOfSets.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.Sets.UnionSet">
            <summary>
            Represents a union of two sets.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.UnionSet.#ctor(Waher.Script.Abstraction.Sets.ISet,Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Represents a union of two sets.
            </summary>
            <param name="Set1">Set 1.</param>
            <param name="Set2">Set 2.</param>
        </member>
        <member name="M:Waher.Script.Objects.Sets.UnionSet.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.UnionSet.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.Sets.UnionSet.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.Sets.UnionSet.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.Sets.UnionSet.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.Sets.UnionSet.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.Sets.UnionSet.Size">
            <summary>
            Size of set, if finite and known, otherwise null is returned.
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.StringValue">
            <summary>
            String value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.#ctor(System.String)">
            <summary>
            String value.
            </summary>
            <param name="Value">String value.</param>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.#ctor(System.String,System.Boolean)">
            <summary>
            String value.
            </summary>
            <param name="Value">String value.</param>
            <param name="CaseInsensitive">If the string value is case insensitive or not.</param>
        </member>
        <member name="P:Waher.Script.Objects.StringValue.Value">
            <summary>
            String value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.StringValue.CaseInsensitive">
            <summary>
            If the string value is case insensitive or not.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.StringValue.AssociatedSemiGroup">
            <summary>
            Associated Semi-Group.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.StringValue.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.AddLeft(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the left.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.AddRight(Waher.Script.Abstraction.Elements.ISemiGroupElement)">
            <summary>
            Tries to add an element to the current element, from the right.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.StringValue.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="F:Waher.Script.Objects.StringValue.Empty">
            <summary>
            The empty string.
            </summary>
        </member>
        <member name="T:Waher.Script.Objects.StringValues">
            <summary>
            Semi-group of string values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.StringValues.#ctor">
            <summary>
            Semi-group of string values.
            </summary>
        </member>
        <member name="F:Waher.Script.Objects.StringValues.Instance">
            <summary>
            Instance of the set of string values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.StringValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.StringValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.StringValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.StringValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two string values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.TypeValue">
            <summary>
            Type value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.TypeValue.#ctor(System.Type)">
            <summary>
            Type value.
            </summary>
            <param name="Value">Type value.</param>
        </member>
        <member name="P:Waher.Script.Objects.TypeValue.Value">
            <summary>
            Type value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.TypeValue.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.TypeValue.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.TypeValue.AssociatedObjectValue">
            <summary>
            Associated Type value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.TypeValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.TypeValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.TypeValue.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.TypeValues">
            <summary>
            Set of Type values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.TypeValues.#ctor">
            <summary>
            Set of Type values.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.TypeValues.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.TypeValues.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.TypeValues.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Objects.TypeValues.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two Type values.
            </summary>
            <param name="x">Value 1</param>
            <param name="y">Value 2</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.BooleanVector">
            <summary>
            Boolean-valued vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.#ctor(System.Boolean[])">
            <summary>
            Boolean-valued vector.
            </summary>
            <param name="Values">Boolean values.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.#ctor(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Boolean-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.Values">
            <summary>
            Vector element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.Elements">
            <summary>
            Vector elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVector.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVector.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.BooleanVectors">
            <summary>
            Pseudo-vector space of Boolean-valued vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVectors.#ctor(System.Int32)">
            <summary>
            Pseudo-vector space of Boolean-valued vectors.
            </summary>
            <param name="Dimension">Dimension.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVectors.Dimension">
            <summary>
            Dimension of vector space.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVectors.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.BooleanVectors.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVectors.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVectors.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.BooleanVectors.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.ComplexVector">
            <summary>
            Complex-valued vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Complex-valued vector.
            </summary>
            <param name="Values">Complex values.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.#ctor(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Complex-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.Values">
            <summary>
            Vector element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.Elements">
            <summary>
            Vector elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVector.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVector.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.ComplexVectors">
            <summary>
            Pseudo-vector space of Complex-valued vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVectors.#ctor(System.Int32)">
            <summary>
            Pseudo-vector space of Complex-valued vectors.
            </summary>
            <param name="Dimension">Dimension.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVectors.Dimension">
            <summary>
            Dimension of vector space.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVectors.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ComplexVectors.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVectors.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVectors.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ComplexVectors.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.DateTimeVector">
            <summary>
            DateTime-valued vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.#ctor(System.DateTime[])">
            <summary>
            DateTime-valued vector.
            </summary>
            <param name="Values">DateTime values.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.#ctor(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            DateTime-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.Values">
            <summary>
            Vector element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.Elements">
            <summary>
            Vector elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVector.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVector.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.DateTimeVectors">
            <summary>
            Pseudo-vector space of DateTime-valued vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVectors.#ctor(System.Int32)">
            <summary>
            Pseudo-vector space of DateTime-valued vectors.
            </summary>
            <param name="Dimension">Dimension.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVectors.Dimension">
            <summary>
            Dimension of vector space.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVectors.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DateTimeVectors.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVectors.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVectors.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DateTimeVectors.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.DoubleVector">
            <summary>
            Double-valued vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.#ctor(System.Double[])">
            <summary>
            Double-valued vector.
            </summary>
            <param name="Values">Double values.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.#ctor(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Double-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.Values">
            <summary>
            Vector element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.Elements">
            <summary>
            Vector elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVector.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVector.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.DoubleVectors">
            <summary>
            Pseudo-vector space of Double-valued vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVectors.#ctor(System.Int32)">
            <summary>
            Pseudo-vector space of Double-valued vectors.
            </summary>
            <param name="Dimension">Dimension.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVectors.Dimension">
            <summary>
            Dimension of vector space.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVectors.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.DoubleVectors.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVectors.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVectors.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.DoubleVectors.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.ObjectVector">
            <summary>
            Object-valued vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.#ctor(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.#ctor(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.#ctor(System.Array)">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.#ctor(Waher.Script.Abstraction.Elements.IElement[])">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.#ctor(System.Object[])">
            <summary>
            Object-valued vector.
            </summary>
            <param name="Elements">Elements.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.Values">
            <summary>
            Vector element values.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.Elements">
            <summary>
            Vector elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.AssociatedVectorSpace">
            <summary>
            Associated Right-VectorSpace.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.MultiplyScalar(Waher.Script.Abstraction.Elements.IFieldElement)">
            <summary>
            Tries to multiply a scalar to the current element.
            </summary>
            <param name="Scalar">Scalar to multiply.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.Add(Waher.Script.Abstraction.Elements.IAbelianGroupElement)">
            <summary>
            Tries to add an element to the current element.
            </summary>
            <param name="Element">Element to add.</param>
            <returns>Result, if understood, null otherwise.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.Negate">
            <summary>
            Negates the element.
            </summary>
            <returns>Negation of current element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVector.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.GetElement(System.Int32)">
            <summary>
            Gets an element of the vector.
            </summary>
            <param name="Index">Zero-based index into the vector.</param>
            <returns>Vector element.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.SetElement(System.Int32,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Sets an element in the vector.
            </summary>
            <param name="Index">Index.</param>
            <param name="Value">Element to set.</param>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVector.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="T:Waher.Script.Objects.VectorSpaces.ObjectVectors">
            <summary>
            Pseudo-vector space of Object-valued vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVectors.#ctor(Waher.Script.Objects.VectorSpaces.ObjectVector)">
            <summary>
            Pseudo-vector space of Object-valued vectors.
            </summary>
            <param name="ReferenceVector">Reference vector.</param>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVectors.Dimension">
            <summary>
            Dimension of vector space.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVectors.ScalarRing">
            <summary>
            Scalar ring.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVectors.ScalarField">
            <summary>
            Scalar field.
            </summary>
        </member>
        <member name="P:Waher.Script.Objects.VectorSpaces.ObjectVectors.Zero">
            <summary>
            Returns the zero element of the group.
            </summary>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVectors.Contains(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Checks if the set contains an element.
            </summary>
            <param name="Element">Element.</param>
            <returns>If the element is contained in the set.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVectors.Equals(System.Object)">
            <summary>
            Compares the element to another.
            </summary>
            <param name="obj">Other element to compare against.</param>
            <returns>If elements are equal.</returns>
        </member>
        <member name="M:Waher.Script.Objects.VectorSpaces.ObjectVectors.GetHashCode">
            <summary>
            Calculates a hash code of the element.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Add">
            <summary>
            Addition operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Add.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Addition operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Add.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Add.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Add.EvaluateAddition(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Adds two operands.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Add.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.AddElementWise">
            <summary>
            Element-wise Addition operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.AddElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Addition operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.AddElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.AddElementWise.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.BinomialCoefficient">
            <summary>
            Binomial coefficient.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.BinomialCoefficient.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binomial coefficient.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.BinomialCoefficient.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Cube">
            <summary>
            Cube operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Cube.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Cube operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Cube.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Cube.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.DegToRad">
            <summary>
            Degrees to radians operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DegToRad.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Degrees to radians operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DegToRad.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DegToRad.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Divide">
            <summary>
            Division operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Divide.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Division operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Divide.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Divide.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Divide.EvaluateDivision(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Divides the right operand from the left one.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Divide.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.DivideElementWise">
            <summary>
            Element-wise Division operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DivideElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Division operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DivideElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.DivideElementWise.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Faculty">
            <summary>
            Faculty operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Faculty.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Faculty operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Faculty.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Invert">
            <summary>
            Inversion operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Invert.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Inversion operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Invert.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Invert.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Invert.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.LeftDivide">
            <summary>
            Left-Division operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivide.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Left-Division operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivide.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivide.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivide.EvaluateDivision(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Divides the left operand from the right one.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.LeftDivideElementWise">
            <summary>
            Element-wise Left-Division operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivideElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Left-Division operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.LeftDivideElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.MinusOne">
            <summary>
            -1 operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MinusOne.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            -1 operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MinusOne.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MinusOne.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Multiply">
            <summary>
            Multiplication operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateMultiplication(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Multiplies two operands.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Int64,Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Double,Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Numerics.BigInteger,Waher.Script.Abstraction.Elements.IGroupElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Int64,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Double,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.EvaluateScalarMultiplication(System.Numerics.BigInteger,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a scalar multiplication.
            </summary>
            <param name="N">Scalar.</param>
            <param name="Element">Element to multiply <paramref name="N"/> times.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Multiply.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.MultiplyElementWise">
            <summary>
            Element-wise Multiplication operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MultiplyElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Multiplication operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MultiplyElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.MultiplyElementWise.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Negate">
            <summary>
            Negation operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Negate.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Negation operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Negate.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Negate.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Negate.EvaluateNegation(Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Negates an object.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Negated version.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Negate.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Percent">
            <summary>
            Percent operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Percent.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Percent operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Percent.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Percent.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Perdiezmil">
            <summary>
            Perdiezmil operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Perdiezmil.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Perdiezmil operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Perdiezmil.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Perdiezmil.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Permil">
            <summary>
            Permil operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Permil.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Permil operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Permil.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Permil.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.PlusOne">
            <summary>
            +1 operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PlusOne.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            +1 operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PlusOne.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PlusOne.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Power">
            <summary>
            Power operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Power.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Power operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Power.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Power.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Power.EvaluatePower(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Calculates Left ^ Right.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Power.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.PowerElementWise">
            <summary>
            Element-wise Power operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PowerElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Power operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PowerElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PowerElementWise.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.PowerElementWise.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Residue">
            <summary>
            Residue operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Residue.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Residue operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Residue.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Residue.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Residue.EvaluateResidue(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Divides the right operand from the left one.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.ResidueElementWise">
            <summary>
            Element-wise Residue operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.ResidueElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Residue operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.ResidueElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.SemiFaculty">
            <summary>
            Semi-Faculty operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.SemiFaculty.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Semi-Faculty operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.SemiFaculty.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Square">
            <summary>
            Square operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Square.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Square operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Square.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Square.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.Subtract">
            <summary>
            Subtraction operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Subtract.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Subtract.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Subtract.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Subtract.EvaluateSubtraction(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Subtracts the right operand from the left one.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.Subtract.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Arithmetics.SubtractElementWise">
            <summary>
            Element-wise Subtraction operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.SubtractElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-wise Subtraction operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.SubtractElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Arithmetics.SubtractElementWise.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a script node, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated node.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.Assignment">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Assignment.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Assignment operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Assignments.Assignment.VariableName">
            <summary>
            Name of variable
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Assignment.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.DynamicIndexAssignment">
            <summary>
            Dynamic Index Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicIndexAssignment.#ctor(Waher.Script.Operators.DynamicIndex,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dynamic Index Assignment operator.
            </summary>
            <param name="DynamicIndex">Dynamic Index</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Assignments.DynamicIndexAssignment.DynamicIndex">
            <summary>
            Dynamic Index.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicIndexAssignment.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.DynamicMemberAssignment">
            <summary>
            Dynamic member Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicMemberAssignment.#ctor(Waher.Script.Operators.Membership.DynamicMember,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dynamic member Assignment operator.
            </summary>
            <param name="DynamicMember">Dynamic member</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicMemberAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicMemberAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.DynamicMemberAssignment.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Performs scalar dynamic member assignment.
            </summary>
            <param name="Left">Object</param>
            <param name="Middle">Member</param>
            <param name="Right">Value to assign.</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.FunctionDefinition">
            <summary>
            Function definition operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.FunctionDefinition.#ctor(System.String,System.String[],Waher.Script.Model.ArgumentType[],Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Function definition operator.
            </summary>
            <param name="FunctionName">Function name..</param>
            <param name="ArgumentNames">Argument names.</param>
            <param name="ArgumentTypes">Argument types.</param>
            <param name="Body">Function body.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Assignments.FunctionDefinition.FunctionName">
            <summary>
            Name of function
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.FunctionDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.FunctionDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.MatrixColumnAssignment">
            <summary>
            Matrix Column Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixColumnAssignment.#ctor(Waher.Script.Operators.Matrices.ColumnVector,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Matrix Column Assignment operator.
            </summary>
            <param name="MatrixColumn">Matrix Column</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixColumnAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixColumnAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.MatrixIndexAssignment">
            <summary>
            Matrix Index Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixIndexAssignment.#ctor(Waher.Script.Operators.Matrices.MatrixIndex,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Matrix Index Assignment operator.
            </summary>
            <param name="MatrixIndex">Matrix Index</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixIndexAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixIndexAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.MatrixRowAssignment">
            <summary>
            Matrix Row Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixRowAssignment.#ctor(Waher.Script.Operators.Matrices.RowVector,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Matrix Row Assignment operator.
            </summary>
            <param name="MatrixRow">Matrix Row</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixRowAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.MatrixRowAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.NamedMemberAssignment">
            <summary>
            Named member Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.NamedMemberAssignment.#ctor(Waher.Script.Operators.Membership.NamedMember,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Named member Assignment operator.
            </summary>
            <param name="NamedMember">Named member</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Assignments.NamedMemberAssignment.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.NamedMemberAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.NamedMemberAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.Post.PostDecrement">
            <summary>
            Post-Decrement operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Post.PostDecrement.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Post-Decrement operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Post.PostDecrement.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.Post.PostIncrement">
            <summary>
            Post-Increment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Post.PostIncrement.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Post-Increment operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Post.PostIncrement.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.Pre.PreDecrement">
            <summary>
            Pre-Decrement operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreDecrement.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Pre-Decrement operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreDecrement.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreDecrement.Decrement(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Decrements a value.
            </summary>
            <param name="Value">Value to decrement.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Decremented value.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.Pre.PreIncrement">
            <summary>
            Pre-Increment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreIncrement.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Pre-Increment operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreIncrement.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.Pre.PreIncrement.Increment(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Increments a value.
            </summary>
            <param name="Value">Value to increment.</param>
            <param name="Node">Node performing the evaluation.</param>
            <returns>Incremented value.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.VectorIndexAssignment">
            <summary>
            Vector Index Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.VectorIndexAssignment.#ctor(Waher.Script.Operators.Vectors.VectorIndex,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Vector Index Assignment operator.
            </summary>
            <param name="VectorIndex">Vector Index</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.VectorIndexAssignment.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.VectorIndexAssignment.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.AddToSelf">
            <summary>
            Add to self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.AddToSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Add to self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.AddToSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.AddToSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.BinaryAndWithSelf">
            <summary>
            Binary And with self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.BinaryAndWithSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary And with self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.BinaryOrWithSelf">
            <summary>
            Binary Or with self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.BinaryOrWithSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary Or with self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.DivideFromSelf">
            <summary>
            Divide from self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.DivideFromSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Divide from self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.DivideFromSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.DivideFromSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.LogicalAndWithSelf">
            <summary>
            Logical And with self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.LogicalAndWithSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logical And with self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.LogicalOrWithSelf">
            <summary>
            Logical Or with self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.LogicalOrWithSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logical Or with self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.MultiplyWithSelf">
            <summary>
            Multiply with self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.MultiplyWithSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Multiply with self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.MultiplyWithSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.MultiplyWithSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.PowerOfSelf">
            <summary>
            Power of self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.PowerOfSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Power of self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.PowerOfSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.PowerOfSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.ResidueFromSelf">
            <summary>
            Residue from self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.ResidueFromSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Residue from self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.ResidueFromSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.ResidueFromSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.ShiftSelfLeft">
            <summary>
            Shift self left operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.ShiftSelfLeft.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Shift self left operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.ShiftSelfRight">
            <summary>
            Shift self right operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.ShiftSelfRight.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Shift self right operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="T:Waher.Script.Operators.Assignments.WithSelf.SubtractFromSelf">
            <summary>
            Subtract from self operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.SubtractFromSelf.#ctor(System.String,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Subtract from self operator.
            </summary>
            <param name="VariableName">Variable name..</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.SubtractFromSelf.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Assignments.WithSelf.SubtractFromSelf.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Binary.And">
            <summary>
            Binary And.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Binary.And.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary And.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Binary.And.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Binary.Complement">
            <summary>
            Complement operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Binary.Complement.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Complement operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Binary.Complement.Evaluate(System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Binary.Or">
            <summary>
            Binary Or.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Binary.Or.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Binary.Or.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Binary.ShiftLeft">
            <summary>
            Shift left operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Binary.ShiftLeft.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Shift left operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Binary.ShiftLeft.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Binary.ShiftRight">
            <summary>
            Shift right operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Binary.ShiftRight.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Shift right operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Binary.ShiftRight.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Calculus.DefaultDifferentiation">
            <summary>
            Default Differentiation operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Calculus.DefaultDifferentiation.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Default Differentiation operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NrDifferentiations">Number of differentiations.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Calculus.DefaultDifferentiation.NrDifferentiations">
            <summary>
            Number of differentiations.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Calculus.DefaultDifferentiation.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Calculus.DefaultDifferentiation.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Calculus.DefaultDifferentiation.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.EqualTo">
            <summary>
            Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualTo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualTo.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualTo.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualTo.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.EqualToElementWise">
            <summary>
            Element-Wise Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualToElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-Wise Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.EqualToElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.GreaterThan">
            <summary>
            Greater Than.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThan.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Greater Than.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThan.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThan.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.GreaterThanOrEqualTo">
            <summary>
            Greater Than Or Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThanOrEqualTo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Greater Than Or Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThanOrEqualTo.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.GreaterThanOrEqualTo.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.IdenticalTo">
            <summary>
            Identical To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.IdenticalTo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Identical To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.IdenticalTo.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.IdenticalTo.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.IdenticalToElementWise">
            <summary>
            Element-Wise Identical To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.IdenticalToElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-Wise Identical To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.IdenticalToElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.LesserThan">
            <summary>
            Lesser Than.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThan.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Lesser Than.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThan.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThan.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.LesserThanOrEqualTo">
            <summary>
            Lesser Than Or Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThanOrEqualTo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Lesser Than Or Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThanOrEqualTo.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.LesserThanOrEqualTo.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.ExpressionTransform">
            <summary>
            Delegate for expression transforms.
            </summary>
            <param name="Expression">Like expression</param>
            <returns>Transformed expression</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Like.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Like
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="E:Waher.Script.Operators.Comparisons.Like.TransformExpression">
            <summary>
            Event raised before performing comparison. Can be used to transform expression.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Like.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Like.Matches(System.String,System.String,System.String[]@)">
            <summary>
            Checks a value against a regular expression.
            </summary>
            <param name="Value">Value</param>
            <param name="Expression">Regular expression</param>
            <param name="GroupNames">Group name values resulting from the matching.</param>
            <returns>If there was a match or not.</returns>
        </member>
        <member name="P:Waher.Script.Operators.Comparisons.Like.Options">
            <summary>
            Options for regular expression. Default is <see cref="F:System.Text.RegularExpressions.RegexOptions.Singleline"/>.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Comparisons.Like.PartialMatch">
            <summary>
            If a partial match is sufficient for operator to return true. (Default=false)
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Like.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.NotEqualTo">
            <summary>
            Not Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualTo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Not Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualTo.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualTo.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualTo.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.NotEqualToElementWise">
            <summary>
            Element-Wise Not Equal To.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualToElementWise.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Element-Wise Not Equal To.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotEqualToElementWise.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.NotLike">
            <summary>
            Not Like
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotLike.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Not Like
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotLike.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.NotLike.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Comparisons.Range">
            <summary>
            Range operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Range.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Range operator
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Middle">Middle operand.</param>
            <param name="Right">Right operand.</param>
            <param name="LeftInclusive">If the value specified by <paramref name="Left"/> is included in the range.</param>
            <param name="RightInclusive">If the value specified by <paramref name="Right"/> is included in the range.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Comparisons.Range.LeftInclusive">
            <summary>
            If the value specified by <see cref="P:Waher.Script.Model.BinaryOperator.LeftOperand"/> is included in the range.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Comparisons.Range.RightInclusive">
            <summary>
            If the value specified by <see cref="P:Waher.Script.Model.BinaryOperator.RightOperand"/> is included in the range.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Range.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Range.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Comparisons.Range.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.DoWhile">
            <summary>
            DO-WHILE operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.DoWhile.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            DO-WHILE operator.
            </summary>
            <param name="Statement">Statement.</param>
            <param name="Condition">Condition.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.DoWhile.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.DoWhile.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.For">
            <summary>
            FOR operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.For.#ctor(System.String,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            FOR operator.
            </summary>
            <param name="VariableName">Name of loop variable.</param>
            <param name="From">Required From statement.</param>
            <param name="To">Required To statement.</param>
            <param name="Step">Optional Step statement.</param>
            <param name="Statement">Loop statement to evaluate.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Conditional.For.VariableName">
            <summary>
            Variable Name.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.For.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.For.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.ForEach">
            <summary>
            FOR-EACH operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.ForEach.#ctor(System.String,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            FOR-EACH operator.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Collection">Collection.</param>
            <param name="Statement">Statement to execute.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Conditional.ForEach.VariableName">
            <summary>
            Variable Name.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.ForEach.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.ForEach.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.If">
            <summary>
            IF operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.If.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            IF operator.
            </summary>
            <param name="Condition">Required condition.</param>
            <param name="IfTrue">Required statement, if true.</param>
            <param name="IfFalse">Optional statement, if false.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.If.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.If.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.NullCheck">
            <summary>
            Binary null check operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.NullCheck.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary null check operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.NullCheck.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.NullCheck.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.NullCheck.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Operators.Conditional.NullCheck.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.TryCatch">
            <summary>
            Try-Catch operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatch.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Try-Catch operator.
            </summary>
            <param name="Statement">Statement.</param>
            <param name="CatchStatement">Catch statement.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatch.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatch.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.TryCatchFinally">
            <summary>
            Try-Catch-Finally operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatchFinally.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Try-Catch-Finally operator.
            </summary>
            <param name="Statement">Statement.</param>
            <param name="CatchStatement">Catch statement.</param>
            <param name="FinallyStatement">Finally statement.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatchFinally.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryCatchFinally.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.TryFinally">
            <summary>
            Try-Finally operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryFinally.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Try-Finally operator.
            </summary>
            <param name="Statement">Statement.</param>
            <param name="FinallyStatement">Finally statement.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryFinally.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.TryFinally.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Conditional.WhileDo">
            <summary>
            WHILE-DO operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.WhileDo.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            WHILE-DO operator.
            </summary>
            <param name="Condition">Condition.</param>
            <param name="Statement">Statement.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.WhileDo.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Conditional.WhileDo.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.CreateMeasurement">
            <summary>
            Creates a measurement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.CreateMeasurement.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a measurement.
            </summary>
            <param name="Operand1">Operand 1.</param>
            <param name="Operand2">Operand 2.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.CreateMeasurement.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand1">Operand 1.</param>
            <param name="Operand2">Operand 2.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.And">
            <summary>
            Unspecified And.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.And.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary And.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.And.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.And.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.And.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.Nand">
            <summary>
            Unspecified Not-And.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nand.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Unspecified Not-And.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nand.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nand.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nand.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.Nor">
            <summary>
            Unspecified Not-Or.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nor.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Unspecified Not-Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nor.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nor.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Nor.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.Or">
            <summary>
            Unspecified Or.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Or.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Binary Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Or.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Or.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Or.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.Xnor">
            <summary>
            Unspecified Exclusive Xnor.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xnor.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Unspecified Exclusive Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xnor.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xnor.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xnor.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Dual.Xor">
            <summary>
            Unspecified Exclusive Xor.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xor.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Unspecified Exclusive Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xor.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xor.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Dual.Xor.Evaluate(System.Double,System.Double)">
            <summary>
            Evaluates the double operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.DynamicFunctionCall">
            <summary>
            Dynamic function call operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dynamic function call operator
            </summary>
            <param name="Function">Function</param>
            <param name="Arguments">Arguments</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.DynamicFunctionCall.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.DynamicFunctionCall.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.DynamicFunctionCall.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.DynamicIndex">
            <summary>
            Dynamic index operator
            </summary>
        </member>
        <member name="F:Waher.Script.Operators.DynamicIndex.index">
            <summary>
            Index
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.DynamicIndex.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Operators.ElementList,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dynamic index operator
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.DynamicIndex.IndexOperand">
            <summary>
            Index operand.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.DynamicIndex.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.ElementList">
            <summary>
            Represents a list of elements.
            </summary>
        </member>
        <member name="F:Waher.Script.Operators.ElementList.isAsync">
            <summary>
            If any of the elements are asynchronous
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.#ctor(Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a list of elements.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.ElementList.Elements">
            <summary>
            Elements.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.ElementList.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.ElementList.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.ImplicitPrint">
            <summary>
            Represents an implicit string to be printed.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ImplicitPrint.#ctor(System.String,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents an implicit string to be printed.
            </summary>
            <param name="Content">Content.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.ImplicitPrint.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.ImplicitPrint.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ImplicitPrint.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ImplicitPrint.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ImplicitPrint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.ImplicitPrint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.LambdaDefinition">
            <summary>
            Lambda Definition.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.#ctor(System.String[],Waher.Script.Model.ArgumentType[],Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Lambda Definition.
            </summary>
            <param name="ArgumentNames">Argument Names.</param>
            <param name="ArgumentTypes">Argument Types.</param>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.NrArguments">
            <summary>
            Number of arguments.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.ArgumentNames">
            <summary>
            Argument Names.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.ArgumentTypes">
            <summary>
            Argument types.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.AssociatedObjectValue">
            <summary>
            Associated object value.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.AssociatedSet">
            <summary>
            Associated Set.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.ChildElements">
            <summary>
            An enumeration of child elements. If the element is a scalar, this property will return null.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.IsScalar">
            <summary>
            If the element represents a scalar value.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates a set of elements into a similar structure as that provided by the current element.
            </summary>
            <param name="Elements">New set of child elements, not necessarily of the same type as the child elements of the current object.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated object of similar type as the current object.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.TryConvertTo(System.Type,System.Object@)">
            <summary>
            Converts the value to a .NET type.
            </summary>
            <param name="DesiredType">Desired .NET type.</param>
            <param name="Value">Converted value.</param>
            <returns>If conversion was possible.</returns>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.Differentiate(System.String,Waher.Script.Variables)">
            <summary>
            Differentiates a lambda expression, if possible.
            </summary>
            <param name="VariableName">Name of variable to differentiate on.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Differentiated lambda expression.</returns>
        </member>
        <member name="P:Waher.Script.Operators.LambdaDefinition.DefaultVariableName">
            <summary>
            Default variable name, if any, null otherwise.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.LambdaDefinition.ToString(Waher.Script.Model.ILambdaExpression)">
            <summary>
            Creates a displayable string for a lambda expression.
            </summary>
            <param name="Expression">Lambda expression.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Logical.And">
            <summary>
            Logical And.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logical And.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.Evaluate(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.Evaluate(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.And.Evaluate(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Logical.Equivalence">
            <summary>
            Equivalence.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Equivalence.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.Evaluate(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.Evaluate(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Equivalence.Evaluate(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Logical.Implication">
            <summary>
            Implication.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Implication.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.Evaluate(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.Evaluate(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Implication.Evaluate(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Logical.Not">
            <summary>
            Not operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Not.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Not operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Not.Evaluate(System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Operand">Operand.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Logical.Or">
            <summary>
            Logical Or.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Logical Or.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.EvaluateOptimizedResult(System.Boolean)">
            <summary>
            Gives the operator a chance to optimize its execution if it knows the value of the left operand. This method is only called
            if both operands evaluated to boolean values last time the operator was evaluated.
            </summary>
            <param name="Left">Value of left operand.</param>
            <returns>Optimized result, if possble, or null if both operands are required.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.Evaluate(System.Boolean,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.Evaluate(System.Exception,System.Boolean)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.Evaluate(System.Boolean,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Logical.Or.Evaluate(System.Exception,System.Exception)">
            <summary>
            Evaluates the boolean operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.ColumnVector">
            <summary>
            Column Vector operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ColumnVector.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Column Vector operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="X">X-coordinate operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ColumnVector.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ColumnVector.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ColumnVector.EvaluateIndex(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the column index operator.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="Index">Index</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ColumnVector.EvaluateIndex(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the column index operator.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="Index">Index</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.ConjugateTranspose">
            <summary>
            Conjugate Transpose operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ConjugateTranspose.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Conjugate Transpose operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ConjugateTranspose.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.IToMatrix">
            <summary>
            Interface for objects that can be converted into matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.IToMatrix.ToMatrix">
            <summary>
            Converts the object to a matrix.
            </summary>
            <returns>Matrix.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixDefinition">
            <summary>
            Creates a matrix.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.#ctor(Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix.
            </summary>
            <param name="Rows">Row vectors.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a matrix.
            </summary>
            <param name="Rows">Matrix rows.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated matrix.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},System.Int32,System.Int32,Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a matrix.
            </summary>
            <param name="Elements">Matrix elements.</param>
            <param name="Rows">Rows</param>
            <param name="Columns">Columns</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated matrix.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDefinition.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixDoWhileDefinition">
            <summary>
            Creates a matrix using a DO-WHILE statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDoWhileDefinition.#ctor(Waher.Script.Operators.Conditional.DoWhile,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix using a DO-WHILE statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixDoWhileDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixForDefinition">
            <summary>
            Creates a matrix using a FOR statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixForDefinition.#ctor(Waher.Script.Operators.Conditional.For,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix using a FOR statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixForDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixForEachDefinition">
            <summary>
            Creates a matrix using a FOREACH statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixForEachDefinition.#ctor(Waher.Script.Operators.Conditional.ForEach,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix using a FOREACH statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixForEachDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixIndex">
            <summary>
            Matrix Index operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixIndex.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Matrix Index operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="X">X-coordinate operand.</param>
            <param name="Y">Y-coordinate operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixIndex.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixIndex.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixIndex.EvaluateIndex(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the matrix index operator.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="IndexX">X-Index</param>
            <param name="IndexY">Y-Index</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixIndex.EvaluateIndex(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the vector index operator.
            </summary>
            <param name="Matrix">Vector</param>
            <param name="IndexX">X-Index</param>
            <param name="IndexY">Y-Index</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.MatrixWhileDoDefinition">
            <summary>
            Creates a matrix using a WHILE-DO statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixWhileDoDefinition.#ctor(Waher.Script.Operators.Conditional.WhileDo,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a matrix using a WHILE-DO statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.MatrixWhileDoDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.RowVector">
            <summary>
            Row Vector operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.RowVector.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Row Vector operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Y">Y-coordinate operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.RowVector.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.RowVector.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.RowVector.EvaluateIndex(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the row index operator.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="Index">Index</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.RowVector.EvaluateIndex(Waher.Script.Abstraction.Elements.IMatrix,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the row index operator.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="Index">Index</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.ToMatrix">
            <summary>
            To-Matrix operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ToMatrix.#ctor(Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            To-Matrix operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ToMatrix.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.ToMatrix.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Matrices.Transpose">
            <summary>
            Transpose operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.Transpose.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Transpose operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Matrices.Transpose.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Membership.As">
            <summary>
            As operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.As.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            As operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.As.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.As.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.As.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.As.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Operators.Membership.As.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Operators.Membership.DynamicMember">
            <summary>
            Dynamic member operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.DynamicMember.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dynamic member operator
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Membership.DynamicMember.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.DynamicMember.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.DynamicMember.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.DynamicMember.EvaluateDynamicMember(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates a dynamic member.
            </summary>
            <param name="Operand">Operand</param>
            <param name="Member">Member</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Script node.</param>
            <returns>Resulting value.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Membership.In">
            <summary>
            In operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            In operator
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.In.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Membership.Inherits">
            <summary>
            Inherits operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Inherits.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Inherits operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Inherits.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Inherits.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Inherits.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Inherits.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Operators.Membership.Inherits.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Operators.Membership.Is">
            <summary>
            Is operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Is.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Is operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Is.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Is.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Is.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Is.EvaluateScalarAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="P:Waher.Script.Operators.Membership.Is.ScalarUpgradeBehaviour">
            <summary>
            How scalar operands of different types are to be treated. By default, scalar operands are required to be of the same type.
            </summary>
        </member>
        <member name="T:Waher.Script.Operators.Membership.Matches">
            <summary>
            Matches operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Matches.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Matches operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Matches.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.Matches.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Membership.NamedMember">
            <summary>
            Named member operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMember.#ctor(Waher.Script.Model.ScriptNode,System.String,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Named member operator
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Name">Name</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Membership.NamedMember.Name">
            <summary>
            Name of method.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Membership.NamedMember.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMember.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMember.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMember.EvaluateDynamic(Waher.Script.Abstraction.Elements.IElement,System.String,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the member operator dynamically on an operand.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Name">Name of member.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Script node performing the evaluation.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Membership.NamedMethodCall">
            <summary>
            Named method call operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.#ctor(Waher.Script.Model.ScriptNode,System.String,Waher.Script.Model.ScriptNode[],System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Named method call operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Name">Name</param>
            <param name="Parameters">Method arguments.</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Membership.NamedMethodCall.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Membership.NamedMethodCall.Parameters">
            <summary>
            Method arguments.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Membership.NamedMethodCall.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.EvaluateAsync(System.Type,System.Object,Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Executes a code-behind method.
            </summary>
            <param name="T">Type</param>
            <param name="Instance">Object instance, or null if static method.</param>
            <param name="Arguments">Method arguments.</param>
            <param name="Variables">Variables. If null, argument extensions will not be evaluated.</param>
            <returns>Result, or null if no suitable method found.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NamedMethodCall.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.Membership.NotIn">
            <summary>
            Not-In operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NotIn.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Not-In operator
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NotIn.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Sets.ISet)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Membership.NotIn.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IVector)">
            <summary>
            Evaluates the operator.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.NamedFunctionCall">
            <summary>
            Named function call operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.#ctor(System.String,Waher.Script.Model.ScriptNode[],System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Named function call operator
            </summary>
            <param name="FunctionName">Function</param>
            <param name="Arguments">Arguments</param>
            <param name="NullCheck">If null should be returned if operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.NamedFunctionCall.FunctionName">
            <summary>
            Function name.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.NamedFunctionCall.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.NamedFunctionCall.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.NamedFunctionCall.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.ObjectExNihilo">
            <summary>
            Creates an object from nothing.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.#ctor(System.Collections.Generic.LinkedList{System.Collections.Generic.KeyValuePair{System.String,Waher.Script.Model.ScriptNode}},System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates an object from nothing.
            </summary>
            <param name="Members">Members</param>.
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.ObjectExNihilo.Members">
            <summary>
            Members, in order of definition.
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.ObjectExNihilo.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Operators.ObjectExNihilo.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.ObjectExNihilo.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.PatternMatch">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.PatternMatch.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Assignment operator.
            </summary>
            <param name="Left">Left Operand.</param>
            <param name="Right">Right Operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.PatternMatch.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.PatternMatch.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.PatternMatch.Match(Waher.Script.Model.ScriptNode,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables,Waher.Script.Model.ScriptNode)">
            <summary>
            Performs a pattern-matching operation
            </summary>
            <param name="Branch">Branch to examine</param>
            <param name="Value">Value to examine against</param>
            <param name="Variables">Current set of variables where corresponding variable references will be set.</param>
            <param name="Node">Node performing pattern matching operation.</param>
        </member>
        <member name="T:Waher.Script.Operators.Sequence">
            <summary>
            Represents a sequence of statements.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.#ctor(System.Collections.Generic.LinkedList{Waher.Script.Model.ScriptNode},System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Represents a sequence of statements.
            </summary>
            <param name="Statements">Statements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Sequence.Statements">
            <summary>
            Statements
            </summary>
        </member>
        <member name="P:Waher.Script.Operators.Sequence.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Operators.Sequence.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.Sequence.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.Sets.ImplicitSetDefinition">
            <summary>
            Defines a set, by implicitly limiting its members to members of an optional superset, matching given conditions.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Defines a set, by implicitly limiting its members to members of an optional superset, matching given conditions.
            </summary>
            <param name="Pattern">Pattern defining elements in the set.</param>
            <param name="SuperSet">Optional superset, if defining subset.</param>
            <param name="Conditions">Conditions of elements in the set.</param>
            <param name="DoubleColon">If double-colon was used to define the set.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.SeparateConditions(Waher.Script.Model.ScriptNode[],Waher.Script.Operators.Membership.In[]@,Waher.Script.Model.ScriptNode[]@)">
            <summary>
            Separates conditions into set membership conditions and other types of conditions.
            </summary>
            <param name="Conditions">Conditions</param>
            <param name="SetConditions">Set membership conditions. Can be set to null, if none found.</param>
            <param name="OtherConditions">Other conditions</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ImplicitSetDefinition.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.Sets.Intersection">
            <summary>
            Intersection operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Intersection.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Intersection operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Intersection.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Intersection.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.Interval">
            <summary>
            Interval operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Interval.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Interval operator
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Interval.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Interval operator
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="StepSize">Step size.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Interval.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Interval.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.SetDefinition">
            <summary>
            Creates a set.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDefinition.#ctor(Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a set.
            </summary>
            <param name="Elements">Set elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDefinition.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the elements of a set.
            </summary>
            <param name="Elements">Set elements.</param>
            <returns>Encapsulated set.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDefinition.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.SetDoWhileDefinition">
            <summary>
            Creates a set using a DO-WHILE statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDoWhileDefinition.#ctor(Waher.Script.Operators.Conditional.DoWhile,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a set using a DO-WHILE statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetDoWhileDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.SetForDefinition">
            <summary>
            Creates a set using a FOR statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetForDefinition.#ctor(Waher.Script.Operators.Conditional.For,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a set using a FOR statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetForDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.SetForEachDefinition">
            <summary>
            Creates a set using a FOREACH statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetForEachDefinition.#ctor(Waher.Script.Operators.Conditional.ForEach,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a set using a FOREACH statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetForEachDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.SetWhileDoDefinition">
            <summary>
            Creates a set using a WHILE-DO statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetWhileDoDefinition.#ctor(Waher.Script.Operators.Conditional.WhileDo,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a set using a WHILE-DO statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.SetWhileDoDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.ToSet">
            <summary>
            To-Set operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ToSet.#ctor(Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            To-Set operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ToSet.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.ToSet.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Sets.Union">
            <summary>
            Union operator
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Union.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Union operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Union.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Sets.Union.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:Waher.Script.Operators.SetUnit">
            <summary>
            Sets a physical unit
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.SetUnit.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Units.Unit,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Sets a physical unit
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Unit">Unit to set.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.SetUnit.Unit">
            <summary>
            Unit to set.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.SetUnit.EvaluateScalar(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on scalar operands.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.CartesianProduct">
            <summary>
            Cartesian-product operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.CartesianProduct.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Cartesian-product operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.CartesianProduct.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on vector operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.CrossProduct">
            <summary>
            Cross-product operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.CrossProduct.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Cross-product operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.CrossProduct.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on vector operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.DotProduct">
            <summary>
            Dot-product operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.DotProduct.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Dot-product operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.DotProduct.EvaluateVector(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IVector,Waher.Script.Variables)">
            <summary>
            Evaluates the operator on vector operands.
            </summary>
            <param name="Left">Left value.</param>
            <param name="Right">Right value.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.ImplicitVectorDefinition">
            <summary>
            Defines a vector, by implicitly limiting its members to members of an optional vector, matching given conditions.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Defines a vector, by implicitly limiting its members to members of an optional vector, matching given conditions.
            </summary>
            <param name="Pattern">Pattern defining elements in the set.</param>
            <param name="Vector">Optional vector, if defining vector from members of a previous vector.</param>
            <param name="Conditions">Conditions of elements in the set.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.ForAllChildNodes(Waher.Script.Model.ScriptNodeEventHandler,System.Object,Waher.Script.Model.SearchMethod)">
            <summary>
            Calls the callback method for all child nodes.
            </summary>
            <param name="Callback">Callback method to call.</param>
            <param name="State">State object to pass on to the callback method.</param>
            <param name="Order">Order to traverse the nodes.</param>
            <returns>If the process was completed.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ImplicitVectorDefinition.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.IToVector">
            <summary>
            Interface for objects that can be converted into matrices.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.IToVector.ToVector">
            <summary>
            Converts the object to a vector.
            </summary>
            <returns>Matrix.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.ToVector">
            <summary>
            To-Vector operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ToVector.#ctor(Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            To-Vector operator.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ToVector.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Operand">Operand.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.ToVector.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorDefinition">
            <summary>
            Creates a vector.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.#ctor(Waher.Script.Model.ScriptNode[],System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.Encapsulate(System.Array,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a vector.
            </summary>
            <param name="Elements">Vector elements.</param>
            <param name="CanEncapsulateAsMatrix">If the method can encapsulate the contents as a matrix.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated vector.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.Encapsulate(Waher.Script.Abstraction.Elements.IElement[],System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a vector.
            </summary>
            <param name="Elements">Vector elements.</param>
            <param name="CanEncapsulateAsMatrix">If the method can encapsulate the contents as a matrix.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated vector.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.Encapsulate(System.Collections.Generic.IEnumerable{System.Object},System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a vector.
            </summary>
            <param name="Elements">Vector elements.</param>
            <param name="CanEncapsulateAsMatrix">If the method can encapsulate the contents as a matrix.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated vector.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.Encapsulate(System.Collections.Generic.ICollection{Waher.Script.Abstraction.Elements.IElement},System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Encapsulates the elements of a vector.
            </summary>
            <param name="Elements">Vector elements.</param>
            <param name="CanEncapsulateAsMatrix">If the method can encapsulate the contents as a matrix.</param>
            <param name="Node">Script node from where the encapsulation is done.</param>
            <returns>Encapsulated vector.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDefinition.PatternMatch(Waher.Script.Abstraction.Elements.IElement,System.Collections.Generic.Dictionary{System.String,Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Performs a pattern match operation.
            </summary>
            <param name="CheckAgainst">Value to check against.</param>
            <param name="AlreadyFound">Variables already identified.</param>
            <returns>Pattern match result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorDoWhileDefinition">
            <summary>
            Creates a vector using a DO-WHILE statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDoWhileDefinition.#ctor(Waher.Script.Operators.Conditional.DoWhile,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector using a DO-WHILE statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDoWhileDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDoWhileDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorDoWhileDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements to encapsulate.</param>
            <returns>Encapsulated element.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorForDefinition">
            <summary>
            Creates a vector using a FOR statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForDefinition.#ctor(Waher.Script.Operators.Conditional.For,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector using a FOR statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Vectors.VectorForDefinition.VariableName">
            <summary>
            Variable Name.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements to encapsulate.</param>
            <returns>Encapsulated element.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorForEachDefinition">
            <summary>
            Creates a vector using a FOREACH statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForEachDefinition.#ctor(Waher.Script.Operators.Conditional.ForEach,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector using a FOREACH statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Vectors.VectorForEachDefinition.VariableName">
            <summary>
            Variable Name.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForEachDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForEachDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorForEachDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements to encapsulate.</param>
            <returns>Encapsulated element.</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorIndex">
            <summary>
            Vector Index operator.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Boolean,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Vector Index operator.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Script.Operators.Vectors.VectorIndex.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.EvaluateIndex(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,System.Boolean,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the vector index operator.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Index">Index</param>
            <param name="NullCheck">If null should be returned if left operand is null.</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.TryGetIndexProperty(System.Type,System.Boolean,System.Boolean,System.Reflection.PropertyInfo@,System.Reflection.ParameterInfo[]@)">
            <summary>
            Tries to get a one-dimensional index property of a Type.
            </summary>
            <param name="T">Type</param>
            <param name="ForReading">If index property is for reading.</param>
            <param name="ForWriting">If index property is for writing.</param>
            <param name="PropertyInfo">Property information of index property.</param>
            <param name="Parameters">Parameter definitions of index property.</param>
            <returns>If a one-dimensional index property was found.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorIndex.EvaluateIndex(Waher.Script.Abstraction.Elements.IVector,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Evaluates the vector index operator.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Index">Index</param>
            <param name="Node">Node performing the operation.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Waher.Script.Operators.Vectors.VectorWhileDoDefinition">
            <summary>
            Creates a vector using a WHILE-DO statement.
            </summary>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorWhileDoDefinition.#ctor(Waher.Script.Operators.Conditional.WhileDo,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a vector using a WHILE-DO statement.
            </summary>
            <param name="Elements">Elements.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorWhileDoDefinition.Evaluate(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorWhileDoDefinition.EvaluateAsync(Waher.Script.Variables)">
            <summary>
            Evaluates the node, using the variables provided in the <paramref name="Variables"/> collection.
            </summary>
            <param name="Variables">Variables collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Waher.Script.Operators.Vectors.VectorWhileDoDefinition.Encapsulate(System.Collections.Generic.LinkedList{Waher.Script.Abstraction.Elements.IElement})">
            <summary>
            Encapsulates the calculated elements.
            </summary>
            <param name="Elements">Elements</param>
            <returns>Encapsulated elements.</returns>
        </member>
        <member name="T:Waher.Script.Order.CompoundOrder">
            <summary>
            Orders elements based on a sequence of comparers.
            </summary>
        </member>
        <member name="M:Waher.Script.Order.CompoundOrder.#ctor(System.Collections.Generic.IComparer{Waher.Script.Abstraction.Elements.IElement}[])">
            <summary>
            Orders elements based on a sequence of comparers.
            </summary>
            <param name="Comparers">Comparers</param>
        </member>
        <member name="M:Waher.Script.Order.CompoundOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two elements.
            </summary>
            <param name="x">First element</param>
            <param name="y">Second element</param>
            <returns>Ordinal difference between elements.</returns>
        </member>
        <member name="T:Waher.Script.Order.ElementOrder">
            <summary>
            Orders elements based on their values.
            </summary>
        </member>
        <member name="M:Waher.Script.Order.ElementOrder.#ctor(Waher.Script.Model.ScriptNode)">
            <summary>
            Orders elements based on their values.
            </summary>
            <param name="Node">Node performing evaluation.</param>
        </member>
        <member name="M:Waher.Script.Order.ElementOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two elements.
            </summary>
            <param name="x">First element</param>
            <param name="y">Second element</param>
            <returns>Ordinal difference between elements.</returns>
        </member>
        <member name="M:Waher.Script.Order.ElementOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement,Waher.Script.Model.ScriptNode)">
            <summary>
            Compares two elements using the order operator defined by their associated sets.
            </summary>
            <param name="x">First operand.</param>
            <param name="y">Second operand.</param>
            <param name="Node">Node performing the comparison.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="T:Waher.Script.Order.IndexOrder">
            <summary>
            Orders vectors based on values of elements at a given index position in the vectors.
            </summary>
        </member>
        <member name="M:Waher.Script.Order.IndexOrder.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32)">
            <summary>
            Orders vectors based on values of elements at a given index position in the vectors.
            </summary>
            <param name="Node">Node performing evaluation</param>
            <param name="Index">Index position to compare.</param>
            <param name="Sign">If ascending (1) or descending (-1) order is desired.</param>
        </member>
        <member name="M:Waher.Script.Order.IndexOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two elements.
            </summary>
            <param name="x">First element</param>
            <param name="y">Second element</param>
            <returns>Ordinal difference between elements.</returns>
        </member>
        <member name="T:Waher.Script.Order.LambdaOrder">
            <summary>
            Orders elements based logic defined in a lambda expression.
            </summary>
        </member>
        <member name="M:Waher.Script.Order.LambdaOrder.#ctor(Waher.Script.Model.ILambdaExpression,Waher.Script.Variables)">
            <summary>
            Orders elements based logic defined in a lambda expression.
            </summary>
            <param name="Lambda">Lambda expression-</param>
            <param name="Variables">Variables to use during evaluation.</param>
        </member>
        <member name="M:Waher.Script.Order.LambdaOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two elements.
            </summary>
            <param name="x">First element</param>
            <param name="y">Second element</param>
            <returns>Ordinal difference between elements.</returns>
        </member>
        <member name="T:Waher.Script.Order.PropertyOrder">
            <summary>
            Orders elements based on values of a given property.
            </summary>
        </member>
        <member name="M:Waher.Script.Order.PropertyOrder.#ctor(Waher.Script.Model.ScriptNode,System.String,System.Int32)">
            <summary>
            Orders elements based on values of a given property.
            </summary>
            <param name="Node">Node performing evaluation.</param>
            <param name="Name">Name of property to order on.</param>
            <param name="Sign">If ascending (1) or descending (-1) order is desired.</param>
        </member>
        <member name="M:Waher.Script.Order.PropertyOrder.Compare(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Compares two elements.
            </summary>
            <param name="x">First element</param>
            <param name="y">Second element</param>
            <returns>Ordinal difference between elements.</returns>
        </member>
        <member name="T:Waher.Script.Output.BigIntegerOutput">
            <summary>
            Converts values of type BigInteger to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.BigIntegerOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.BigIntegerOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.BooleanOutput">
            <summary>
            Converts values of type Boolean to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.BooleanOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.BooleanOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.ComplexArrayOutput">
            <summary>
            Converts values of type Complex[] to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.ComplexArrayOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.ComplexArrayOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.ComplexOutput">
            <summary>
            Converts values of type Complex to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.ComplexOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.ComplexOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.DateTimeOutput">
            <summary>
            Converts values of type DateTime to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.DateTimeOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.DateTimeOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.DecimalOutput">
            <summary>
            Converts values of type Decimal to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.DecimalOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.DecimalOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.DoubleArrayOutput">
            <summary>
            Converts values of type Double[] to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.DoubleArrayOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.DoubleArrayOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.DoubleOutput">
            <summary>
            Converts values of type Double to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.DoubleOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.DoubleOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.EnumOutput">
            <summary>
            Converts enumeration values to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.EnumOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.EnumOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.ExceptionOutput">
            <summary>
            Converts values of type Exception to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.ExceptionOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.ExceptionOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.ICustomStringOutput">
            <summary>
            Interface for custom string output classes. Converts objects of a given type to an expression string.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.ICustomStringOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.ObjectExNihiloOutput">
            <summary>
            Converts values of type Dictionary{string, IElement} to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.ObjectExNihiloOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.ObjectExNihiloOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="M:Waher.Script.Output.ObjectExNihiloOutput.CanBeVariable(System.String)">
            <summary>
            Checks if a label can be used as a variable directly or not.
            </summary>
            <param name="Label">Label string.</param>
            <returns>If the label can act as a variable.</returns>
        </member>
        <member name="T:Waher.Script.Output.StringOutput">
            <summary>
            Converts values of type String to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.StringOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.StringOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.TimeSpanOutput">
            <summary>
            Converts values of type TimeSpan to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.TimeSpanOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.TimeSpanOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.Output.VariablesOutput">
            <summary>
            Converts values of type Variables to expression strings.
            </summary>
        </member>
        <member name="M:Waher.Script.Output.VariablesOutput.Supports(System.Type)">
            <summary>
            If the interface understands objects such as <paramref name="Object"/>.
            </summary>
            <param name="Object">Object</param>
            <returns>How well objects of this type are supported.</returns>
        </member>
        <member name="M:Waher.Script.Output.VariablesOutput.GetString(System.Object)">
            <summary>
            Gets a string representing a value.
            </summary>
            <param name="Value">Value</param>
            <returns>Expression string.</returns>
        </member>
        <member name="T:Waher.Script.PreviewEventHandler">
            <summary>
            Delegate for preview events.
            </summary>
            <param name="Sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Waher.Script.PreviewEventArgs">
            <summary>
            Event arguments for preview events.
            </summary>
        </member>
        <member name="M:Waher.Script.PreviewEventArgs.#ctor(Waher.Script.Expression,Waher.Script.Variables,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Event arguments for preview events.
            </summary>
            <param name="Expression">Expression being evaluated.</param>
            <param name="Variables">Variables collection.</param>
            <param name="Preview">Preview of result.</param>
        </member>
        <member name="P:Waher.Script.PreviewEventArgs.Expression">
            <summary>
            Expression being evaluated.
            </summary>
        </member>
        <member name="P:Waher.Script.PreviewEventArgs.Variables">
            <summary>
            Current Variables Collection.
            </summary>
        </member>
        <member name="P:Waher.Script.PreviewEventArgs.Preview">
            <summary>
            Preview of result.
            </summary>
        </member>
        <member name="T:Waher.Script.StatusEventHandler">
            <summary>
            Delegate for status events.
            </summary>
            <param name="Sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Waher.Script.StatusEventArgs">
            <summary>
            Event arguments for status events.
            </summary>
        </member>
        <member name="M:Waher.Script.StatusEventArgs.#ctor(Waher.Script.Expression,Waher.Script.Variables,System.String)">
            <summary>
            Event arguments for status events.
            </summary>
            <param name="Expression">Expression being evaluated.</param>
            <param name="Variables">Current variables collection.</param>
            <param name="Status">Current status of execution.</param>
        </member>
        <member name="P:Waher.Script.StatusEventArgs.Expression">
            <summary>
            Expression being evaluated.
            </summary>
        </member>
        <member name="P:Waher.Script.StatusEventArgs.Variables">
            <summary>
            Current Variables collection.
            </summary>
        </member>
        <member name="P:Waher.Script.StatusEventArgs.Status">
            <summary>
            Current status of execution.
            </summary>
        </member>
        <member name="T:Waher.Script.TypeConversion.BigIntegerToDouble">
            <summary>
            Converts a <see cref="T:System.Numerics.BigInteger"/> to a double number, if possible.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.BigIntegerToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.BigIntegerToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.BigIntegerToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.BigIntegerToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.BigIntegerToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.BooleanToDouble">
            <summary>
            Converts a Boolean value to a double number.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.BooleanToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.BooleanToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.BooleanToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.BooleanToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.BooleanToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.ConversionSequence">
            <summary>
            Performs a sequence of type conversions to convert an object from one type to another.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.ConversionSequence.#ctor(Waher.Script.TypeConversion.ITypeConverter[])">
            <summary>
            Performs a sequence of type conversions to convert an object from one type to another.
            </summary>
            <param name="Converters">Sequence of converters.</param>
        </member>
        <member name="P:Waher.Script.TypeConversion.ConversionSequence.Converters">
            <summary>
            Sequence of converters.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.ConversionSequence.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.ConversionSequence.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.ConversionSequence.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.To"/>. If conversion not possible, null is returned.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.ConversionSequence.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            If conversion not possible, null is returned.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.ConversionSequence.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.DecimalToDouble">
            <summary>
            Converts decimal numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DecimalToDouble.From">
            <summary>
            Converts double numbers to decimal numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DecimalToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.DecimalToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.DecimalToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DecimalToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.DoubleToBigInteger">
            <summary>
            Converts a double number to a <see cref="T:System.Numerics.BigInteger"/>, if possible.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToBigInteger.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToBigInteger.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToBigInteger.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToBigInteger.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToBigInteger.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.DoubleToComplex">
            <summary>
            Converts double numbers to complex numbers
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToComplex.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToComplex.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToComplex.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToComplex.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToComplex.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.DoubleToDecimal">
            <summary>
            Converts double numbers to decimal numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToDecimal.From">
            <summary>
            Converts double numbers to decimal numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.DoubleToDecimal.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToDecimal.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.DoubleToDecimal.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.DoubleToDecimal.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.Int16ToDouble">
            <summary>
            Converts short numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int16ToDouble.From">
            <summary>
            Converts double numbers to short numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int16ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int16ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int16ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int16ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.Int32ToDouble">
            <summary>
            Converts int numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int32ToDouble.From">
            <summary>
            Converts double numbers to int numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int32ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int32ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int32ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int32ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.Int64ToDouble">
            <summary>
            Converts long numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int64ToDouble.From">
            <summary>
            Converts double numbers to long numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int64ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int64ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int64ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int64ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.Int8ToDouble">
            <summary>
            Converts sbyte numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int8ToDouble.From">
            <summary>
            Converts double numbers to sbyte numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.Int8ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int8ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.Int8ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.Int8ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.ITypeConverter">
            <summary>
            Converts an object of one type to an object of another type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.ITypeConverter.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.ITypeConverter.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.ITypeConverter.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.To"/>. If conversion not possible, null is returned.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.ITypeConverter.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            If conversion not possible, null is returned.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.ITypeConverter.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.MeasurementToDouble">
            <summary>
            Converts a <see cref="T:Waher.Script.Objects.Measurement"/> to a double number.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.MeasurementToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.MeasurementToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.MeasurementToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.MeasurementToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.MeasurementToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.PhysicalQuantityToDouble">
            <summary>
            Converts a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/> to a double number.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.PhysicalQuantityToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.PhysicalQuantityToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement">
            <summary>
            Converts a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/> to a <see cref="T:Waher.Script.Objects.Measurement"/>.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.PhysicalQuantityToMeasurement.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.UInt16ToDouble">
            <summary>
            Converts ushort numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt16ToDouble.From">
            <summary>
            Converts double numbers to ushort numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt16ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt16ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt16ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt16ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.UInt32ToDouble">
            <summary>
            Converts uint numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt32ToDouble.From">
            <summary>
            Converts double numbers to uint numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt32ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt32ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt32ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt32ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.UInt64ToDouble">
            <summary>
            Converts ulong numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt64ToDouble.From">
            <summary>
            Converts double numbers to ulong numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt64ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt64ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt64ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt64ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.TypeConversion.UInt8ToDouble">
            <summary>
            Converts byte numbers to double numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt8ToDouble.From">
            <summary>
            Converts double numbers to byte numbers.
            </summary>
        </member>
        <member name="P:Waher.Script.TypeConversion.UInt8ToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt8ToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Script.TypeConversion.UInt8ToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Script.TypeConversion.UInt8ToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Script.Units.AtomicUnit">
            <summary>
            Represents an atomic unit.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.AtomicUnit.#ctor(System.String)">
            <summary>
            Represents an atomic unit.
            </summary>
            <param name="Name">Unit name.</param>
        </member>
        <member name="P:Waher.Script.Units.AtomicUnit.Name">
            <summary>
            Unit name.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.AtomicUnit.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Units.AtomicUnit.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Units.AtomicUnit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Units.BaseQuantities.Current">
            <summary>
            An electric current is a flow of electric charge.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Current.#ctor">
            <summary>
            An electric current is a flow of electric charge.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Current.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Current.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Current.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Current.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Current.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.BaseQuantities.Length">
            <summary>
            The one-dimensional extent of an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Length.#ctor">
            <summary>
            The one-dimensional extent of an object.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Length.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Length.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Length.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Length.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Length.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.BaseQuantities.Mass">
            <summary>
            It is generally a measure of an object's resistance to changing its state of motion when a force is applied.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Mass.#ctor">
            <summary>
            It is generally a measure of an object's resistance to changing its state of motion when a force is applied.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Mass.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Mass.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Mass.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Mass.TryConvert(System.Double,Waher.Script.Units.Unit,Waher.Script.Units.Unit,System.Double@)">
            <summary>
            Tries to convert a magnitude in one unit to a magnitude in another.
            
            NOTE: No consideration must be taken to the prefixes of the different units.
            
            NOTE 2: When this method is called, units have been recognized and considered being part of the same base quantity.
            </summary>
            <param name="From">Original magnitude.</param>
            <param name="FromUnit">Original unit.</param>
            <param name="ToUnit">Desired unit.</param>
            <param name="To">Converted magnitude.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Mass.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Mass.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.BaseQuantities.Temperature">
            <summary>
            A temperature is an objective comparative measure of hot or cold.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Temperature.#ctor">
            <summary>
            A temperature is an objective comparative measure of hot or cold.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Temperature.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Temperature.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Temperature.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Temperature.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Temperature.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.BaseQuantities.Time">
            <summary>
            Time is a measure in which events can be ordered from the past through the present into the future, and also the measure 
            of durations of events and the intervals between them.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Time.#ctor">
            <summary>
            Time is a measure in which events can be ordered from the past through the present into the future, and also the measure 
            of durations of events and the intervals between them.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Time.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Time.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.BaseQuantities.Time.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Time.TryConvert(System.Double,Waher.Script.Units.Unit,Waher.Script.Units.Unit,System.Double@)">
            <summary>
            Tries to convert a magnitude in one unit to a magnitude in another.
            
            NOTE: No consideration must be taken to the prefixes of the different units.
            
            NOTE 2: When this method is called, units have been recognized and considered being part of the same base quantity.
            </summary>
            <param name="From">Original magnitude.</param>
            <param name="FromUnit">Original unit.</param>
            <param name="ToUnit">Desired unit.</param>
            <param name="To">Converted magnitude.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Time.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.BaseQuantities.Time.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.CompoundQuantities.Energy">
            <summary>
            Energy, or work.
            
            In physics, energy is a property of objects which can be transferred to other objects or converted into different forms.
            In physics, a force is said to do work if, when acting on a body, there is a displacement of the point of application in 
            the direction of the force.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.CompoundQuantities.Energy.#ctor">
            <summary>
            Energy, or work.
            
            In physics, energy is a property of objects which can be transferred to other objects or converted into different forms.
            In physics, a force is said to do work if, when acting on a body, there is a displacement of the point of application in 
            the direction of the force.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.CompoundQuantities.Energy.Name">
            <summary>
            Name of compound quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.CompoundQuantities.Energy.CompoundQuantities">
            <summary>
            Compound quantities. Must only use base quantity units.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.CompoundQuantities.Speed">
            <summary>
            In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); 
            it is thus a scalar quantity.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.CompoundQuantities.Speed.#ctor">
            <summary>
            In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); 
            it is thus a scalar quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.CompoundQuantities.Speed.Name">
            <summary>
            Name of compound quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.CompoundQuantities.Speed.CompoundQuantities">
            <summary>
            Compound quantities. Must only use base quantity units.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Capacitance">
            <summary>
            Capacitance.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Capacitance.#ctor">
            <summary>
            Capacitance.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Capacitance.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Capacitance.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Charge">
            <summary>
            Electric charge.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Charge.#ctor">
            <summary>
            Electric charge.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Charge.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Charge.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Energy">
            <summary>
            Energy, or work.
            
            In physics, energy is a property of objects which can be transferred to other objects or converted into different forms.
            In physics, a force is said to do work if, when acting on a body, there is a displacement of the point of application in 
            the direction of the force.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Energy.#ctor">
            <summary>
            Energy, or work.
            
            In physics, energy is a property of objects which can be transferred to other objects or converted into different forms.
            In physics, a force is said to do work if, when acting on a body, there is a displacement of the point of application in 
            the direction of the force.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Energy.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Energy.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Force">
            <summary>
            In physics, a force is any interaction that, when unopposed, will change the motion of an object.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Force.#ctor">
            <summary>
            In physics, a force is any interaction that, when unopposed, will change the motion of an object.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Force.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Force.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Frequency">
            <summary>
            Frequency is the number of occurrences of a repeating event per unit time.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Frequency.#ctor">
            <summary>
            Frequency is the number of occurrences of a repeating event per unit time.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Frequency.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Frequency.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Power">
            <summary>
            In physics, power is the rate of doing work.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Power.#ctor">
            <summary>
            In physics, power is the rate of doing work.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Power.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Power.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Pressure">
            <summary>
            Pressure (symbol: p or P) is the force applied perpendicular to the surface of an object per unit area over which that 
            force is distributed.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Pressure.#ctor">
            <summary>
            Pressure (symbol: p or P) is the force applied perpendicular to the surface of an object per unit area over which that 
            force is distributed.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Pressure.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Pressure.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Resistance">
            <summary>
            Resistance.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Resistance.#ctor">
            <summary>
            Resistance.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Resistance.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Resistance.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Speed">
            <summary>
            In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); 
            it is thus a scalar quantity.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Speed.#ctor">
            <summary>
            In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); 
            it is thus a scalar quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Speed.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Speed.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Voltage">
            <summary>
            Electric potential difference, electromotive force
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Voltage.#ctor">
            <summary>
            Electric potential difference, electromotive force
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Voltage.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Voltage.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.DerivedQuantities.Volume">
            <summary>
            Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance 
            (solid, liquid, gas, or plasma) or shape occupies or contains.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.DerivedQuantities.Volume.#ctor">
            <summary>
            Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance 
            (solid, liquid, gas, or plasma) or shape occupies or contains.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Volume.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.DerivedQuantities.Volume.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.IBaseQuantity">
            <summary>
            Interface for physical base quantities 
            </summary>
        </member>
        <member name="P:Waher.Script.Units.IBaseQuantity.Name">
            <summary>
            Name of base quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.IBaseQuantity.BaseUnits">
            <summary>
            Base Units supported.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.IBaseQuantity.ReferenceUnit">
            <summary>
            Reference unit of base quantity.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.IBaseQuantity.ToReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude from a specified base unit, to the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="M:Waher.Script.Units.IBaseQuantity.FromReferenceUnit(System.Double@,System.String,System.Int32)">
            <summary>
            Tries to convert a magnitude to a specified base unit, from the reference unit.
            </summary>
            <param name="Magnitude">Magnitude</param>
            <param name="BaseUnit">Desired base unit of <paramref name="Magnitude"/>.</param>
            <param name="Exponent">Exponent.</param>
            <returns>If the conversion was successful. If not, the magnitude value is unchanged.</returns>
        </member>
        <member name="T:Waher.Script.Units.ICompoundQuantity">
            <summary>
            Interface for physical compound quantities 
            </summary>
        </member>
        <member name="P:Waher.Script.Units.ICompoundQuantity.Name">
            <summary>
            Name of compound quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.ICompoundQuantity.CompoundQuantities">
            <summary>
            Compound quantities. Must only use base quantity units.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.IDerivedQuantity">
            <summary>
            Interface for derived quantities 
            </summary>
        </member>
        <member name="P:Waher.Script.Units.IDerivedQuantity.Name">
            <summary>
            Name of derived quantity.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.IDerivedQuantity.DerivedUnits">
            <summary>
            Derived Units supported.
            </summary>
        </member>
        <member name="T:Waher.Script.Units.Prefix">
            <summary>
            SI prefixes.
            http://physics.nist.gov/cuu/Units/prefixes.html
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Yotta">
            <summary>
            10^24 yotta Y 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Zetta">
            <summary>
            10^21 zetta Z 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Exa">
            <summary>
            10^18 exa E 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Peta">
            <summary>
            10^15 peta P 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Tera">
            <summary>
            10^12 tera T 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Giga">
            <summary>
            10^9 giga G 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Mega">
            <summary>
            10^6 mega M 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Kilo">
            <summary>
            10^3 kilo k 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Hecto">
            <summary>
            10^2 hecto h 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Deka">
            <summary>
            10^1 deka da
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.None">
            <summary>
            No prefix
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Deci">
            <summary>
            10^-1 deci d 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Centi">
            <summary>
            10^-2 centi c 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Milli">
            <summary>
            10^-3 milli m 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Micro">
            <summary>
            10^-6 micro µ 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Nano">
            <summary>
            10^-9 nano n 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Pico">
            <summary>
            10^-12 pico p 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Femto">
            <summary>
            10^-15 femto f 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Atto">
            <summary>
            10^-18 atto a 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Zepto">
            <summary>
            10^-21 zepto z 
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Prefix.Yocto">
            <summary>
            10^-24 yocto y
            </summary>
        </member>
        <member name="T:Waher.Script.Units.Prefixes">
            <summary>
            Static class managing units.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.Prefixes.PrefixToFactor(Waher.Script.Units.Prefix)">
            <summary>
            Conerts a prefix to a multiplicative factor.
            </summary>
            <param name="Prefix">Prefix</param>
            <returns>Multiplicative factor.</returns>
        </member>
        <member name="M:Waher.Script.Units.Prefixes.PrefixToExponent(Waher.Script.Units.Prefix)">
            <summary>
            Conerts a prefix to an exponent.
            </summary>
            <param name="Prefix">Prefix</param>
            <returns>Exponent.</returns>
        </member>
        <member name="M:Waher.Script.Units.Prefixes.ExponentToPrefix(System.Int32,System.Int32@)">
            <summary>
            Converts an exponent to a prefix.
            </summary>
            <param name="Exponent">Exponent.</param>
            <param name="ResidueExponent">Any exponential residue. If this value is 0, it means the exponent corresponds exactly 
            to the returned prefix.</param>
            <returns>Closest prefix.</returns>
        </member>
        <member name="M:Waher.Script.Units.Prefixes.TryParsePrefix(System.Char,Waher.Script.Units.Prefix@)">
            <summary>
            Tries to parse a character into a prefix.
            
            NOTE: The only prefix the method does not recognize is "da"=<see cref="F:Waher.Script.Units.Prefix.Deka"/>, since it consists of two letters.
            This prefix must be handled manually by the caller.
            </summary>
            <param name="ch">Character.</param>
            <param name="Prefix">Prefix, if successful.</param>
            <returns>If the character was recognized as a prefix.</returns>
        </member>
        <member name="M:Waher.Script.Units.Prefixes.ToString(Waher.Script.Units.Prefix)">
            <summary>
            Converts a prefix to its string representation.
            </summary>
            <param name="Prefix">Prefix.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:Waher.Script.Units.Unit">
            <summary>
            Represents a unit.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.Unit.#ctor(Waher.Script.Units.Prefix,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{Waher.Script.Units.AtomicUnit,System.Int32}})">
            <summary>
            Represents a unit.
            </summary>
            <param name="Prefix">Associated prefix.</param>
            <param name="Factors">Sequence of atomic unit factors, and their corresponding exponents.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.#ctor(Waher.Script.Units.Prefix,System.Collections.Generic.KeyValuePair{Waher.Script.Units.AtomicUnit,System.Int32}[])">
            <summary>
            Represents a unit.
            </summary>
            <param name="Prefix">Associated prefix.</param>
            <param name="Factors">Sequence of atomic unit factors, and their corresponding exponents.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.#ctor(Waher.Script.Units.Prefix,System.Collections.Generic.KeyValuePair{System.String,System.Int32}[])">
            <summary>
            Represents a unit.
            </summary>
            <param name="Prefix">Associated prefix.</param>
            <param name="Factors">Sequence of atomic unit factors, and their corresponding exponents.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.#ctor(System.String[])">
            <summary>
            Represents a unit.
            </summary>
            <param name="AtomicUnits">Sequence of atomic units.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.#ctor(Waher.Script.Units.Prefix,System.String[])">
            <summary>
            Represents a unit.
            </summary>
            <param name="Prefix">Associated prefix.</param>
            <param name="AtomicUnits">Sequence of atomic units.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.Parse(System.String)">
            <summary>
            Parses a unit string.
            </summary>
            <param name="UnitString">Unit string</param>
            <returns>Parsed unit.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.TryParse(System.String,Waher.Script.Units.Unit@)">
            <summary>
            Tries to parse a string into a unit.
            </summary>
            <param name="UnitString">String expression</param>
            <param name="Unit">Parsed unit.</param>
            <returns>If string could be parsed into a unit.</returns>
        </member>
        <member name="P:Waher.Script.Units.Unit.Prefix">
            <summary>
            Associated prefix.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.Unit.Factors">
            <summary>
            Sequence of atomic unit factors, and their corresponding exponents.
            </summary>
        </member>
        <member name="P:Waher.Script.Units.Unit.IsEmpty">
            <summary>
            If the unit is empty. (A unit of only a prefix, but no factors, is not empty.)
            </summary>
        </member>
        <member name="P:Waher.Script.Units.Unit.HasFactors">
            <summary>
            If the unit has any factors.
            </summary>
        </member>
        <member name="F:Waher.Script.Units.Unit.Empty">
            <summary>
            Empty unit.
            </summary>
        </member>
        <member name="M:Waher.Script.Units.Unit.Invert(System.Int32@)">
            <summary>
            Inverts the unit.
            </summary>
            <param name="ResidueExponent">Any exponential residue. If this value is 0, it means the exponent corresponds exactly 
            to the returned prefix.</param>
            <returns>Inverted unit.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Units.Unit.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Units.Unit.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Script.Units.Unit.ToString(System.Boolean)">
            <summary>
            Converts the unit to a string.
            </summary>
            <param name="IncludePrefix">If the prefix should be included in the string or not.</param>
        </member>
        <member name="M:Waher.Script.Units.Unit.Multiply(Waher.Script.Units.Unit,Waher.Script.Units.Unit,System.Int32@)">
            <summary>
            Multiplies two units with each other.
            </summary>
            <param name="Left">Left unit.</param>
            <param name="Right">Right unit.</param>
            <param name="ResidueExponent">Any residual exponent resulting from the multiplication.</param>
            <returns>Resulting unit.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.Divide(Waher.Script.Units.Unit,Waher.Script.Units.Unit,System.Int32@)">
            <summary>
            Divides the right unit from the left unit: <paramref name="Left"/>/<paramref name="Right"/>.
            </summary>
            <param name="Left">Left unit.</param>
            <param name="Right">Right unit.</param>
            <param name="ResidueExponent">Any residual exponent resulting from the division.</param>
            <returns>Resulting unit.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.ToBaseUnits(System.Double@)">
            <summary>
            Converts the unit to a series of base unit factors. (Unrecognized units will be assumed to be base units.)
            </summary>
            <param name="Magnitude">Reference magnitude.</param>
            <returns>Unit consisting of base unit factors.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.ToReferenceUnits(System.Double@)">
            <summary>
            Converts the unit to a series of reference unit factors. (Unrecognized units will be assumed to be reference units.)
            </summary>
            <param name="Magnitude">Reference magnitude.</param>
            <returns>Unit consisting of reference unit factors.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.FromReferenceUnits(System.Double@)">
            <summary>
            Converts the unit to a series of reference unit factors. (Unrecognized units will be assumed to be reference units.)
            </summary>
            <param name="Magnitude">Reference magnitude.</param>
            <returns>Unit consisting of reference unit factors.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.TryGetCompoundUnit(System.String,System.Collections.Generic.KeyValuePair{Waher.Script.Units.AtomicUnit,System.Int32}[]@)">
            <summary>
            Tries to get the factors of a compound unit.
            </summary>
            <param name="Name">Name of compoud unit.</param>
            <param name="Factors">Factors in unit.</param>
            <returns>If a compound unit with the given name was found.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.ContainsDerivedOrBaseUnit(System.String)">
            <summary>
            If there's a derived unit with a given name.
            </summary>
            <param name="Name">Name of derived unit.</param>
            <returns>If such a derived unit is recognized.</returns>
        </member>
        <member name="M:Waher.Script.Units.Unit.TryConvert(System.Double,Waher.Script.Units.Unit,Waher.Script.Units.Unit,System.Double@)">
            <summary>
            Tries to convert a magnitude in one unit to a magnitude in another.
            </summary>
            <param name="From">Original magnitude.</param>
            <param name="FromUnit">Original unit.</param>
            <param name="ToUnit">Desired unit.</param>
            <param name="To">Converted magnitude.</param>
            <returns>If conversion was successful.</returns>
        </member>
        <member name="T:Waher.Script.Variable">
            <summary>
            Contains information about a variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Variable.#ctor(System.String,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Contains information about a variable.
            </summary>
            <param name="Name">Name of variable.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Waher.Script.Variable.#ctor(System.String,System.Double)">
            <summary>
            Contains information about a variable.
            </summary>
            <param name="Name">Name of variable.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Waher.Script.Variable.#ctor(System.String,System.String)">
            <summary>
            Contains information about a variable.
            </summary>
            <param name="Name">Name of variable.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Waher.Script.Variable.#ctor(System.String,System.Boolean)">
            <summary>
            Contains information about a variable.
            </summary>
            <param name="Name">Name of variable.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Waher.Script.Variable.#ctor(System.String,System.Object)">
            <summary>
            Contains information about a variable.
            </summary>
            <param name="Name">Name of variable.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Waher.Script.Variable.SetValue(System.Object)">
            <summary>
            Sets the value of the variable.
            </summary>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="P:Waher.Script.Variable.Name">
            <summary>
            Name of variable.
            </summary>
        </member>
        <member name="P:Waher.Script.Variable.ValueElement">
            <summary>
            Value element of variable.
            </summary>
        </member>
        <member name="P:Waher.Script.Variable.ValueObject">
            <summary>
            Object Value of variable.
            </summary>
        </member>
        <member name="M:Waher.Script.Variable.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Script.Variables">
            <summary>
            Collection of variables.
            </summary>
        </member>
        <member name="F:Waher.Script.Variables.variables">
            <summary>
            Internal set of variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.#ctor(Waher.Script.Variable[])">
            <summary>
            Collection of variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.TryGetVariable(System.String,Waher.Script.Variable@)">
            <summary>
            Tries to get a variable object, given its name.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Variable">Variable, if found, or null otherwise.</param>
            <returns>If a variable with the corresponding name was found.</returns>
        </member>
        <member name="M:Waher.Script.Variables.ContainsVariable(System.String)">
            <summary>
            If the collection contains a variable with a given name.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>If a variable with that name exists.</returns>
        </member>
        <member name="P:Waher.Script.Variables.Item(System.String)">
            <summary>
            Access to variable values through the use of their names.
            </summary>
            <param name="Name">Variable name.</param>
            <returns>Associated variable object value.</returns>
        </member>
        <member name="M:Waher.Script.Variables.Add(System.String,System.Object)">
            <summary>
            Adds a variable to the collection.
            </summary>
            <param name="Name">Variable name.</param>
            <param name="Value">Associated variable object value.</param>
        </member>
        <member name="M:Waher.Script.Variables.Remove(System.String)">
            <summary>
            Removes a varaiable from the collection.
            </summary>
            <param name="VariableName">Name of variable.</param>
            <returns>If the variable was found and removed.</returns>
        </member>
        <member name="M:Waher.Script.Variables.Clear">
            <summary>
            Removes all variables from the collection.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.Push">
            <summary>
            Pushes the current set of variables to the stack. This state is restored by calling <see cref="M:Waher.Script.Variables.Pop"/>.
            Each call to this method must be followed by exactly one call to <see cref="M:Waher.Script.Variables.Pop"/>.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.Pop">
            <summary>
            Pops a previously stored set of variables from the stack. Variables are stored on the stack by calling <see cref="M:Waher.Script.Variables.Push"/>.
            </summary>
        </member>
        <member name="P:Waher.Script.Variables.ConsoleOut">
            <summary>
            Console out interface. Can be used by functions and script to output data to the console.
            </summary>
        </member>
        <member name="P:Waher.Script.Variables.ContextVariables">
            <summary>
            Variables available during the current context.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.Lock">
            <summary>
            Locks the collection. The collection is by default thread safe. But if longer transactions require unique access,
            this method can be used to aquire such unique access. This works, as long as all callers that affect the corresponding
            state call this method also.
            
            Each successful call to this method must be followed by exacty one call to <see cref="M:Waher.Script.Variables.Release"/>.
            </summary>
            <exception cref="T:System.TimeoutException">If access to the collection was not granted in the alotted time</exception>
        </member>
        <member name="M:Waher.Script.Variables.LockAsync">
            <summary>
            Locks the collection. The collection is by default thread safe. But if longer transactions require unique access,
            this method can be used to aquire such unique access. This works, as long as all callers that affect the corresponding
            state call this method also.
            
            Each successful call to this method must be followed by exacty one call to <see cref="M:Waher.Script.Variables.Release"/>.
            </summary>
            <exception cref="T:System.TimeoutException">If access to the collection was not granted in the alotted time</exception>
        </member>
        <member name="M:Waher.Script.Variables.Lock(System.Int32)">
            <summary>
            Locks the collection. The collection is by default thread safe. But if longer transactions require unique access,
            this method can be used to aquire such unique access. This works, as long as all callers that affect the corresponding
            state call this method also.
            
            Each successful call to this method must be followed by exacty one call to <see cref="M:Waher.Script.Variables.Release"/>.
            </summary>
            <param name="Timeout">Timeout, in milliseconds. Default timeout is 30000 milliseconds (30 s).</param>
            <exception cref="T:System.TimeoutException">If access to the collection was not granted in the alotted time</exception>
        </member>
        <member name="M:Waher.Script.Variables.LockAsync(System.Int32)">
            <summary>
            Locks the collection. The collection is by default thread safe. But if longer transactions require unique access,
            this method can be used to aquire such unique access. This works, as long as all callers that affect the corresponding
            state call this method also.
            
            Each successful call to this method must be followed by exacty one call to <see cref="M:Waher.Script.Variables.Release"/>.
            </summary>
            <param name="Timeout">Timeout, in milliseconds. Default timeout is 30000 milliseconds (30 s).</param>
            <exception cref="T:System.TimeoutException">If access to the collection was not granted in the alotted time</exception>
        </member>
        <member name="M:Waher.Script.Variables.Release">
            <summary>
            Releases the collection, previously locked through a call to <see cref="M:Waher.Script.Variables.Lock"/>.
            </summary>
        </member>
        <member name="P:Waher.Script.Variables.AvailableVariables">
            <summary>
            Returns an array of available variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Script.Variables.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Waher.Script.Variables.CopyTo(Waher.Script.Variables)">
            <summary>
            Copies available variables to another variable collection.
            </summary>
            <param name="Variables">Variable collection to copy variables to.</param>
        </member>
        <member name="M:Waher.Script.Variables.Abort">
            <summary>
            Aborts the execution of script using this collection of variables.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.CancelAbort">
            <summary>
            Allows new script to be evaluated using this collection of variables.
            </summary>
        </member>
        <member name="E:Waher.Script.Variables.OnPreview">
            <summary>
            Event raised when there is a new value to preview.
            </summary>
        </member>
        <member name="P:Waher.Script.Variables.HandlesPreview">
            <summary>
            If previews are desired.
            </summary>
        </member>
        <member name="M:Waher.Script.Variables.Preview(Waher.Script.Expression,Waher.Script.Abstraction.Elements.IElement)">
            <summary>
            Reports a preview of the final result.
            </summary>
            <param name="Expression">Expression being executed.</param>
            <param name="Result">Preview</param>
        </member>
        <member name="M:Waher.Script.Variables.Status(Waher.Script.Expression,System.String)">
            <summary>
            Reports current status of execution.
            </summary>
            <param name="Expression">Expression.</param>
            <param name="Result">Status Message</param>
        </member>
        <member name="P:Waher.Script.Variables.HandlesStatus">
            <summary>
            If status messages are desired.
            </summary>
        </member>
        <member name="E:Waher.Script.Variables.OnStatus">
            <summary>
            Event raised when a status message has been reported.
            </summary>
        </member>
    </members>
</doc>
