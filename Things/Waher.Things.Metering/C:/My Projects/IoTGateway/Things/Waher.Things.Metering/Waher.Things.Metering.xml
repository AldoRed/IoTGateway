<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Things.Metering</name>
    </assembly>
    <members>
        <member name="T:Waher.Things.Metering.Commands.ClearMessages">
            <summary>
            Clears all messages for a node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.#ctor(Waher.Things.Metering.MeteringNode)">
            <summary>
            Clears all messages for a node.
            </summary>
            <param name="Node">Metering node.</param>
        </member>
        <member name="P:Waher.Things.Metering.Commands.ClearMessages.CommandID">
            <summary>
            ID of command.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.ClearMessages.Type">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.ClearMessages.SortCategory">
            <summary>
            Sort Category, if available.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.ClearMessages.SortKey">
            <summary>
            Sort Key, if available.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.CanExecuteAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the command can be executed by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the command can be executed by the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.Copy">
            <summary>
            Creates a copy of the command object.
            </summary>
            <returns>Copy of command object.</returns>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.ExecuteCommandAsync">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.GetNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the name of data source.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.GetSuccessStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a success string, if any, of the command. If no specific success string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.GetConfirmationStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a confirmation string, if any, of the command. If no confirmation is necessary, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.GetFailureStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a failure string, if any, of the command. If no specific failure string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.ClearMessages.StartQueryExecutionAsync(Waher.Things.Queries.Query,Waher.Runtime.Language.Language)">
            <summary>
            Starts the execution of a query.
            </summary>
            <param name="Query">Query data receptor.</param>
            <param name="Language">Language to use.</param>
        </member>
        <member name="T:Waher.Things.Metering.Commands.LogMessage">
            <summary>
            Logs a message on a node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.#ctor(Waher.Things.Metering.MeteringNode)">
            <summary>
            Logs a message on a node.
            </summary>
            <param name="Node">Metering node.</param>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.MessageType">
            <summary>
            Type of message.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.MessageBody">
            <summary>
            Message body
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.CommandID">
            <summary>
            ID of command.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.Type">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.SortCategory">
            <summary>
            Sort Category, if available.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.Commands.LogMessage.SortKey">
            <summary>
            Sort Key, if available.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.CanExecuteAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the command can be executed by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the command can be executed by the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.Copy">
            <summary>
            Creates a copy of the command object.
            </summary>
            <returns>Copy of command object.</returns>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.ExecuteCommandAsync">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.GetNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the name of data source.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.GetSuccessStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a success string, if any, of the command. If no specific success string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.GetConfirmationStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a confirmation string, if any, of the command. If no confirmation is necessary, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.GetFailureStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a failure string, if any, of the command. If no specific failure string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.Metering.Commands.LogMessage.StartQueryExecutionAsync(Waher.Things.Queries.Query,Waher.Runtime.Language.Language)">
            <summary>
            Starts the execution of a query.
            </summary>
            <param name="Query">Query data receptor.</param>
            <param name="Language">Language to use.</param>
        </member>
        <member name="T:Waher.Things.Metering.GetQrCodeUrlEventArgs">
            <summary>
            Event arguments for events that request an URL to a QR code.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.GetQrCodeUrlEventArgs.#ctor(System.String)">
            <summary>
            Event arguments for events that request an URL to a QR code.
            </summary>
            <param name="Text">Text to encode.</param>
        </member>
        <member name="P:Waher.Things.Metering.GetQrCodeUrlEventArgs.Text">
            <summary>
            Text to encode.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.GetQrCodeUrlEventArgs.Url">
            <summary>
            QR Code URL.
            </summary>
        </member>
        <member name="T:Waher.Things.Metering.MetaMeteringNode">
            <summary>
            Base class for metering nodes with interoperable meta-information.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MetaMeteringNode.#ctor">
            <summary>
            Base class for metering nodes with interoperable meta-information.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Name">
            <summary>
            If the node is provisioned is not. Property is editable.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Class">
            <summary>
            A class name or the node.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.SerialNumber">
            <summary>
            Serial number
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.MeterNumber">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.MeterLocation">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.ManufacturerDomain">
            <summary>
            Manufacturer (domain)
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.ProductUrl">
            <summary>
            Product URL
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Street">
            <summary>
            Street
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.StreetNr">
            <summary>
            Street number
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.StreetAndNr">
            <summary>
            Combination of both <see cref="P:Waher.Things.Metering.MetaMeteringNode.Street"/> and <see cref="P:Waher.Things.Metering.MetaMeteringNode.StreetNr"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Building">
            <summary>
            Building
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Apartment">
            <summary>
            Apartment
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Room">
            <summary>
            Room
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MetaMeteringNode.Altitude">
            <summary>
            Altitude
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MetaMeteringNode.GetDisplayableParametersAsync(Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Gets displayable parameters.
            </summary>
            <param name="Language">Language to use.</param>
            <param name="Caller">Information about caller.</param>
            <returns>Set of displayable parameters.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MetaMeteringNode.GetMetaData">
            <summary>
            Gets meta-data about the node.
            </summary>
            <returns>Meta data.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MetaMeteringNode.AddIdentityReadout(System.Collections.Generic.List{Waher.Things.SensorData.Field},System.DateTime)">
            <summary>
            Adds defined identity fields to a sensor data readout.
            </summary>
            <param name="Fields">List of fields being constructed.</param>
            <param name="Now">Timestamp of readout.</param>
        </member>
        <member name="T:Waher.Things.Metering.MeteringMessage">
            <summary>
            Defines a message logged on a metering node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringMessage.#ctor">
            <summary>
            Defines a message logged on a metering node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringMessage.#ctor(System.Guid,System.DateTime,Waher.Things.DisplayableParameters.MessageType,System.String,System.String)">
            <summary>
            Defines a message logged on a metering node.
            </summary>
            <param name="NodeId">Object ID of metering node on which message has been logged.</param>
            <param name="Timestamp">Message Timestamp.</param>
            <param name="Type">Type of message.</param>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.ObjectId">
            <summary>
            Object ID in persistence layer.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.NodeId">
            <summary>
            Object ID of metering node on which message has been logged.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.Created">
            <summary>
            When node was created.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.Updated">
            <summary>
            When node was last updated. If it has not been updated, value will be <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.Count">
            <summary>
            Number of times the message has been reported (updated).
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.Type">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.EventId">
            <summary>
            Optional Event ID.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringMessage.Body">
            <summary>
            Message body.
            </summary>
        </member>
        <member name="T:Waher.Things.Metering.MeteringNode">
            <summary>
            Base class for all metering nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.#ctor">
            <summary>
            Base class for all metering nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.op_Implicit(Waher.Things.Metering.MeteringNode)~Waher.Things.ThingReference">
            <summary>
            Converts a MeteringNode to a ThingReference object.
            </summary>
            <param name="Node">Metering node.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.ObjectId">
            <summary>
            Object ID in persistence layer.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.ParentId">
            <summary>
            Object ID of parent node in persistence layer.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Created">
            <summary>
            When node was created.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Updated">
            <summary>
            When node was last updated. If it has not been updated, value will be <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.NodeId">
            <summary>
            ID of node.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.SourceId">
            <summary>
            Optional ID of source containing node.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Partition">
            <summary>
            Optional partition in which the Node ID is unique.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogErrorAsync(System.String)">
            <summary>
            Logs an error message on the node.
            </summary>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogErrorAsync(System.String,System.String)">
            <summary>
            Logs an error message on the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogWarningAsync(System.String)">
            <summary>
            Logs an warning message on the node.
            </summary>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogWarningAsync(System.String,System.String)">
            <summary>
            Logs an warning message on the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogInformationAsync(System.String)">
            <summary>
            Logs an informational message on the node.
            </summary>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogInformationAsync(System.String,System.String)">
            <summary>
            Logs an informational message on the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogMessageAsync(Waher.Things.DisplayableParameters.MessageType,System.String)">
            <summary>
            Logs a message on the node.
            </summary>
            <param name="Type">Type of message.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.LogMessageAsync(Waher.Things.DisplayableParameters.MessageType,System.String,System.String)">
            <summary>
            Logs a message on the node.
            </summary>
            <param name="Type">Type of message.</param>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveErrorAsync">
            <summary>
            Removes error messages with an empty event ID from the node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveErrorAsync(System.String)">
            <summary>
            Removes error messages with a given event ID from the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveWarningAsync">
            <summary>
            Removes warning messages with an empty event ID from the node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveWarningAsync(System.String)">
            <summary>
            Removes warning messages with a given event ID from the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveInformationAsync">
            <summary>
            Removes warning messages with an empty event ID from the node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveInformationAsync(System.String)">
            <summary>
            Removes an informational message on the node.
            </summary>
            <param name="EventId">Optional Event ID.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveMessageAsync(Waher.Things.DisplayableParameters.MessageType)">
            <summary>
            Removes messages with empty event IDs from the node.
            </summary>
            <param name="Type">Type of message.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveMessageAsync(Waher.Things.DisplayableParameters.MessageType,System.String)">
            <summary>
            Logs a message on the node.
            </summary>
            <param name="Type">Type of message.</param>
            <param name="EventId">Optional Event ID.</param>
        </member>
        <member name="E:Waher.Things.Metering.MeteringNode.OnUpdate">
            <summary>
            Event raised when node has been updated.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetUniqueNodeId(System.String)">
            <summary>
            Gets a Node ID, based on <paramref name="NodeId"/> that is not already available in the database.
            </summary>
            <param name="NodeId">Desired Node ID</param>
            <returns>A Node ID that does not exist in the database.</returns>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.LocalId">
            <summary>
            If provided, an ID for the node, but unique locally between siblings. Can be null, if Local ID equal to Node ID.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.LogId">
            <summary>
            If provided, an ID for the node, as it would appear or be used in system logs. Can be null, if Log ID equal to Node ID.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetTypeNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the type name of the node.
            </summary>
            <param name="Language">Language to use.</param>
            <returns>Localized type node.</returns>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.HasChildren">
            <summary>
            If the source has any child sources.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.ChildrenOrdered">
            <summary>
            If the children of the node have an intrinsic order (true), or if the order is not important (false).
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.IsReadable">
            <summary>
            If the node can be read.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.IsControllable">
            <summary>
            If the node can be controlled.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.HasCommands">
            <summary>
            If the node has registered commands or not.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Parent">
            <summary>
            Parent Node, or null if a root node.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.LastChanged">
            <summary>
            When the node was last updated.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.State">
            <summary>
            Current overall state of the node.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.ChildNodes">
            <summary>
            Child nodes. If no child nodes are available, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.SortChildrenAfterLoadLocked(System.Collections.Generic.List{Waher.Things.Metering.MeteringNode})">
            <summary>
            Method that allows the node to sort its children, after they have been loaded.
            </summary>
            <param name="Children">Loaded children.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.CanViewAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node is visible to the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node is visible to the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.CanEditAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be edited by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be edited by the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.CanAddAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be added to by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be added to by the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.CanDestroyAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be destroyed to by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be destroyed to by the caller.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetDisplayableParametersAsync(Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Gets displayable parameters.
            </summary>
            <param name="Language">Language to use.</param>
            <param name="Caller">Information about caller.</param>
            <returns>Set of displayable parameters.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetDisplayableParameterAraryAsync(Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Gets displayable parameters.
            </summary>
            <param name="Language">Language to use.</param>
            <param name="Caller">Information about caller.</param>
            <returns>Set of displayable parameters.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetMessagesAsync(Waher.Things.RequestOrigin)">
            <summary>
            Gets messages logged on the node.
            </summary>
            <returns>Set of messages.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetMessageArrayAsync(Waher.Things.RequestOrigin)">
            <summary>
            Gets messages logged on the node.
            </summary>
            <returns>Array of messages.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.MoveUpAsync(Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the node up.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node was moved up.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.MoveDownAsync(Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the node down.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node was moved down.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.MoveUpAsync(Waher.Things.Metering.MeteringNode,Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the child node up.
            </summary>
            <param name="Child">Child node to move.</param>
            <param name="Caller">Information about caller.</param>
            <returns>If the child node was moved up.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.MoveDownAsync(Waher.Things.Metering.MeteringNode,Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the child node down.
            </summary>
            <param name="Child">Child node to move.</param>
            <param name="Caller">Information about caller.</param>
            <returns>If the child node was moved down.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.AcceptsParentAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive parent, i.e. can be added to that parent (if that parent accepts the node as a child).
            </summary>
            <param name="Parent">Presumptive parent node.</param>
            <returns>If the parent is acceptable.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.AcceptsChildAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive child, i.e. can receive as a child (if that child accepts the node as a parent).
            </summary>
            <param name="Child">Presumptive child node.</param>
            <returns>If the child is acceptable.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.AddAsync(Waher.Things.INode)">
            <summary>
            Adds a new child to the node.
            </summary>
            <param name="Child">New child to add.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.NodeUpdated">
            <summary>
            Persists changes to the node, and generates a node updated event.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.UpdateAsync">
            <summary>
            Updates the node (in persisted storage).
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.RemoveAsync(Waher.Things.INode)">
            <summary>
            Removes a child from the node.
            </summary>
            <param name="Child">Child to remove.</param>
            <returns>If the Child node was found and removed.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.DestroyAsync">
            <summary>
            Destroys the node. If it is a child to a parent node, it is removed from the parent first.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Commands">
            <summary>
            Available command objects. If no commands are available, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.Join(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Waher.Things.ICommand}},Waher.Things.ICommand[])">
            <summary>
            Joins sets of commands.
            </summary>
            <param name="Commands">First set of commands.</param>
            <param name="Commands2">Second set of commands.</param>
            <returns>Joined set of commands.</returns>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.IsProvisioned">
            <summary>
            If node can be provisioned.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.Owner">
            <summary>
            Who the owner of the node is. The empty string means the node has no owner.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringNode.IsPublic">
            <summary>
            If the node is public.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.GetMetaData">
            <summary>
            Gets meta-data about the node.
            </summary>
            <returns>Meta data.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.Claimed(System.String,System.Boolean)">
            <summary>
            Called when node has been claimed by an owner.
            </summary>
            <param name="Owner">Owner</param>
            <param name="IsPublic">If node is public.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.Disowned">
            <summary>
            Called when node has been disowned by its owner.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.Removed">
            <summary>
            Called when node has been removed from the registry.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.NewMomentaryValues(Waher.Things.SensorData.Field[])">
            <summary>
            Reports newly measured values.
            </summary>
            <param name="Values">New momentary values.</param>
        </member>
        <member name="M:Waher.Things.Metering.MeteringNode.NewMomentaryValues(System.Collections.Generic.IEnumerable{Waher.Things.SensorData.Field})">
            <summary>
            Reports newly measured values.
            </summary>
            <param name="Values">New momentary values.</param>
        </member>
        <member name="T:Waher.Things.Metering.NewMomentaryValuesHandler">
            <summary>
            Delegate for new momentary values event handlers.
            </summary>
            <param name="Reference">Thing reporting new momentary values.</param>
            <param name="Values">New momentary values.</param>
        </member>
        <member name="T:Waher.Things.Metering.MeteringTopology">
            <summary>
            Defines the Metering Topology data source. This data source contains a tree structure of persistent 
            readable and controllable devices
            </summary>
        </member>
        <member name="F:Waher.Things.Metering.MeteringTopology.SourceID">
            <summary>
            Source ID for the metering topology data source.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.#ctor">
            <summary>
            Defines the Metering Topology data source. This data source contains a tree structure of persistent 
            readable and controllable devices
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.Waher#Things#IDataSource#SourceID">
            <summary>
            ID of data source.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.ChildSources">
            <summary>
            Child sources. If no child sources are available, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.HasChildren">
            <summary>
            If the source has any child sources.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.LastChanged">
            <summary>
            When the source was last updated.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.GetNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the name of data source.
            </summary>
            <param name="Language">Language to use.</param>
            <returns>Localized name of data source.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.GetNodeAsync(Waher.Things.IThingReference)">
            <summary>
            Gets the node, given a reference to it.
            </summary>
            <param name="NodeRef">Node reference.</param>
            <returns>Node, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.GetNode(System.String)">
            <summary>
            Gets a node from the Metering Topology
            </summary>
            <param name="NodeId">Node ID</param>
            <returns>Node, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.GetNode(Waher.Things.IThingReference)">
            <summary>
            Gets a node from the Metering Topology
            </summary>
            <param name="NodeRef">Node reference</param>
            <returns>Node, if found, null otherwise.</returns>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.CanViewAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the data source is visible to the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the source is visible to the caller.</returns>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.RootNodes">
            <summary>
            Root node references. If no root nodes are available, null is returned.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.MeteringTopology.Root">
            <summary>
            Root node.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.DeleteOldEvents(System.TimeSpan)">
            <summary>
            Deletes old data source events.
            </summary>
            <param name="MaxAge">Maximum age of events to keep.</param>
            <returns>Number of events deleted.</returns>
        </member>
        <member name="E:Waher.Things.Metering.MeteringTopology.OnEvent">
            <summary>
            Event raised when a data source event has been raised.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.MeteringTopology.NewMomentaryValues(Waher.Things.IThingReference,System.Collections.Generic.IEnumerable{Waher.Things.SensorData.Field})">
            <summary>
            Reports newly measured values.
            </summary>
            <param name="Reference">Optional node reference</param>
            <param name="Values">New momentary values.</param>
        </member>
        <member name="E:Waher.Things.Metering.MeteringTopology.OnNewMomentaryValues">
            <summary>
            Event raised when a node in the metering topology reports a new momentary value.
            </summary>
        </member>
        <member name="T:Waher.Things.Metering.NodeTypes.Root">
            <summary>
            Class for the root node of the Metering topology.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.NodeTypes.Root.#ctor">
            <summary>
            Class for the root node of the Metering topology.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.NodeTypes.Root.GetTypeNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the type name of the node.
            </summary>
            <param name="Language">Language to use.</param>
            <returns>Localized type node.</returns>
        </member>
        <member name="M:Waher.Things.Metering.NodeTypes.Root.AcceptsChildAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive child, i.e. can receive as a child (if that child accepts the node as a parent).
            </summary>
            <param name="Child">Presumptive child node.</param>
            <returns>If the child is acceptable.</returns>
        </member>
        <member name="M:Waher.Things.Metering.NodeTypes.Root.AcceptsParentAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive parent, i.e. can be added to that parent (if that parent accepts the node as a child).
            </summary>
            <param name="Parent">Presumptive parent node.</param>
            <returns>If the parent is acceptable.</returns>
        </member>
        <member name="T:Waher.Things.Metering.ProvisionedMeteringNode">
            <summary>
            Base class for all provisioned metering nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.#ctor">
            <summary>
            Base class for all provisioned metering nodes.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.Provisioned">
            <summary>
            If the node is provisioned is not. Property is editable.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.OwnerAddress">
            <summary>
            If the node is provisioned is not. Property is editable.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.Public">
            <summary>
            If the node is public in the regitry or not.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.IsProvisioned">
            <summary>
            If node can be provisioned.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.Owner">
            <summary>
            Who the owner of the node is. The empty string means the node has no owner.
            </summary>
        </member>
        <member name="P:Waher.Things.Metering.ProvisionedMeteringNode.IsPublic">
            <summary>
            If the node is public.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.GetDisplayableParametersAsync(Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Gets displayable parameters.
            </summary>
            <param name="Language">Language to use.</param>
            <param name="Caller">Information about caller.</param>
            <returns>Set of displayable parameters.</returns>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.Claimed(System.String,System.Boolean)">
            <summary>
            Called when node has been claimed by an owner.
            </summary>
            <param name="Owner">Owner</param>
            <param name="IsPublic">If node is public.</param>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.Disowned">
            <summary>
            Called when node has been disowned by its owner.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.Removed">
            <summary>
            Called when node has been removed from the registry.
            </summary>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.GetDiscoUri">
            <summary>
            Gets a discovery URI for the thing.
            </summary>
            <returns>Discovery URI</returns>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.GetDiscoUri(System.Boolean)">
            <summary>
            Gets a discovery URI for the thing.
            </summary>
            <param name="OnlyClaim">If empty string should be returned, if thing has been claimed.</param>
            <returns>Discovery URI</returns>
        </member>
        <member name="M:Waher.Things.Metering.ProvisionedMeteringNode.AnnotatePropertyForm(Waher.Networking.XMPP.DataForms.FormState)">
            <summary>
            Annotates the property form.
            </summary>
            <param name="Form">Form being built.</param>
        </member>
        <member name="E:Waher.Things.Metering.ProvisionedMeteringNode.QrCodeUrlRequested">
            <summary>
            Event raised when a QR code URL is requested.
            </summary>
        </member>
    </members>
</doc>
