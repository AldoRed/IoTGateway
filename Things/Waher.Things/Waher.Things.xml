<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Waher.Things</name>
    </assembly>
    <members>
        <member name="T:Waher.Things.Attributes.AlphaChannelAttribute">
            <summary>
            Includes the alpha channel of a color property.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.AlphaChannelAttribute.#ctor">
            <summary>
            Includes the alpha channel of a color property.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.DateOnlyAttribute">
            <summary>
            Only edits the date of the underlying DateTime property.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.DateOnlyAttribute.#ctor">
            <summary>
            Only edits the date of the underlying DateTime property.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.DefaultLanguageAttribute">
            <summary>
            Defines the default language for the class.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.DefaultLanguageAttribute.#ctor(System.String)">
            <summary>
            Defines the default language for the class.
            </summary>
            <param name="LanguageCode">Default language code.</param>
        </member>
        <member name="P:Waher.Things.Attributes.DefaultLanguageAttribute.LanguageCode">
            <summary>
            Default language code.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.DynamicOptionsAttribute">
            <summary>
            Defines an option to display when editing the parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.DynamicOptionsAttribute.#ctor(System.String)">
            <summary>
            Defines a method for retrieving a dynamic set of options to display when editing the parameter.
            </summary>
            <param name="MethodName">Name of method on object that can be used to retrieve a dynamic set of options.</param>
        </member>
        <member name="P:Waher.Things.Attributes.DynamicOptionsAttribute.MethodName">
            <summary>
            Name of method on object that can be used to retrieve a dynamic set of options.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.HeaderAttribute">
            <summary>
            Defines a localizable header string for the property.
            </summary>
        </member>
        <member name="F:Waher.Things.Attributes.HeaderAttribute.DefaultPriority">
            <summary>
            Default priority of parameters (100).
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.HeaderAttribute.#ctor(System.String)">
            <summary>
            Defines a header string for the property.
            </summary>
            <param name="Header">Header string.</param>
        </member>
        <member name="M:Waher.Things.Attributes.HeaderAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Defines a localizable header string for the property.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Header">Default header string, in the default language defined for the class.</param>
        </member>
        <member name="M:Waher.Things.Attributes.HeaderAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Defines a header string for the property.
            </summary>
            <param name="Header">Header string.</param>
            <param name="Priority">Priority of parameter (default=100).</param>
        </member>
        <member name="M:Waher.Things.Attributes.HeaderAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Defines a localizable header string for the property.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Header">Default header string, in the default language defined for the class.</param>
            <param name="Priority">Priority of parameter (default=100).</param>
        </member>
        <member name="P:Waher.Things.Attributes.HeaderAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.HeaderAttribute.Header">
            <summary>
            Default header string, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.HeaderAttribute.Priority">
            <summary>
            Priority of parameter (default=100).
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.MaskedAttribute">
            <summary>
            Defines a masked parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.MaskedAttribute.#ctor">
            <summary>
            Defines a masked parameter.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.OpenAttribute">
            <summary>
            Defines an open parameter. Open parameters accept values outside of listed options, as long as values conform to the
            underlying data type.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.OpenAttribute.#ctor">
            <summary>
            Defines an open parameter. Open parameters accept values outside of listed options, as long as values conform to the
            underlying data type.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.OptionAttribute">
            <summary>
            Defines an option to display when editing the parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.OptionAttribute.#ctor(System.Object)">
            <summary>
            Defines an option to display when editing the parameter.
            </summary>
            <param name="Option">Option.</param>
        </member>
        <member name="M:Waher.Things.Attributes.OptionAttribute.#ctor(System.Object,System.String)">
            <summary>
            Defines an option to display when editing the parameter.
            </summary>
            <param name="Option">Option.</param>
            <param name="Label">Label string</param>
        </member>
        <member name="M:Waher.Things.Attributes.OptionAttribute.#ctor(System.Object,System.Int32,System.String)">
            <summary>
            Defines an option to display when editing the parameter.
            </summary>
            <param name="Option">Option.</param>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Label">Default label string, in the default language defined for the class.</param>
        </member>
        <member name="P:Waher.Things.Attributes.OptionAttribute.Option">
            <summary>
            Option.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.OptionAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.OptionAttribute.Label">
            <summary>
            Default label string, in the default language defined for the class.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.PageAttribute">
            <summary>
            Places the parameter on a localizable page.
            </summary>
        </member>
        <member name="F:Waher.Things.Attributes.PageAttribute.DefaultPriority">
            <summary>
            Default priority of pages (100).
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.PageAttribute.#ctor(System.String)">
            <summary>
            Places the parameter on a page.
            </summary>
            <param name="Label">Label string</param>
        </member>
        <member name="M:Waher.Things.Attributes.PageAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Places the parameter on a localizable page.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Label">Default label string, in the default language defined for the class.</param>
        </member>
        <member name="M:Waher.Things.Attributes.PageAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Places the parameter on a page.
            </summary>
            <param name="Label">Label string</param>
            <param name="Priority">Priority of page (default=100).</param>
        </member>
        <member name="M:Waher.Things.Attributes.PageAttribute.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Places the parameter on a localizable page.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Label">Default label string, in the default language defined for the class.</param>
            <param name="Priority">Priority of page (default=100).</param>
        </member>
        <member name="P:Waher.Things.Attributes.PageAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.PageAttribute.Label">
            <summary>
            Default label string, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.PageAttribute.Priority">
            <summary>
            Priority of page (default=100).
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.RangeAttribute">
            <summary>
            Defines a valid input range for the property.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.RangeAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Defines a valid input range for the property.
            </summary>
            <param name="Min">Smallest accepted value. Can be null, if no minimum exists.</param>
            <param name="Max">Largest accepted value. Can be null, if no maximum exists.</param>
        </member>
        <member name="P:Waher.Things.Attributes.RangeAttribute.Min">
            <summary>
            Smallest accepted value. Can be null, if no minimum exists.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.RangeAttribute.Max">
            <summary>
            Largest accepted value. Can be null, if no maximum exists.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.ReadOnlyAttribute">
            <summary>
            Defines a read-only parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.ReadOnlyAttribute.#ctor">
            <summary>
            Defines a read-only parameter.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.RegularExpressionAttribute">
            <summary>
            Validates input against a regular expression.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.RegularExpressionAttribute.#ctor(System.String)">
            <summary>
            Validates input against a regular expression.
            </summary>
            <param name="Pattern">Regular expression to validate against.</param>
        </member>
        <member name="P:Waher.Things.Attributes.RegularExpressionAttribute.Pattern">
            <summary>
            Regular expression to validate against.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.RequiredAttribute">
            <summary>
            Defines a required parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.RequiredAttribute.#ctor">
            <summary>
            Defines a required parameter.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.SectionAttribute">
            <summary>
            Places the parameter in a localizable section.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.SectionAttribute.#ctor(System.String)">
            <summary>
            Places the parameter in a section.
            </summary>
            <param name="Label">Label string</param>
        </member>
        <member name="M:Waher.Things.Attributes.SectionAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Places the parameter in a localizable section.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Label">Default label string, in the default language defined for the class.</param>
        </member>
        <member name="P:Waher.Things.Attributes.SectionAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.SectionAttribute.Label">
            <summary>
            Default label string, in the default language defined for the class.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.TextPosition">
            <summary>
            Where the instructions are to be place.
            </summary>
        </member>
        <member name="F:Waher.Things.Attributes.TextPosition.BeforeField">
            <summary>
            Before the field.
            </summary>
        </member>
        <member name="F:Waher.Things.Attributes.TextPosition.AfterField">
            <summary>
            After the field.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.TextAttribute">
            <summary>
            Shows a text segment associated with the parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.TextAttribute.#ctor(Waher.Things.Attributes.TextPosition,System.String)">
            <summary>
            Shows a text segment associated with the parameter.
            </summary>
            <param name="Position">Position of text in relation to the field.</param>
            <param name="Label">Label string</param>
        </member>
        <member name="M:Waher.Things.Attributes.TextAttribute.#ctor(Waher.Things.Attributes.TextPosition,System.Int32,System.String)">
            <summary>
            Shows a text segment associated with the parameter.
            </summary>
            <param name="Position">Position of text in relation to the field.</param>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="Label">Default label string, in the default language defined for the class.</param>
        </member>
        <member name="P:Waher.Things.Attributes.TextAttribute.Position">
            <summary>
            Where the text is to be placed in relation to the field.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.TextAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.TextAttribute.Label">
            <summary>
            Default label string, in the default language defined for the class.
            </summary>
        </member>
        <member name="T:Waher.Things.Attributes.ToolTipAttribute">
            <summary>
            Defines a localizable tooltip string for the property.
            </summary>
        </member>
        <member name="M:Waher.Things.Attributes.ToolTipAttribute.#ctor(System.String)">
            <summary>
            Defines a tooltip string for the property.
            </summary>
            <param name="ToolTip">Tooltip string.</param>
        </member>
        <member name="M:Waher.Things.Attributes.ToolTipAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Defines a localizable tooltip string for the property.
            </summary>
            <param name="StringId">String ID in the namespace of the current class, in the default language defined for the class.</param>
            <param name="ToolTip">Default tooltip string, in the default language defined for the class.</param>
        </member>
        <member name="P:Waher.Things.Attributes.ToolTipAttribute.StringId">
            <summary>
            String ID in the namespace of the current class, in the default language defined for the class.
            </summary>
        </member>
        <member name="P:Waher.Things.Attributes.ToolTipAttribute.ToolTip">
            <summary>
            Default tooltip string, in the default language defined for the class.
            </summary>
        </member>
        <member name="T:Waher.Things.ControlParameters.BooleanSetHandler">
            <summary>
            Set handler delegate for boolean control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.BooleanGetHandler">
            <summary>
            Get handler delegate for boolean control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.BooleanControlParameter">
            <summary>
            Boolean control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.BooleanGetHandler,Waher.Things.ControlParameters.BooleanSetHandler)">
            <summary>
            Boolean control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.Set(Waher.Things.IThingReference,System.Boolean)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="P:Waher.Things.ControlParameters.BooleanControlParameter.FormFieldType">
            <summary>
            Data form field type.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.BooleanControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.ColorSetHandler">
            <summary>
            Set handler delegate for color control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.ColorGetHandler">
            <summary>
            Get handler delegate for color control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.ColorControlParameter">
            <summary>
            Color control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.ColorGetHandler,Waher.Things.ControlParameters.ColorSetHandler)">
            <summary>
            Color control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.Set(Waher.Things.IThingReference,Waher.Content.ColorReference)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ColorControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.ControlParameter">
            <summary>
            Abstract base class for control parameters.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Abstract base class for control parameters.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
        </member>
        <member name="P:Waher.Things.ControlParameters.ControlParameter.Name">
            <summary>
            Parameter Name
            </summary>
        </member>
        <member name="P:Waher.Things.ControlParameters.ControlParameter.Page">
            <summary>
            On which page in the control dialog the parameter should appear.
            </summary>
        </member>
        <member name="P:Waher.Things.ControlParameters.ControlParameter.Label">
            <summary>
            Label for parameter.
            </summary>
        </member>
        <member name="P:Waher.Things.ControlParameters.ControlParameter.Description">
            <summary>
            Description for parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.ExportToForm(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports the field to a data form.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="P:Waher.Things.ControlParameters.ControlParameter.FormFieldType">
            <summary>
            Data form field type.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.ControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateSetHandler">
            <summary>
            Set handler delegate for date control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateGetHandler">
            <summary>
            Get handler delegate for date control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateControlParameter">
            <summary>
            Date control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},Waher.Things.ControlParameters.DateGetHandler,Waher.Things.ControlParameters.DateSetHandler)">
            <summary>
            Date control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.Set(Waher.Things.IThingReference,System.DateTime)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateTimeSetHandler">
            <summary>
            Set handler delegate for date and time control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateTimeGetHandler">
            <summary>
            Get handler delegate for date and time control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.DateTimeControlParameter">
            <summary>
            DateTime control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},Waher.Things.ControlParameters.DateTimeGetHandler,Waher.Things.ControlParameters.DateTimeSetHandler)">
            <summary>
            DateTime control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.Set(Waher.Things.IThingReference,System.DateTime)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DateTimeControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DoubleSetHandler">
            <summary>
            Set handler delegate for double control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DoubleGetHandler">
            <summary>
            Get handler delegate for double control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.DoubleControlParameter">
            <summary>
            Double control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.DoubleGetHandler,Waher.Things.ControlParameters.DoubleSetHandler)">
            <summary>
            Double control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},Waher.Things.ControlParameters.DoubleGetHandler,Waher.Things.ControlParameters.DoubleSetHandler)">
            <summary>
            Double control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.Set(Waher.Things.IThingReference,System.Double)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DoubleControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DurationSetHandler">
            <summary>
            Set handler delegate for duration control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.DurationGetHandler">
            <summary>
            Get handler delegate for duration control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.DurationControlParameter">
            <summary>
            Duration control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.DurationGetHandler,Waher.Things.ControlParameters.DurationSetHandler)">
            <summary>
            Duration control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Content.Duration,Waher.Content.Duration,Waher.Things.ControlParameters.DurationGetHandler,Waher.Things.ControlParameters.DurationSetHandler)">
            <summary>
            Duration control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.Set(Waher.Things.IThingReference,Waher.Content.Duration)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.DurationControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.EnumSetHandler">
            <summary>
            Set handler delegate for enumeration control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.EnumGetHandler">
            <summary>
            Get handler delegate for enumeration control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.EnumControlParameter">
            <summary>
            Enumeration control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Type,Waher.Things.ControlParameters.EnumGetHandler,Waher.Things.ControlParameters.EnumSetHandler,System.String[])">
            <summary>
            String control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="EnumType">Enumeration type.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
            <param name="Labels">Labels for the enumeration values.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.Set(Waher.Things.IThingReference,System.Enum)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="P:Waher.Things.ControlParameters.EnumControlParameter.FormFieldType">
            <summary>
            Data form field type.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.EnumControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int32SetHandler">
            <summary>
            Set handler delegate for 32-bit integer control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int32GetHandler">
            <summary>
            Get handler delegate for 32-bit integer control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int32ControlParameter">
            <summary>
            Int32 control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.Int32GetHandler,Waher.Things.ControlParameters.Int32SetHandler)">
            <summary>
            Int32 control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Waher.Things.ControlParameters.Int32GetHandler,Waher.Things.ControlParameters.Int32SetHandler)">
            <summary>
            Int32 control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.Set(Waher.Things.IThingReference,System.Int32)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int32ControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int64SetHandler">
            <summary>
            Set handler delegate for 64-bit integer control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int64GetHandler">
            <summary>
            Get handler delegate for 64-bit integer control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.Int64ControlParameter">
            <summary>
            Int64 control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.Int64GetHandler,Waher.Things.ControlParameters.Int64SetHandler)">
            <summary>
            Int64 control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},Waher.Things.ControlParameters.Int64GetHandler,Waher.Things.ControlParameters.Int64SetHandler)">
            <summary>
            Int64 control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.Set(Waher.Things.IThingReference,System.Int64)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.Int64ControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.MultiLineTextControlParameter">
            <summary>
            Multi-line text control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            Multi-line text control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.#ctor(System.String,System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            Multi-line text control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="RegularExpression">Regular expression used to validate string.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.Set(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="P:Waher.Things.ControlParameters.MultiLineTextControlParameter.FormFieldType">
            <summary>
            Data form field type.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.MultiLineTextControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.StringSetHandler">
            <summary>
            Set handler delegate for string control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.StringGetHandler">
            <summary>
            Get handler delegate for string control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.StringControlParameter">
            <summary>
            String control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            String control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.#ctor(System.String,System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            String control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="RegularExpression">Regular expression used to validate string.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.#ctor(System.String,System.String,System.String,System.String,System.String[],Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            String control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Options">Options the user can choose from.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.#ctor(System.String,System.String,System.String,System.String,System.String[],System.String[],Waher.Things.ControlParameters.StringGetHandler,Waher.Things.ControlParameters.StringSetHandler)">
            <summary>
            String control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Options">Options the user can choose from.</param>
            <param name="Labels">Labels for the corresponding options.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.Set(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="P:Waher.Things.ControlParameters.StringControlParameter.FormFieldType">
            <summary>
            Data form field type.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.StringControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.TimeSetHandler">
            <summary>
            Set handler delegate for time control parameters.
            </summary>
            <param name="Node">Node whose parameter is being set.</param>
            <param name="Value">Value set.</param>
        </member>
        <member name="T:Waher.Things.ControlParameters.TimeGetHandler">
            <summary>
            Get handler delegate for time control parameters.
            </summary>
            <param name="Node">Node whose parameter is being retrieved.</param>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="T:Waher.Things.ControlParameters.TimeControlParameter">
            <summary>
            Time control parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.#ctor(System.String,System.String,System.String,System.String,Waher.Things.ControlParameters.TimeGetHandler,Waher.Things.ControlParameters.TimeSetHandler)">
            <summary>
            Time control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Waher.Things.ControlParameters.TimeGetHandler,Waher.Things.ControlParameters.TimeSetHandler)">
            <summary>
            Time control parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <param name="Page">On which page in the control dialog the parameter should appear.</param>
            <param name="Label">Label for parameter.</param>
            <param name="Description">Description for parameter.</param>
            <param name="Min">Smallest value allowed.</param>
            <param name="Max">Largest value allowed.</param>
            <param name="GetHandler">This callback method is called when the value of the parameter is needed.</param>
            <param name="SetHandler">This callback method is called when the value of the parameter is set.</param>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.Set(Waher.Things.IThingReference,System.TimeSpan)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="Value">Value to set.</param>
            <returns>If the parameter could be set (true), or if the value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.SetStringValue(Waher.Things.IThingReference,System.String)">
            <summary>
            Sets the value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <param name="StringValue">String representation of value to set.</param>
            <returns>If the parameter could be set (true), or if the value could not be parsed or its value was invalid (false).</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.Get(Waher.Things.IThingReference)">
            <summary>
            Gets the value of the control parameter.
            </summary>
            <returns>Current value, or null if not available.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.GetStringValue(Waher.Things.IThingReference)">
            <summary>
            Gets the string value of the control parameter.
            </summary>
            <param name="Node">Node reference, if available.</param>
            <returns>String representation of the value.</returns>
        </member>
        <member name="M:Waher.Things.ControlParameters.TimeControlParameter.ExportValidationRules(System.Xml.XmlWriter,Waher.Things.IThingReference)">
            <summary>
            Exports form validation rules for the parameter.
            </summary>
            <param name="Output">Output</param>
            <param name="Node">Node reference, if available.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.BooleanParameter">
            <summary>
            Boolean-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.BooleanParameter.#ctor">
            <summary>
            Boolean-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.BooleanParameter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Boolean-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.BooleanParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.BooleanParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.BooleanParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.ColorParameter">
            <summary>
            Color-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.ColorParameter.#ctor">
            <summary>
            Color-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.ColorParameter.#ctor(System.String,System.String,SkiaSharp.SKColor)">
            <summary>
            Color-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Color">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.ColorParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.ColorParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.ColorParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.DateTimeParameter">
            <summary>
            DateTime-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DateTimeParameter.#ctor">
            <summary>
            DateTime-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DateTimeParameter.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            DateTime-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DateTimeParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DateTimeParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DateTimeParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.DoubleParameter">
            <summary>
            Double-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DoubleParameter.#ctor">
            <summary>
            Double-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DoubleParameter.#ctor(System.String,System.String,System.Double)">
            <summary>
            Double-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DoubleParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DoubleParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DoubleParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.DurationParameter">
            <summary>
            Duration-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DurationParameter.#ctor">
            <summary>
            Duration-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DurationParameter.#ctor(System.String,System.String,Waher.Content.Duration)">
            <summary>
            Duration-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DurationParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.DurationParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.DurationParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.Int32Parameter">
            <summary>
            Int32-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int32Parameter.#ctor">
            <summary>
            Int32-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int32Parameter.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Int32-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Int32Parameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Int32Parameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int32Parameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.Int64Parameter">
            <summary>
            Int64-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int64Parameter.#ctor">
            <summary>
            Int64-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int64Parameter.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Int64-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Int64Parameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Int64Parameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Int64Parameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.MessageType">
            <summary>
            Type of message.
            </summary>
        </member>
        <member name="F:Waher.Things.DisplayableParameters.MessageType.Information">
            <summary>
            Information message.
            </summary>
        </member>
        <member name="F:Waher.Things.DisplayableParameters.MessageType.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Waher.Things.DisplayableParameters.MessageType.Error">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.Message">
            <summary>
            Contains information about a message logged on a node.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Message.#ctor">
            <summary>
            Contains information about a message logged on a node.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Message.#ctor(System.DateTime,Waher.Things.DisplayableParameters.MessageType,System.String,System.String)">
            <summary>
            Contains information about a message logged on a node.
            </summary>
            <param name="Timestamp">Message Timestamp.</param>
            <param name="Type">Type of message.</param>
            <param name="EventId">Optional Event ID.</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Message.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Message.Type">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Message.EventId">
            <summary>
            Optional Event ID.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Message.Body">
            <summary>
            Message body.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Message.Export(System.Text.StringBuilder)">
            <summary>
            Exports the message to XML.
            </summary>
            <param name="Xml">XML output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.Parameter">
            <summary>
            Base class for all node parameters.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Parameter.#ctor">
            <summary>
            Base class for all node parameters.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Parameter.#ctor(System.String,System.String)">
            <summary>
            Base class for all node parameters.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Parameter.Id">
            <summary>
            Parameter ID.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Parameter.Name">
            <summary>
            Parameter Name.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Parameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.Parameter.StringValue">
            <summary>
            String representation of parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.Parameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.StringParameter">
            <summary>
            String-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.StringParameter.#ctor">
            <summary>
            String-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.StringParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            String-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.StringParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.StringParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.StringParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.DisplayableParameters.TimeSpanParameter">
            <summary>
            TimeSpan-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.TimeSpanParameter.#ctor">
            <summary>
            TimeSpan-valued parameter.
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.TimeSpanParameter.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            TimeSpan-valued parameter.
            </summary>
            <param name="Id">Parameter ID.</param>
            <param name="Name">Parameter Name.</param>
            <param name="Value">Parameter Value</param>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.TimeSpanParameter.Value">
            <summary>
            Parameter Value.
            </summary>
        </member>
        <member name="P:Waher.Things.DisplayableParameters.TimeSpanParameter.UntypedValue">
            <summary>
            Untyped parameter value
            </summary>
        </member>
        <member name="M:Waher.Things.DisplayableParameters.TimeSpanParameter.Export(System.Text.StringBuilder)">
            <summary>
            Exports the parameters to XML.
            </summary>
            <param name="Xml">XML Output.</param>
        </member>
        <member name="T:Waher.Things.IActuator">
            <summary>
            Interface for actuator nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.IActuator.GetControlParameters">
            <summary>
            Get control parameters for the actuator.
            </summary>
            <returns>Collection of control parameters for actuator.</returns>
        </member>
        <member name="T:Waher.Things.CommandType">
            <summary>
            Command type.
            </summary>
        </member>
        <member name="F:Waher.Things.CommandType.Simple">
            <summary>
            Simple un-parametrized command.
            </summary>
        </member>
        <member name="F:Waher.Things.CommandType.Parametrized">
            <summary>
            Parametrized command.
            </summary>
        </member>
        <member name="F:Waher.Things.CommandType.Query">
            <summary>
            Parametrized query.
            </summary>
        </member>
        <member name="T:Waher.Things.ICommand">
            <summary>
            Interface for commands.
            </summary>
        </member>
        <member name="P:Waher.Things.ICommand.CommandID">
            <summary>
            ID of command.
            </summary>
        </member>
        <member name="P:Waher.Things.ICommand.Type">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="P:Waher.Things.ICommand.SortCategory">
            <summary>
            Sort Category, if available.
            </summary>
        </member>
        <member name="P:Waher.Things.ICommand.SortKey">
            <summary>
            Sort Key, if available.
            </summary>
        </member>
        <member name="M:Waher.Things.ICommand.GetNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the name of data source.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.ICommand.GetConfirmationStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a confirmation string, if any, of the command. If no confirmation is necessary, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.ICommand.GetFailureStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a failure string, if any, of the command. If no specific failure string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.ICommand.GetSuccessStringAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets a success string, if any, of the command. If no specific success string is available, null, or the empty string can be returned.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.ICommand.CanExecuteAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the command can be executed by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the command can be executed by the caller.</returns>
        </member>
        <member name="M:Waher.Things.ICommand.ExecuteCommandAsync">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:Waher.Things.ICommand.StartQueryExecutionAsync(Waher.Things.Queries.Query,Waher.Runtime.Language.Language)">
            <summary>
            Starts the execution of a query.
            </summary>
            <param name="Query">Query data receptor.</param>
            <param name="Language">Language to use.</param>
        </member>
        <member name="M:Waher.Things.ICommand.Copy">
            <summary>
            Creates a copy of the command object.
            </summary>
            <returns>Copy of command object.</returns>
        </member>
        <member name="T:Waher.Things.IDataSource">
            <summary>
            Interface for datasources that are published through the concentrator interface.
            </summary>
        </member>
        <member name="P:Waher.Things.IDataSource.SourceID">
            <summary>
            ID of data source.
            </summary>
        </member>
        <member name="M:Waher.Things.IDataSource.GetNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the name of data source.
            </summary>
            <param name="Language">Language to use.</param>
            <returns>Localized name of data source.</returns>
        </member>
        <member name="P:Waher.Things.IDataSource.HasChildren">
            <summary>
            If the source has any child sources.
            </summary>
        </member>
        <member name="P:Waher.Things.IDataSource.LastChanged">
            <summary>
            When the source was last updated.
            </summary>
        </member>
        <member name="P:Waher.Things.IDataSource.ChildSources">
            <summary>
            Child sources. If no child sources are available, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Things.IDataSource.CanViewAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the data source is visible to the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the source is visible to the caller.</returns>
        </member>
        <member name="P:Waher.Things.IDataSource.RootNodes">
            <summary>
            Root node references. If no root nodes are available, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Things.IDataSource.GetNodeAsync(Waher.Things.IThingReference)">
            <summary>
            Gets the node, given a reference to it.
            </summary>
            <param name="NodeRef">Node reference.</param>
            <returns>Node, if found, null otherwise.</returns>
        </member>
        <member name="E:Waher.Things.IDataSource.OnEvent">
            <summary>
            Event raised when a data source event has been raised.
            </summary>
        </member>
        <member name="T:Waher.Things.ILifeCycleManagement">
            <summary>
            Interface for nodes whose life cycle can be provisioned.
            </summary>
        </member>
        <member name="P:Waher.Things.ILifeCycleManagement.IsProvisioned">
            <summary>
            If node can be provisioned.
            </summary>
        </member>
        <member name="P:Waher.Things.ILifeCycleManagement.Owner">
            <summary>
            Who the owner of the node is. The empty string means the node has no owner.
            </summary>
        </member>
        <member name="P:Waher.Things.ILifeCycleManagement.IsPublic">
            <summary>
            If the node is public.
            </summary>
        </member>
        <member name="M:Waher.Things.ILifeCycleManagement.GetMetaData">
            <summary>
            Gets meta-data about the node.
            </summary>
            <returns>Meta data.</returns>
        </member>
        <member name="M:Waher.Things.ILifeCycleManagement.Claimed(System.String,System.Boolean)">
            <summary>
            Called when node has been claimed by an owner.
            </summary>
            <param name="Owner">Owner</param>
            <param name="IsPublic">If node is public.</param>
        </member>
        <member name="M:Waher.Things.ILifeCycleManagement.Disowned">
            <summary>
            Called when node has been disowned by its owner.
            </summary>
        </member>
        <member name="M:Waher.Things.ILifeCycleManagement.Removed">
            <summary>
            Called when node has been removed from the registry.
            </summary>
        </member>
        <member name="T:Waher.Things.NodeState">
            <summary>
            State of a node.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.None">
            <summary>
            No messages, warnings or errors.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.Information">
            <summary>
            Informational messages available.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.WarningSigned">
            <summary>
            Signed warnings availale.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.WarningUnsigned">
            <summary>
            Unsigned warnings availale.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.ErrorSigned">
            <summary>
            Signed errors availale.
            </summary>
        </member>
        <member name="F:Waher.Things.NodeState.ErrorUnsigned">
            <summary>
            Unsigned errors availale.
            </summary>
        </member>
        <member name="T:Waher.Things.INode">
            <summary>
            Interface for nodes that are published through the concentrator interface.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.LocalId">
            <summary>
            If provided, an ID for the node, but unique locally between siblings. Can be null, if Local ID equal to Node ID.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.LogId">
            <summary>
            If provided, an ID for the node, as it would appear or be used in system logs. Can be null, if Log ID equal to Node ID.
            </summary>
        </member>
        <member name="M:Waher.Things.INode.GetTypeNameAsync(Waher.Runtime.Language.Language)">
            <summary>
            Gets the type name of the node.
            </summary>
            <param name="Language">Language to use.</param>
        </member>
        <member name="P:Waher.Things.INode.HasChildren">
            <summary>
            If the source has any child sources.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.ChildrenOrdered">
            <summary>
            If the children of the node have an intrinsic order (true), or if the order is not important (false).
            </summary>
        </member>
        <member name="P:Waher.Things.INode.IsReadable">
            <summary>
            If the node can be read.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.IsControllable">
            <summary>
            If the node can be controlled.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.HasCommands">
            <summary>
            If the node has registered commands or not.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.Parent">
            <summary>
            Parent Node, or null if a root node.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.LastChanged">
            <summary>
            When the node was last updated.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.State">
            <summary>
            Current overall state of the node.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.ChildNodes">
            <summary>
            Child nodes. If no child nodes are available, null is returned.
            </summary>
        </member>
        <member name="M:Waher.Things.INode.CanViewAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node is visible to the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node is visible to the caller.</returns>
        </member>
        <member name="M:Waher.Things.INode.CanEditAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be edited by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be edited by the caller.</returns>
        </member>
        <member name="M:Waher.Things.INode.CanAddAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be added to by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be added to by the caller.</returns>
        </member>
        <member name="M:Waher.Things.INode.CanDestroyAsync(Waher.Things.RequestOrigin)">
            <summary>
            If the node can be destroyed to by the caller.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node can be destroyed to by the caller.</returns>
        </member>
        <member name="M:Waher.Things.INode.GetDisplayableParametersAsync(Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Gets displayable parameters.
            </summary>
            <param name="Language">Language to use.</param>
            <param name="Caller">Information about caller.</param>
            <returns>Set of displayable parameters.</returns>
        </member>
        <member name="M:Waher.Things.INode.GetMessagesAsync(Waher.Things.RequestOrigin)">
            <summary>
            Gets messages logged on the node.
            </summary>
            <returns>Set of messages.</returns>
        </member>
        <member name="M:Waher.Things.INode.MoveUpAsync(Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the node up.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node was moved up.</returns>
        </member>
        <member name="M:Waher.Things.INode.MoveDownAsync(Waher.Things.RequestOrigin)">
            <summary>
            Tries to move the node down.
            </summary>
            <param name="Caller">Information about caller.</param>
            <returns>If the node was moved down.</returns>
        </member>
        <member name="M:Waher.Things.INode.AcceptsParentAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive parent, i.e. can be added to that parent (if that parent accepts the node as a child).
            </summary>
            <param name="Parent">Presumptive parent node.</param>
            <returns>If the parent is acceptable.</returns>
        </member>
        <member name="M:Waher.Things.INode.AcceptsChildAsync(Waher.Things.INode)">
            <summary>
            If the node accepts a presumptive child, i.e. can receive as a child (if that child accepts the node as a parent).
            </summary>
            <param name="Child">Presumptive child node.</param>
            <returns>If the child is acceptable.</returns>
        </member>
        <member name="M:Waher.Things.INode.AddAsync(Waher.Things.INode)">
            <summary>
            Adds a new child to the node.
            </summary>
            <param name="Child">New child to add.</param>
        </member>
        <member name="M:Waher.Things.INode.UpdateAsync">
            <summary>
            Updates the node (in persisted storage).
            </summary>
        </member>
        <member name="M:Waher.Things.INode.RemoveAsync(Waher.Things.INode)">
            <summary>
            Removes a child from the node.
            </summary>
            <param name="Child">Child to remove.</param>
            <returns>If the Child node was found and removed.</returns>
        </member>
        <member name="M:Waher.Things.INode.DestroyAsync">
            <summary>
            Destroys the node. If it is a child to a parent node, it is removed from the parent first.
            </summary>
        </member>
        <member name="P:Waher.Things.INode.Commands">
            <summary>
            Available command objects. If no commands are available, null is returned.
            </summary>
        </member>
        <member name="T:Waher.Things.IRequestOrigin">
            <summary>
            Interface for requestors that can act as an origin for distributed requests.
            </summary>
        </member>
        <member name="M:Waher.Things.IRequestOrigin.GetOrigin">
            <summary>
            Origin of request.
            </summary>
        </member>
        <member name="T:Waher.Things.ISensor">
            <summary>
            Interface for sensor nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.ISensor.StartReadout(Waher.Things.ISensorReadout)">
            <summary>
            Starts the readout of the sensor.
            </summary>
            <param name="Request">Request object. All fields and errors should be reported to this interface.</param>
        </member>
        <member name="T:Waher.Things.ISensorReadout">
            <summary>
            Interface for classes managing sensor data readouts.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.Nodes">
            <summary>
            Array of nodes to read. Can be null or empty, if reading a sensor that is not a concentrator.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.Types">
            <summary>
            Field Types to read.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.FieldNames">
            <summary>
            Names of fields to read.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.From">
            <summary>
            From what time readout is to be made. Use <see cref="F:System.DateTime.MinValue"/> to specify no lower limit.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.To">
            <summary>
            To what time readout is to be made. Use <see cref="F:System.DateTime.MaxValue"/> to specify no upper limit.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.When">
            <summary>
            When the readout is to be made. Use <see cref="F:System.DateTime.MinValue"/> to start the readout immediately.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.Actor">
            <summary>
            Actor making the request.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.ServiceToken">
            <summary>
            Optional service token.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.DeviceToken">
            <summary>
            Optional device token.
            </summary>
        </member>
        <member name="P:Waher.Things.ISensorReadout.UserToken">
            <summary>
            Optional user token.
            </summary>
        </member>
        <member name="M:Waher.Things.ISensorReadout.IsIncluded(System.String)">
            <summary>
            Checks if a field with the given parameters is included in the readout.
            </summary>
            <param name="FieldName">Unlocalized name of field.</param>
            <returns>If the corresponding field is included.</returns>
        </member>
        <member name="M:Waher.Things.ISensorReadout.IsIncluded(System.DateTime)">
            <summary>
            Checks if a field with the given parameters is included in the readout.
            </summary>
            <param name="Timestamp">Timestamp of field.</param>
            <returns>If the corresponding field is included.</returns>
        </member>
        <member name="M:Waher.Things.ISensorReadout.IsIncluded(Waher.Things.SensorData.FieldType)">
            <summary>
            Checks if a field with the given parameters is included in the readout.
            </summary>
            <param name="Type">Field Types</param>
            <returns>If the corresponding field is included.</returns>
        </member>
        <member name="M:Waher.Things.ISensorReadout.IsIncluded(System.String,Waher.Things.SensorData.FieldType)">
            <summary>
            Checks if a field with the given parameters is included in the readout.
            </summary>
            <param name="FieldName">Unlocalized name of field.</param>
            <param name="Type">Field Types</param>
            <returns>If the corresponding field is included.</returns>
        </member>
        <member name="M:Waher.Things.ISensorReadout.IsIncluded(System.String,System.DateTime,Waher.Things.SensorData.FieldType)">
            <summary>
            Checks if a field with the given parameters is included in the readout.
            </summary>
            <param name="FieldName">Unlocalized name of field.</param>
            <param name="Timestamp">Timestamp of field.</param>
            <param name="Type">Field Types</param>
            <returns>If the corresponding field is included.</returns>
        </member>
        <member name="M:Waher.Things.ISensorReadout.Start">
            <summary>
            Report that readout has started. Can optionally be used to report feedback to end-user when readout is slow.
            </summary>
        </member>
        <member name="M:Waher.Things.ISensorReadout.ReportFields(System.Boolean,Waher.Things.SensorData.Field[])">
            <summary>
            Report read fields to the client.
            </summary>
            <param name="Done">If the readout is complete (true) or if more data will be reported (false).</param>
            <param name="Fields">Fields that have been read.</param>
        </member>
        <member name="M:Waher.Things.ISensorReadout.ReportFields(System.Boolean,System.Collections.Generic.IEnumerable{Waher.Things.SensorData.Field})">
            <summary>
            Report read fields to the client.
            </summary>
            <param name="Done">If the readout is complete (true) or if more data will be reported (false).</param>
            <param name="Fields">Fields that have been read.</param>
        </member>
        <member name="M:Waher.Things.ISensorReadout.ReportErrors(System.Boolean,Waher.Things.ThingError[])">
            <summary>
            Report error states to the client.
            </summary>
            <param name="Done">If the readout is complete (true) or if more data will be reported (false).</param>
            <param name="Errors">Errors that have been detected.</param>
        </member>
        <member name="M:Waher.Things.ISensorReadout.ReportErrors(System.Boolean,System.Collections.Generic.IEnumerable{Waher.Things.ThingError})">
            <summary>
            Report error states to the client.
            </summary>
            <param name="Done">If the readout is complete (true) or if more data will be reported (false).</param>
            <param name="Errors">Errors that have been detected.</param>
        </member>
        <member name="T:Waher.Things.GetThingReferenceMethod">
            <summary>
            Delegate for methods returning thing reference nodes.
            </summary>
            <param name="NodeId">Node ID</param>
            <param name="SourceId">Source ID</param>
            <param name="Partition">Partition</param>
            <returns>Thing reference, if found, null if not.</returns>
        </member>
        <member name="T:Waher.Things.IThingReference">
            <summary>
            Interface for thing references.
            </summary>
        </member>
        <member name="P:Waher.Things.IThingReference.NodeId">
            <summary>
            ID of node.
            </summary>
        </member>
        <member name="P:Waher.Things.IThingReference.SourceId">
            <summary>
            Optional ID of source containing node.
            </summary>
        </member>
        <member name="P:Waher.Things.IThingReference.Partition">
            <summary>
            Optional partition in which the Node ID is unique.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.ColumnAlignment">
            <summary>
            Column alignment.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.ColumnAlignment.Left">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.ColumnAlignment.Center">
            <summary>
            Center aligned.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.ColumnAlignment.Right">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.Column">
            <summary>
            Defines a column in a table.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Column.#ctor(System.String,System.String,System.String,System.String,System.Nullable{SkiaSharp.SKColor},System.Nullable{SkiaSharp.SKColor},System.Nullable{Waher.Things.Queries.ColumnAlignment},System.Nullable{System.Byte})">
            <summary>
            Defines a column in a table.
            </summary>
            <param name="ColumnId">Column ID</param>
            <param name="Header">Optional localized header.</param>
            <param name="DataSourceId">Optional Data Suorce ID reference.</param>
            <param name="Partition">Optional partition reference.</param>
            <param name="FgColor">Optional Foreground Color.</param>
            <param name="BgColor">Optional Background Color.</param>
            <param name="Alignment">Optional Column Alignment.</param>
            <param name="NrDecimals">Optional Number of Decimals.</param>
        </member>
        <member name="P:Waher.Things.Queries.Column.ColumnId">
            <summary>
            Column ID
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.Header">
            <summary>
            Optional localized header.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.DataSourceId">
            <summary>
            Optional Data Suorce ID reference.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.Partition">
            <summary>
            Optional partition reference.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.FgColor">
            <summary>
            Optional Foreground Color.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.BgColor">
            <summary>
            Optional Background Color.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.Alignment">
            <summary>
            Optional Column Alignment.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Column.NrDecimals">
            <summary>
            Optional Number of Decimals.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.CompoundQuery">
            <summary>
            Class handling the reception of data from a query on multiple nodes.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.CompoundQuery.#ctor(System.String,System.String,System.Object,Waher.Runtime.Language.Language,System.Collections.Generic.IEnumerable{Waher.Things.Queries.Query})">
            <summary>
            Class handling the reception of data from a query on multiple nodes.
            </summary>
            <param name="CommandId">Command ID</param>
            <param name="QueryId">Query ID</param>
            <param name="State">State object.</param>
            <param name="Language">Language of query.</param>
            <param name="Queries">Queries</param>
        </member>
        <member name="P:Waher.Things.Queries.CompoundQuery.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.CompoundQuery.Abort">
            <summary>
            Aborts the query.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryEventHandler">
            <summary>
            Delegate for query event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query event arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryTableEventHandler">
            <summary>
            Delegate for query table event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query table event arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryNewTableEventHandler">
            <summary>
            Delegate for query new table event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query new table event arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryNewRecordsEventHandler">
            <summary>
            Delegate for query new records event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query new records event arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryObjectEventHandler">
            <summary>
            Delegate for query object event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query object arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryMessageEventHandler">
            <summary>
            Delegate for query message event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query message arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryTitleEventHandler">
            <summary>
            Delegate for query title event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query title arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.QueryStatusEventHandler">
            <summary>
            Delegate for query status event handlers.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Query status arguments.</param>
        </member>
        <member name="T:Waher.Things.Queries.Query">
            <summary>
            Class handling the reception of data from a query.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.#ctor(System.String,System.String,System.Object,Waher.Runtime.Language.Language,Waher.Things.INode)">
            <summary>
            Class handling the reception of data from a query.
            </summary>
            <param name="CommandId">Command ID</param>
            <param name="QueryId">Query ID</param>
            <param name="State">State object.</param>
            <param name="Language">Language of query.</param>
            <param name="NodeReference">Node reference.</param>
        </member>
        <member name="P:Waher.Things.Queries.Query.CommandID">
            <summary>
            Command ID
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.QueryID">
            <summary>
            Query ID
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.State">
            <summary>
            State object.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.Language">
            <summary>
            Language of query.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.NodeReference">
            <summary>
            Node reference.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.IsAborted">
            <summary>
            If the query is aborted.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.IsDone">
            <summary>
            If the query is done.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Query.SequenceNumber">
            <summary>
            Curernt sequence number counter.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.NextSequenceNumber">
            <summary>
            Gets the next sequence number.
            </summary>
            <returns>Next sequence number.</returns>
        </member>
        <member name="M:Waher.Things.Queries.Query.Abort">
            <summary>
            Aborts the query.
            </summary>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnAborted">
            <summary>
            Event raised when the query has been aborted.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.Start">
            <summary>
            Starts query execution.
            </summary>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnStarted">
            <summary>
            Event raised when the query has been aborted.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.Done">
            <summary>
            Query execution completed.
            </summary>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnDone">
            <summary>
            Event raised when query has been completed.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.NewTable(System.String,System.String,Waher.Things.Queries.Column[])">
            <summary>
            Defines a new table in the query output.
            </summary>
            <param name="TableId">ID of table.</param>
            <param name="TableName">Localized name of table.</param>
            <param name="Columns">Columns.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnNewTable">
            <summary>
            Event raised when a new table has been created.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.NewRecords(System.String,Waher.Things.Queries.Record[])">
            <summary>
            Reports a new set of records in a table.
            </summary>
            <param name="TableId">Table ID</param>
            <param name="Records">New records.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnNewRecords">
            <summary>
            Event raised when new records are reported for a table.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.TableDone(System.String)">
            <summary>
            Reports a table as being complete.
            </summary>
            <param name="TableId">ID of table.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnTableDone">
            <summary>
            Event raised when a table is completed.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.NewObject(System.Object)">
            <summary>
            Reports a new object.
            </summary>
            <param name="Object">Object</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnNewObject">
            <summary>
            Event raised when new records are reported for a table.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.LogMessage(Waher.Things.Queries.QueryEventType,Waher.Things.Queries.QueryEventLevel,System.String)">
            <summary>
            Logs a query message.
            </summary>
            <param name="Type">Event type.</param>
            <param name="Level">Event level.</param>
            <param name="Body">Event message body.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnMessage">
            <summary>
            Event raised when a new message has been received.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.SetTitle(System.String)">
            <summary>
            Sets the title of the report.
            </summary>
            <param name="Title">Title.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnTitle">
            <summary>
            Event raised when the report title has been set.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.SetStatus(System.String)">
            <summary>
            Sets the current status of the query execution.
            </summary>
            <param name="Status">Status message.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnStatus">
            <summary>
            Event raised when the current status changes.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.BeginSection(System.String)">
            <summary>
            Begins a new section. Sections can be nested.
            Each call to <see cref="M:Waher.Things.Queries.Query.BeginSection(System.String)"/> must be followed by a call to <see cref="M:Waher.Things.Queries.Query.EndSection"/>.
            </summary>
            <param name="Header">Section Title.</param>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnBeginSection">
            <summary>
            Event raised when a new section is created.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Query.EndSection">
            <summary>
            Ends a section.
            Each call to <see cref="M:Waher.Things.Queries.Query.BeginSection(System.String)"/> must be followed by a call to <see cref="M:Waher.Things.Queries.Query.EndSection"/>.
            </summary>
        </member>
        <member name="E:Waher.Things.Queries.Query.OnEndSection">
            <summary>
            Event raised when a section is closed.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryEventArgs">
            <summary>
            Base class for all query-related events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryEventArgs.#ctor(Waher.Things.Queries.Query)">
            <summary>
            Base class for all query-related events.
            </summary>
            <param name="Query">Query.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryEventArgs.Query">
            <summary>
            Query originating the event.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryEventType">
            <summary>
            Query event type.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventType.Information">
            <summary>
            Informational event.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventType.Warning">
            <summary>
            Warning event.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventType.Error">
            <summary>
            Error event.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventType.Exception">
            <summary>
            Exception event.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryEventLevel">
            <summary>
            Event level.
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventLevel.Minor">
            <summary>
            Minor event
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventLevel.Medium">
            <summary>
            Medium event
            </summary>
        </member>
        <member name="F:Waher.Things.Queries.QueryEventLevel.Major">
            <summary>
            Major event
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryMessageEventArgs">
            <summary>
            Defines a query message.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryMessageEventArgs.#ctor(Waher.Things.Queries.Query,Waher.Things.Queries.QueryEventType,Waher.Things.Queries.QueryEventLevel,System.String)">
            <summary>
            Defines a query message.
            </summary>
            <param name="Query">Query.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <param name="Body">Event message body.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryMessageEventArgs.Type">
            <summary>
            Event Type.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.QueryMessageEventArgs.Level">
            <summary>
            Event Level.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.QueryMessageEventArgs.Body">
            <summary>
            Event message body.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryNewRecordsEventArgs">
            <summary>
            Base class for all query-related table events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryNewRecordsEventArgs.#ctor(Waher.Things.Queries.Query,System.String,Waher.Things.Queries.Record[])">
            <summary>
            Base class for all query-related table events.
            </summary>
            <param name="Query">Query.</param>
            <param name="ObjectId">Object ID</param>
            <param name="Records">Records</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryNewRecordsEventArgs.Records">
            <summary>
            Records
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryNewTableEventArgs">
            <summary>
            Base class for all query-related table events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryNewTableEventArgs.#ctor(Waher.Things.Queries.Query,System.String,System.String,Waher.Things.Queries.Column[])">
            <summary>
            Base class for all query-related table events.
            </summary>
            <param name="Query">Query.</param>
            <param name="TableId">Table ID.</param>
            <param name="Columns">Localized table name.</param>
            <param name="TableName">Columns.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryNewTableEventArgs.TableName">
            <summary>
            Localized Table Name.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.QueryNewTableEventArgs.Columns">
            <summary>
            Columns
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryObjectEventArgs">
            <summary>
            Base class for all query-related table events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryObjectEventArgs.#ctor(Waher.Things.Queries.Query,System.Object)">
            <summary>
            Base class for all query-related table events.
            </summary>
            <param name="Query">Query.</param>
            <param name="Object">Object</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryObjectEventArgs.Object">
            <summary>
            Object.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryStatusEventArgs">
            <summary>
            Event arguments for query title events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryStatusEventArgs.#ctor(Waher.Things.Queries.Query,System.String)">
            <summary>
            Event arguments for query title events.
            </summary>
            <param name="Query">Query.</param>
            <param name="Status">Status message.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryStatusEventArgs.Status">
            <summary>
            Status message.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryTableEventArgs">
            <summary>
            Base class for all query-related table events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryTableEventArgs.#ctor(Waher.Things.Queries.Query,System.String)">
            <summary>
            Base class for all query-related table events.
            </summary>
            <param name="Query">Query.</param>
            <param name="TableId">Table ID.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryTableEventArgs.TableId">
            <summary>
            Table ID.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.QueryTitleEventArgs">
            <summary>
            Event arguments for query title events.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.QueryTitleEventArgs.#ctor(Waher.Things.Queries.Query,System.String)">
            <summary>
            Event arguments for query title events.
            </summary>
            <param name="Query">Query.</param>
            <param name="Title">Title.</param>
        </member>
        <member name="P:Waher.Things.Queries.QueryTitleEventArgs.Title">
            <summary>
            Title.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.Record">
            <summary>
            Defines a record in a table.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Record.#ctor(System.Object[])">
            <summary>
            Defines a record in a table.
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Record.Elements">
            <summary>
            Record elements.
            </summary>
        </member>
        <member name="T:Waher.Things.Queries.Table">
            <summary>
            Represents a table in a query result.
            </summary>
        </member>
        <member name="M:Waher.Things.Queries.Table.#ctor(System.String,System.String,Waher.Things.Queries.Column[])">
            <summary>
            Represents a table in a query result.
            </summary>
            <param name="TableId">Table ID</param>
            <param name="Name">Table name</param>
            <param name="Columns">Columns</param>
        </member>
        <member name="P:Waher.Things.Queries.Table.TableId">
            <summary>
            Table ID
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Table.Name">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Waher.Things.Queries.Table.Columns">
            <summary>
            Columns
            </summary>
        </member>
        <member name="T:Waher.Things.RequestOrigin">
            <summary>
            Tokens available in request.
            </summary>
        </member>
        <member name="F:Waher.Things.RequestOrigin.Empty">
            <summary>
            Empty request origin.
            </summary>
        </member>
        <member name="M:Waher.Things.RequestOrigin.#ctor(System.String,System.String[],System.String[],System.String[])">
            <summary>
            Tokens available in request.
            </summary>
            <param name="From">Address of caller.</param>
            <param name="DeviceTokens">Device tokens, or null.</param>
            <param name="ServiceTokens">Service tokens, or null.</param>
            <param name="UserTokens">User tokens, or null.</param>
        </member>
        <member name="P:Waher.Things.RequestOrigin.From">
            <summary>
            Address of caller.
            </summary>
        </member>
        <member name="P:Waher.Things.RequestOrigin.DeviceTokens">
            <summary>
            Device tokens, or null.
            </summary>
        </member>
        <member name="P:Waher.Things.RequestOrigin.ServiceTokens">
            <summary>
            Service tokens, or null.
            </summary>
        </member>
        <member name="P:Waher.Things.RequestOrigin.UserTokens">
            <summary>
            User tokens, or null.
            </summary>
        </member>
        <member name="M:Waher.Things.RequestOrigin.GetOrigin">
            <summary>
            Origin of request.
            </summary>
        </member>
        <member name="T:Waher.Things.ScriptExtensions.AddableTypes">
            <summary>
            Gets an array of types of nodes that can be added to an existing node.
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.AddableTypes.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Gets an array of types of nodes that can be added to an existing node.
            </summary>
            <param name="Node">Node.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression containing script.</param>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.AddableTypes.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.AddableTypes.IsAsynchronous">
            <summary>
            If the node (or its decendants) include asynchronous evaluation. Asynchronous nodes should be evaluated using
            <see cref="M:Waher.Script.Model.ScriptNode.EvaluateAsync(Waher.Script.Variables)"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.AddableTypes.Evaluate(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.AddableTypes.EvaluateAsync(Waher.Script.Abstraction.Elements.IElement,Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Argument">Function argument.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.AddableTypes.GetAddableTypes(Waher.Things.INode)">
            <summary>
            Gets an array of type names of nodes that can be added to <paramref name="Node"/>.
            </summary>
            <param name="Node">Reference node.</param>
            <returns>Array of names of types of nodes that can be added to <paramref name="Node"/>.</returns>
        </member>
        <member name="T:Waher.Things.ScriptExtensions.SensorData.Field">
            <summary>
            Creates a Boolean field.
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Boolean field.
            </summary>
            <param name="Thing">Thing reference</param>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Boolean field.
            </summary>
            <param name="Thing">Thing reference</param>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Boolean field.
            </summary>
            <param name="Thing">Thing reference</param>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
            <param name="Type">Field Type</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Boolean field.
            </summary>
            <param name="Thing">Thing reference</param>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
            <param name="Type">Field Type</param>
            <param name="QoS">Quality of Service</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a Boolean field.
            </summary>
            <param name="Thing">Thing reference</param>
            <param name="Timestamp">Timestamp of value.</param>
            <param name="Name">Field name.</param>
            <param name="Value">Field value.</param>
            <param name="Type">Field Type</param>
            <param name="QoS">Quality of Service</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
            <param name="Writable">If field is writable</param>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.SensorData.Field.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.SensorData.Field.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.SensorData.Field.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Things.ScriptExtensions.ThingReference">
            <summary>
            Creates a reference object to a thing.
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.ThingReference.#ctor(System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a reference object to a thing.
            </summary>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.ThingReference.#ctor(Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a reference object to a thing.
            </summary>
            <param name="NodeId">Node ID</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.ThingReference.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a reference object to a thing.
            </summary>
            <param name="NodeId">Node ID</param>
            <param name="SourceId">Source ID</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.ThingReference.#ctor(Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,Waher.Script.Model.ScriptNode,System.Int32,System.Int32,Waher.Script.Expression)">
            <summary>
            Creates a reference object to a thing.
            </summary>
            <param name="NodeId">Node ID</param>
            <param name="SourceId">Source ID</param>
            <param name="Partition">Partition</param>
            <param name="Start">Start position in script expression.</param>
            <param name="Length">Length of expression covered by node.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.ThingReference.FunctionName">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Waher.Things.ScriptExtensions.ThingReference.DefaultArgumentNames">
            <summary>
            Default Argument names
            </summary>
        </member>
        <member name="M:Waher.Things.ScriptExtensions.ThingReference.Evaluate(Waher.Script.Abstraction.Elements.IElement[],Waher.Script.Variables)">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Function arguments.</param>
            <param name="Variables">Variables collection.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Waher.Things.SensorData.BooleanField">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.BooleanField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Boolean,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a boolean value that can be either true or false.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.BooleanField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.BooleanField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.BooleanField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.BooleanField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.BooleanField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.DateField">
            <summary>
            Represents a date value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor">
            <summary>
            Represents a date value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a date value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.DateField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.DateTimeField">
            <summary>
            Represents a date and optional time value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor">
            <summary>
            Represents a date and optional time value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DateTimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.DateTime,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a date and optional time value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.DateTimeField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateTimeField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateTimeField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateTimeField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DateTimeField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.DurationField">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.DurationField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Content.Duration,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
             <summary>
             Represents a duration value. Duration values adhere to the type specified by xsd:duration.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.DurationField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DurationField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DurationField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DurationField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.DurationField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.EnumField">
            <summary>
            Represents a enum value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor">
            <summary>
            Represents a enum value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Enum,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.EnumField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a enum value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="ValueString">String-representation of enumeration value.</param>
            <param name="EnumerationType">Enumeration type.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.Value">
            <summary>
            Field Value, if available. If null, <see cref="P:Waher.Things.SensorData.EnumField.ValueString"/> contains the string representation and
            <see cref="T:System.Type"/> contains the name of the enumeration type.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.EnumerationType">
            <summary>
            Enumeration Type.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.EnumField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.Field">
            <summary>
            Base class for all sensor data fields.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Base class for all sensor data fields.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.Field.ObjectId">
            <summary>
            Persisted object ID. Is null if object not persisted.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Thing">
            <summary>
            Reference to the thing to which the field belongs.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Timestamp">
            <summary>
            Timestamp of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Expires">
            <summary>
            Timestamp of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.ArchiveDays">
            <summary>
            Number of days to archive field.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.StringIdSteps">
            <summary>
            Array of Language String ID steps. List can be null. Strings can be null if no seeds or modules are used.
            
            Localization algorithm is defined in:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Type">
            <summary>
            Field Type flags.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.QoS">
            <summary>
            Field Quality of Service flags.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Name">
            <summary>
            Unlocalized field name.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Module">
            <summary>
            Default language module, if explicit language modules are not specified in the language steps.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.Writable">
            <summary>
            If the field corresponds to a control parameter with the same name.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Field.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Waher.Things.SensorData.Field.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Field.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.FieldQoS">
            <summary>
            Field Quality of Service flags
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.Missing">
            <summary>
            Value is missing
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.InProgress">
            <summary>
            Value is in progress to be measured or calculated. The value is to be considered as unsure and not final. 
            Read again later to retrieve the correct value. It is more reliable than a missing value, but less reliable than an estimate.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.AutomaticEstimate">
            <summary>
            An estimate of the value has been done automatically. Considered more reliable than a value in progress.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.ManualEstimate">
            <summary>
            The value has manually been estimated. Considered more reliable than an automatic estimate.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.ManualReadout">
            <summary>
            Value has been manually read. Considered more reliable than a manual estimate.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.AutomaticReadout">
            <summary>
            Value has been automatically read. Considered more reliable than a manually read value.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.TimeOffset">
            <summary>
            The time was offset more than allowed and corrected during the measurement period.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.Warning">
            <summary>
            A warning was logged during the measurement period.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.Error">
            <summary>
            An error was logged during the measurement period.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.Signed">
            <summary>
            The value has been signed by an operator. Considered more reliable than an automatically read value. Note that the signed quality 
            of service flag can be used to overwrite existing values of higher importance. Example signed + invoiced can be considered more 
            reliable than only invoiced, etc. 
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.Invoiced">
            <summary>
            The value has been invoiced by an operator. Considered more reliable than a signed value.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.EndOfSeries">
            <summary>
            The value has been marked as an end point in a series. This can be used for instance to mark the change of tenant in an apartment.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.PowerFailure">
            <summary>
            The device recorded a power failure during the measurement period.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldQoS.InvoiceConfirmed">
            <summary>
            The value has been invoiced by an operator and confirmed by the recipient. Considered more reliable than an invoiced value.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.FieldType">
            <summary>
            Field Type flags
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Momentary">
            <summary>
            A momentary value represents a value measured at the time of the read-out. Examples: Energy, Volume, Power, Flow, Temperature, Pressure, etc.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Identity">
            <summary>
            A value that can be used for identification. (Serial numbers, meter IDs, locations, names, addresses, etc.)
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Status">
            <summary>
            A value displaying status information about something. Examples: Health, Battery life time, Runtime, Expected life time, Signal strength, 
            Signal quality, etc. 
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Computed">
            <summary>
            A value that is computed instead of measured. 
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Peak">
            <summary>
            A maximum or minimum value during a given period. Examples "Temperature, Max", "Temperature, Min", etc.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.Historical">
            <summary>
            A historical value.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.AllExceptHistorical">
            <summary>
            All types, except historical values.
            </summary>
        </member>
        <member name="F:Waher.Things.SensorData.FieldType.All">
            <summary>
            All field types.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.Int32Field">
            <summary>
            Represents a 32-bit integer value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor">
            <summary>
            Represents a 32-bit integer value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int32Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int32,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a 32-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.Int32Field.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int32Field.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int32Field.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int32Field.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int32Field.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.Int64Field">
            <summary>
            Represents a 64-bit integer value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor">
            <summary>
            Represents a 64-bit integer value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.Int64Field.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Int64,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a 64-bit integer value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.Int64Field.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int64Field.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int64Field.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int64Field.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.Int64Field.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.LocalizationStep">
            <summary>
            Represents a localization step, as defined in XEP-323:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.LocalizationStep.#ctor">
            <summary>
            Represents a localization step, as defined in XEP-323:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.LocalizationStep.#ctor(System.Int32)">
            <summary>
            Represents a localization step, as defined in XEP-323:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
            <param name="StringId">String ID</param>
        </member>
        <member name="M:Waher.Things.SensorData.LocalizationStep.#ctor(System.Int32,System.String)">
            <summary>
            Represents a localization step, as defined in XEP-323:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
            <param name="StringId">String ID</param>
            <param name="Module">Optional Language Module</param>
        </member>
        <member name="M:Waher.Things.SensorData.LocalizationStep.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Represents a localization step, as defined in XEP-323:
            http://xmpp.org/extensions/xep-0323.html#localization
            </summary>
            <param name="StringId">String ID</param>
            <param name="Module">Optional Language Module</param>
            <param name="Seed">Optional Seed value.</param>
        </member>
        <member name="P:Waher.Things.SensorData.LocalizationStep.StringId">
            <summary>
            String ID
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.LocalizationStep.Module">
            <summary>
            Optional language module, if different from the base module.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.LocalizationStep.Seed">
            <summary>
            Optional localization seed.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.LocalizationStep.TryGetLocalization(Waher.Runtime.Language.Language,Waher.Runtime.Language.Namespace,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Tries to get the localization of a string, given a sequence of localization steps.
            </summary>
            <param name="Language">Language</param>
            <param name="BaseModule">Base module to use, if another module is not specified.</param>
            <param name="Steps">Sequence of steps.</param>
            <returns>Localized result, if successful, null if not.</returns>
        </member>
        <member name="T:Waher.Things.SensorData.PersistableQuantity">
            <summary>
            Persistable quantity object.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.#ctor">
            <summary>
            Persistable quantity object.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.#ctor(System.Double,System.String,System.Byte)">
            <summary>
            Persistable quantity object.
            </summary>
            <param name="Value">Magnitude</param>
            <param name="Unit">Unit</param>
            <param name="NrDecimals">Number of decimals.</param>
        </member>
        <member name="P:Waher.Things.SensorData.PersistableQuantity.Value">
            <summary>
            Magnitude
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.PersistableQuantity.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.PersistableQuantity.NrDecimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.ToPhysicalQuantity">
            <summary>
            Converts underlying object to a physical quantity.
            </summary>
            <returns>Physical quantity</returns>
        </member>
        <member name="M:Waher.Things.SensorData.PersistableQuantity.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.QuantityField">
            <summary>
            Represents a physical quantity value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor">
            <summary>
            Represents a 64-bit integer value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.QuantityField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.Double,System.Byte,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a physical quantity value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="NrDecimals">Number of decimals.</param>
            <param name="Unit">Unit</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.NrDecimals">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.Quantity">
            <summary>
            Physical Quantity
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.PersistableQuantity">
            <summary>
            Persistable Quantity
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.QuantityField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.StringField">
            <summary>
            Represents a string value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor">
            <summary>
            Represents a string value.
            </summary>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Module">Language Module for localization purposes.</param>
            <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
            <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.StringField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.String,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
            <summary>
            Represents a string value.
            </summary>
            <param name="Thing">Reference to the thing to which the field belongs.</param>
            <param name="Timestamp">Timestamp of field value.</param>
            <param name="Name">Field Name.</param>
            <param name="Value">Field Value.</param>
            <param name="Type">Field Type flags.</param>
            <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.StringField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.StringField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.StringField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.StringField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.StringField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SensorData.TimeField">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,Waher.Things.SensorData.LocalizationStep[])">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean,System.String,System.Int32[])">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,Waher.Things.SensorData.LocalizationStep[])">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIdSteps">String ID steps.</param>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.String,System.Int32[])">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Module">Language Module for localization purposes.</param>
             <param name="StringIds">String IDs.</param>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS,System.Boolean)">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
             <param name="Writable">If the field is writable, i.e. corresponds to a control parameter.</param>
        </member>
        <member name="M:Waher.Things.SensorData.TimeField.#ctor(Waher.Things.ThingReference,System.DateTime,System.String,System.TimeSpan,Waher.Things.SensorData.FieldType,Waher.Things.SensorData.FieldQoS)">
             <summary>
             Represents a time value. Time values adhere to the type specified by xsd:time.
            
             Difference between xsd:time and xsd:duration is that:
            		xsd:duration represents the relative span between twostamps in time.
            		xsd:time represents an absolute time or clock in the 24-hour clock.
             </summary>
             <param name="Thing">Reference to the thing to which the field belongs.</param>
             <param name="Timestamp">Timestamp of field value.</param>
             <param name="Name">Field Name.</param>
             <param name="Value">Field Value.</param>
             <param name="Type">Field Type flags.</param>
             <param name="QoS">Quality of Service flags.</param>
        </member>
        <member name="P:Waher.Things.SensorData.TimeField.Value">
            <summary>
            Field Value
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.TimeField.ObjectValue">
            <summary>
            Field value, boxed as an object reference.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.TimeField.ValueString">
            <summary>
            String representation of field value.
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.TimeField.FieldDataTypeName">
            <summary>
            Provides a string identifying the data type of the field. Should conform to field value data types specified in the IEEE XMPP IoT extensions, if possible:
            http://xmpp.org/extensions/xep-0323.html#fieldvaluetypes
            </summary>
        </member>
        <member name="P:Waher.Things.SensorData.TimeField.ReferenceValue">
            <summary>
            Reference value. Can be used for change calculations, as outlined in 
            http://www.xmpp.org/extensions/inbox/iot-events.html#changeconditions.
            
            Possible values are either double values or string values.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeAdded">
            <summary>
            Node added event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeAdded.#ctor">
            <summary>
            Node added event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeAdded.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin,System.Boolean)">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
            <param name="Sniffable">If the node is sniffable.</param>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeAdded.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin,System.Boolean,Waher.Things.DisplayableParameters.Parameter[])">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
            <param name="Sniffable">If the node is sniffable.</param>
            <param name="AdditionalParameters">Additional node parameters.</param>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeAdded.EmptyIfSame(System.String,System.String)">
            <summary>
            Returns <paramref name="Id1"/> if different, <see cref="F:System.String.Empty"/> if the same.
            </summary>
            <param name="Id1">ID 1</param>
            <param name="Id2">ID 2</param>
            <returns><paramref name="Id1"/> if different, <see cref="F:System.String.Empty"/> if the same.</returns>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.AfterNodeId">
            <summary>
            In an ordered set of nodes, the new node is added after this node, if provided.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.AfterPartition">
            <summary>
            In an ordered set of nodes, the new node is added after the node defined by <see cref="P:Waher.Things.SourceEvents.NodeAdded.AfterNodeId"/>, in this partition, if provided.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.NodeType">
            <summary>
            Type of node, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.Sniffable">
            <summary>
            If node was sniffable, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeAdded.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeEvent">
            <summary>
            Abstract base class for all node events.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeEvent.#ctor">
            <summary>
            Abstract base class for all node events.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeEvent.NodeId">
            <summary>
            Node identity.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeEvent.Partition">
            <summary>
            Optional partition.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeEvent.LogId">
            <summary>
            Log identity, if different from <see cref="P:Waher.Things.SourceEvents.NodeEvent.NodeId"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeEvent.LocalId">
            <summary>
            Local identity, if different from <see cref="P:Waher.Things.SourceEvents.NodeEvent.NodeId"/>.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeMovedDown">
            <summary>
            Node moved down event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeMovedDown.#ctor">
            <summary>
            Node moved down event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeMovedDown.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeMovedUp">
            <summary>
            Node moved up event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeMovedUp.#ctor">
            <summary>
            Node moved up event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeMovedUp.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeParametersEvent">
            <summary>
            Abstract base class for all node events with parameters.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeParametersEvent.#ctor">
            <summary>
            Abstract base class for all node events with parameters.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.Parameters">
            <summary>
            Displayable parameters.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.Updated">
            <summary>
            When node was last updated, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.ParentId">
            <summary>
            Parent identity of node, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.ParentPartition">
            <summary>
            Partition of parent of node, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.HasChildren">
            <summary>
            If node had children, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.IsReadable">
            <summary>
            If node was readable, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.IsControllable">
            <summary>
            If node was controllable, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.HasCommands">
            <summary>
            If node had commands, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeParametersEvent.ChildrenOrdered">
            <summary>
            If node children was ordered, at time of event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeRemoved">
            <summary>
            Node removed event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeRemoved.#ctor">
            <summary>
            Node removed event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeRemoved.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeRemoved.FromNode(Waher.Things.INode)">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node removed.</param>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeStatusChanged">
            <summary>
            Node status changed event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeStatusChanged.#ctor">
            <summary>
            Node status changed event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeStatusChanged.Messages">
            <summary>
            Messages on node, at time of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeStatusChanged.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeStatusEvent">
            <summary>
            Abstract base class for all node status events.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeStatusEvent.#ctor">
            <summary>
            Abstract base class for all node status events.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeStatusEvent.State">
            <summary>
            State of node, at time of event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.NodeUpdated">
            <summary>
            Node updated event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeUpdated.#ctor">
            <summary>
            Node updated event.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeUpdated.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin)">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeUpdated.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin,Waher.Things.DisplayableParameters.Parameter[])">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
            <param name="AdditionalParameters">Additional node parameters.</param>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeUpdated.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin,System.String)">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
            <param name="OldId">Old Node ID, if differrent from previous NodeId.</param>
        </member>
        <member name="M:Waher.Things.SourceEvents.NodeUpdated.FromNode(Waher.Things.INode,Waher.Runtime.Language.Language,Waher.Things.RequestOrigin,System.String,Waher.Things.DisplayableParameters.Parameter[])">
            <summary>
            Creates an event object from a node object.
            </summary>
            <param name="Node">Node added.</param>
            <param name="Language">Language</param>
            <param name="Caller">Original caller.</param>
            <param name="OldId">Old Node ID, if differrent from previous NodeId.</param>
            <param name="AdditionalParameters">Additional node parameters.</param>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeUpdated.OldId">
            <summary>
            If renamed, this property contains the node identity before the node was renamed.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.NodeUpdated.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.SourceEventEventHandler">
            <summary>
            Delegate for data source events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="Event">Event object.</param>
        </member>
        <member name="T:Waher.Things.SourceEvents.SourceEvent">
            <summary>
            Abstract base class for all data source events.
            </summary>
        </member>
        <member name="M:Waher.Things.SourceEvents.SourceEvent.#ctor">
            <summary>
            Abstract base class for all data source events.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.SourceEvent.ObjectId">
            <summary>
            Persisted object ID. Is null if object not persisted.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.SourceEvent.SourceId">
            <summary>
            Data source identity.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.SourceEvent.Timestamp">
            <summary>
            Timestamp of event.
            </summary>
        </member>
        <member name="P:Waher.Things.SourceEvents.SourceEvent.EventType">
            <summary>
            Type of data source event.
            </summary>
        </member>
        <member name="T:Waher.Things.SourceEvents.SourceEventType">
            <summary>
            Data Source event types
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeAdded">
            <summary>
            Event raised when a node has been added to the data source.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeUpdated">
            <summary>
            Event raised when a node has been updated in the data source.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeStatusChanged">
            <summary>
            Event raised when the status of a node in the data source changed.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeRemoved">
            <summary>
            Event raised when a node has been removed from the data source.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeMovedUp">
            <summary>
            Event raised when an ordered node has been moved up one step.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.NodeMovedDown">
            <summary>
            Event raised when an ordered node has been moved down one step.
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.None">
            <summary>
            No events
            </summary>
        </member>
        <member name="F:Waher.Things.SourceEvents.SourceEventType.All">
            <summary>
            All events
            </summary>
        </member>
        <member name="T:Waher.Things.ThingError">
            <summary>
            Contains information about an error on a thing
            </summary>
        </member>
        <member name="M:Waher.Things.ThingError.#ctor(Waher.Things.IThingReference,System.String)">
            <summary>
            Contains information about an error on a thing
            </summary>
            <param name="Thing">Thing reference.</param>
            <param name="ErrorMessage">Error message.</param>
        </member>
        <member name="M:Waher.Things.ThingError.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Contains information about an error on a thing
            </summary>
            <param name="NodeId">ID of node.</param>
            <param name="SourceId">Optional ID of source containing node.</param>
            <param name="Partition">Optional partition in which the Node ID is unique.</param>
            <param name="ErrorMessage">Error message.</param>
        </member>
        <member name="M:Waher.Things.ThingError.#ctor(Waher.Things.IThingReference,System.DateTime,System.String)">
            <summary>
            Contains information about an error on a thing
            </summary>
            <param name="Thing">Thing reference.</param>
            <param name="Timestamp">Timestamp.</param>
            <param name="ErrorMessage">Error message.</param>
        </member>
        <member name="M:Waher.Things.ThingError.#ctor(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Contains information about an error on a thing
            </summary>
            <param name="NodeId">ID of node.</param>
            <param name="SourceId">Optional ID of source containing node.</param>
            <param name="Partition">Optional partition in which the Node ID is unique.</param>
            <param name="Timestamp">Timestamp.</param>
            <param name="ErrorMessage">Error message.</param>
        </member>
        <member name="P:Waher.Things.ThingError.Timestamp">
            <summary>
            Timestamp of error.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingError.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:Waher.Things.ThingError.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Things.ThingReference">
            <summary>
            Contains a reference to a thing
            </summary>
        </member>
        <member name="M:Waher.Things.ThingReference.#ctor">
            <summary>
            Contains a reference to a thing
            </summary>
        </member>
        <member name="M:Waher.Things.ThingReference.#ctor(System.String)">
            <summary>
            Contains a reference to a thing
            </summary>
            <param name="NodeId">ID of node.</param>
        </member>
        <member name="M:Waher.Things.ThingReference.#ctor(System.String,System.String)">
            <summary>
            Contains a reference to a thing
            </summary>
            <param name="NodeId">ID of node.</param>
            <param name="SourceId">Optional ID of source containing node.</param>
        </member>
        <member name="M:Waher.Things.ThingReference.#ctor(System.String,System.String,System.String)">
            <summary>
            Contains a reference to a thing
            </summary>
            <param name="NodeId">ID of node.</param>
            <param name="SourceId">Optional ID of source containing node.</param>
            <param name="Partition">Optional partition in which the Node ID is unique.</param>
        </member>
        <member name="P:Waher.Things.ThingReference.ObjectId">
            <summary>
            Persisted object ID. Is null if object not persisted.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingReference.NodeId">
            <summary>
            ID of node.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingReference.SourceId">
            <summary>
            Optional ID of source containing node.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingReference.Partition">
            <summary>
            Optional partition in which the Node ID is unique.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingReference.IsEmpty">
            <summary>
            If the reference is an empty reference.
            </summary>
        </member>
        <member name="P:Waher.Things.ThingReference.Key">
            <summary>
            Key for thing reference: [NodeId[, SourceId[, Partition]]]
            </summary>
        </member>
        <member name="M:Waher.Things.ThingReference.SameThing(Waher.Things.IThingReference)">
            <summary>
            Checks if the thing reference is equal to other thing reference.
            </summary>
            <param name="Ref">Second thing reference.</param>
            <returns>If they point to the same thing.</returns>
        </member>
        <member name="M:Waher.Things.ThingReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Waher.Things.ThingReference.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:Waher.Things.ThingReference.Empty">
            <summary>
            Empty thing reference. Can be used by sensors that are not part of a concentrator during readout.
            </summary>
        </member>
        <member name="M:Waher.Things.ThingReference.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Waher.Things.TypeConverters.BooleanFieldToBoolean">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.BooleanField"/> to a <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.BooleanFieldToBoolean.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.BooleanField"/> to a <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.BooleanFieldToBoolean.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.BooleanFieldToBoolean.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.BooleanFieldToBoolean.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.DateFieldToDate">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DateField"/> to a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateFieldToDate.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DateField"/> to a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DateFieldToDate.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DateFieldToDate.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateFieldToDate.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateFieldToDate.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DateFieldToDate.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.DateTimeFieldToDateTime">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DateTimeField"/> to a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateTimeFieldToDateTime.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DateTimeField"/> to a <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateTimeFieldToDateTime.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.DateTimeFieldToDateTime.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DateTimeFieldToDateTime.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.DurationFieldToDuration">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DurationField"/> to a <see cref="T:Waher.Content.Duration"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DurationFieldToDuration.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.DurationField"/> to a <see cref="T:Waher.Content.Duration"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DurationFieldToDuration.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.DurationFieldToDuration.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.DurationFieldToDuration.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.DurationFieldToDuration.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.DurationFieldToDuration.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.EnumFieldToEnum">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.EnumField"/> to a <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.EnumFieldToEnum.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.EnumField"/> to a <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.EnumFieldToEnum.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.EnumFieldToEnum.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.EnumFieldToEnum.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.EnumFieldToEnum.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.EnumFieldToEnum.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.Int32FieldToDouble">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int32Field"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToDouble.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int32Field"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int32FieldToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int32FieldToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.Int32FieldToInt32">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int32Field"/> to a <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToInt32.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int32Field"/> to a <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int32FieldToInt32.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int32FieldToInt32.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToInt32.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int32FieldToInt32.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int32FieldToInt32.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.Int64FieldToDouble">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int64Field"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToDouble.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int64Field"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int64FieldToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int64FieldToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.Int64FieldToInt64">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int64Field"/> to a <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToInt64.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.Int64Field"/> to a <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int64FieldToInt64.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.Int64FieldToInt64.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToInt64.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.Int64FieldToInt64.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.Int64FieldToInt64.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/> to a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/> to a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.PersistableQuantityToPhysicalQuantity.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity">
            <summary>
            Converts a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/> to a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/> to a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.PhysicalQuantityToPersistableQuantity.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.QuantityFieldToDouble">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToDouble.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToDouble.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToDouble.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToDouble.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToDouble.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToDouble.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:Waher.Things.SensorData.PersistableQuantity"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPersistableQuantity.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.QuantityField"/> to a <see cref="T:Waher.Script.Objects.PhysicalQuantity"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.QuantityFieldToPhysicalQuantity.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.StringFieldToString">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.StringField"/> to a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.StringFieldToString.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.StringField"/> to a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.StringFieldToString.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.StringFieldToString.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.StringFieldToString.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.StringFieldToString.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.StringFieldToString.From"/>.</exception>
        </member>
        <member name="T:Waher.Things.TypeConverters.TimeFieldToTimeSpan">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.TimeField"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.TimeFieldToTimeSpan.#ctor">
            <summary>
            Converts a <see cref="T:Waher.Things.SensorData.TimeField"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.From">
            <summary>
            Converter converts objects of this type.
            </summary>
        </member>
        <member name="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.To">
            <summary>
            Converter converts objects to this type.
            </summary>
        </member>
        <member name="M:Waher.Things.TypeConverters.TimeFieldToTimeSpan.Convert(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.To"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.To"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.From"/>.</exception>
        </member>
        <member name="M:Waher.Things.TypeConverters.TimeFieldToTimeSpan.ConvertToElement(System.Object)">
            <summary>
            Converts the object in <paramref name="Value"/> to an object of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.To"/>, encapsulated in an
            <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.
            </summary>
            <param name="Value">Object to be converted.</param>
            <returns>Object of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.To"/>, encapsulated in an <see cref="T:Waher.Script.Abstraction.Elements.IElement"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Value"/> is not of type <see cref="P:Waher.Things.TypeConverters.TimeFieldToTimeSpan.From"/>.</exception>
        </member>
    </members>
</doc>
