using System.Collections.Generic;
using System.Threading.Tasks;
using Waher.IoTGateway;
using Waher.IoTGateway.WebResources;
using Waher.Networking;
using Waher.Networking.HTTP;
using Waher.Networking.HTTP.Authentication;
using Waher.Runtime.Inventory;
using Waher.Security.JWT;
using Waher.Security.Users;

namespace Waher.WebService.Sparql
{
	/// <summary>
	/// Pluggable module registering the SPARQL endpoint to the web server.
	/// </summary>
	[Singleton]
	public class SparqlServiceModule : IModule
	{
		private const string QueryPrivileges = "Admin.Graphs.Query";

		private SparqlEndpoint instance;

		/// <summary>
		/// Pluggable module registering the SPARQL endpoint to the web server.
		/// </summary>
		public SparqlServiceModule()
		{
		}

		/// <summary>
		/// Starts the module.
		/// </summary>
		public Task Start()
		{
			if (!(Gateway.HttpServer is null))
			{
				List<HttpAuthenticationScheme> Schemes = new List<HttpAuthenticationScheme>();

				if (Types.TryGetModuleParameter("JWT", out object Obj) &&
					Obj is JwtFactory JwtFactory &&
					!JwtFactory.Disposed)
				{
					Schemes.Add(new JwtAuthentication(Gateway.Domain, null, JwtFactory));   // Any JWT token generated by the server will suffice. Does not have to point to a registered user.
				}

				if (Gateway.HttpServer.ClientCertificates != ClientCertificates.NotUsed)
					Schemes.Add(new MutualTlsAuthentication(Users.Source));

				Schemes.Add(new BasicAuthentication(true, 128, Gateway.Domain, Users.Source));
				Schemes.Add(new DigestAuthentication(true, 128, DigestAlgorithm.MD5, Gateway.Domain, Users.Source));
				Schemes.Add(new DigestAuthentication(true, 128, DigestAlgorithm.SHA256, Gateway.Domain, Users.Source));
				Schemes.Add(new DigestAuthentication(true, 128, DigestAlgorithm.SHA3_256, Gateway.Domain, Users.Source));
				Schemes.Add(new RequiredUserPrivileges(Gateway.HttpServer, QueryPrivileges));

				this.instance = new SparqlEndpoint("/sparql", Schemes.ToArray());
				Gateway.HttpServer.Register(this.instance);
			}

			return Task.CompletedTask;
		}

		/// <summary>
		/// Stops the module.
		/// </summary>
		public Task Stop()
		{
			if (!(Gateway.HttpServer is null))
			{
				Gateway.HttpServer.Unregister(this.instance);
				this.instance = null;
			}

			return Task.CompletedTask;
		}
	}
}
